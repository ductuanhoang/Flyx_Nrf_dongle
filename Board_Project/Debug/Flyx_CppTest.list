
Flyx_CppTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e688  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800e7c8  0800e7c8  0001e7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f084  0800f084  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f084  0800f084  0001f084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f08c  0800f08c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f08c  0800f08c  0001f08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f090  0800f090  0001f090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002100  200001e8  0800f27c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022e8  0800f27c  000222e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000264ac  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000532d  00000000  00000000  000466bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0004b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  0004d268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006a12  00000000  00000000  0004e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e15e  00000000  00000000  000552e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d71  00000000  00000000  00073440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001041b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c14  00000000  00000000  00104204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0010be18  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0010bee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e7b0 	.word	0x0800e7b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0800e7b0 	.word	0x0800e7b0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_f2uiz>:
 800118c:	0042      	lsls	r2, r0, #1
 800118e:	d20e      	bcs.n	80011ae <__aeabi_f2uiz+0x22>
 8001190:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001194:	d30b      	bcc.n	80011ae <__aeabi_f2uiz+0x22>
 8001196:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800119a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119e:	d409      	bmi.n	80011b4 <__aeabi_f2uiz+0x28>
 80011a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0000 	mov.w	r0, #0
 80011b2:	4770      	bx	lr
 80011b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b8:	d101      	bne.n	80011be <__aeabi_f2uiz+0x32>
 80011ba:	0242      	lsls	r2, r0, #9
 80011bc:	d102      	bne.n	80011c4 <__aeabi_f2uiz+0x38>
 80011be:	f04f 30ff 	mov.w	r0, #4294967295
 80011c2:	4770      	bx	lr
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <__aeabi_uldivmod>:
 80011cc:	b953      	cbnz	r3, 80011e4 <__aeabi_uldivmod+0x18>
 80011ce:	b94a      	cbnz	r2, 80011e4 <__aeabi_uldivmod+0x18>
 80011d0:	2900      	cmp	r1, #0
 80011d2:	bf08      	it	eq
 80011d4:	2800      	cmpeq	r0, #0
 80011d6:	bf1c      	itt	ne
 80011d8:	f04f 31ff 	movne.w	r1, #4294967295
 80011dc:	f04f 30ff 	movne.w	r0, #4294967295
 80011e0:	f000 b9a6 	b.w	8001530 <__aeabi_idiv0>
 80011e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ec:	f000 f83e 	bl	800126c <__udivmoddi4>
 80011f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr

080011fc <__aeabi_d2lz>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	460c      	mov	r4, r1
 8001200:	4605      	mov	r5, r0
 8001202:	4621      	mov	r1, r4
 8001204:	4628      	mov	r0, r5
 8001206:	2200      	movs	r2, #0
 8001208:	2300      	movs	r3, #0
 800120a:	f7ff fbef 	bl	80009ec <__aeabi_dcmplt>
 800120e:	b928      	cbnz	r0, 800121c <__aeabi_d2lz+0x20>
 8001210:	4628      	mov	r0, r5
 8001212:	4621      	mov	r1, r4
 8001214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001218:	f000 b80a 	b.w	8001230 <__aeabi_d2ulz>
 800121c:	4628      	mov	r0, r5
 800121e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001222:	f000 f805 	bl	8001230 <__aeabi_d2ulz>
 8001226:	4240      	negs	r0, r0
 8001228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800122c:	bd38      	pop	{r3, r4, r5, pc}
 800122e:	bf00      	nop

08001230 <__aeabi_d2ulz>:
 8001230:	b5d0      	push	{r4, r6, r7, lr}
 8001232:	2200      	movs	r2, #0
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <__aeabi_d2ulz+0x34>)
 8001236:	4606      	mov	r6, r0
 8001238:	460f      	mov	r7, r1
 800123a:	f7ff f965 	bl	8000508 <__aeabi_dmul>
 800123e:	f7ff fc3b 	bl	8000ab8 <__aeabi_d2uiz>
 8001242:	4604      	mov	r4, r0
 8001244:	f7ff f8e6 	bl	8000414 <__aeabi_ui2d>
 8001248:	2200      	movs	r2, #0
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <__aeabi_d2ulz+0x38>)
 800124c:	f7ff f95c 	bl	8000508 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4630      	mov	r0, r6
 8001256:	4639      	mov	r1, r7
 8001258:	f7fe ff9e 	bl	8000198 <__aeabi_dsub>
 800125c:	f7ff fc2c 	bl	8000ab8 <__aeabi_d2uiz>
 8001260:	4621      	mov	r1, r4
 8001262:	bdd0      	pop	{r4, r6, r7, pc}
 8001264:	3df00000 	.word	0x3df00000
 8001268:	41f00000 	.word	0x41f00000

0800126c <__udivmoddi4>:
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001270:	9e08      	ldr	r6, [sp, #32]
 8001272:	460d      	mov	r5, r1
 8001274:	4604      	mov	r4, r0
 8001276:	468e      	mov	lr, r1
 8001278:	2b00      	cmp	r3, #0
 800127a:	f040 8083 	bne.w	8001384 <__udivmoddi4+0x118>
 800127e:	428a      	cmp	r2, r1
 8001280:	4617      	mov	r7, r2
 8001282:	d947      	bls.n	8001314 <__udivmoddi4+0xa8>
 8001284:	fab2 f382 	clz	r3, r2
 8001288:	b14b      	cbz	r3, 800129e <__udivmoddi4+0x32>
 800128a:	f1c3 0120 	rsb	r1, r3, #32
 800128e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001292:	fa20 f101 	lsr.w	r1, r0, r1
 8001296:	409f      	lsls	r7, r3
 8001298:	ea41 0e0e 	orr.w	lr, r1, lr
 800129c:	409c      	lsls	r4, r3
 800129e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a2:	fbbe fcf8 	udiv	ip, lr, r8
 80012a6:	fa1f f987 	uxth.w	r9, r7
 80012aa:	fb08 e21c 	mls	r2, r8, ip, lr
 80012ae:	fb0c f009 	mul.w	r0, ip, r9
 80012b2:	0c21      	lsrs	r1, r4, #16
 80012b4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012b8:	4290      	cmp	r0, r2
 80012ba:	d90a      	bls.n	80012d2 <__udivmoddi4+0x66>
 80012bc:	18ba      	adds	r2, r7, r2
 80012be:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012c2:	f080 8118 	bcs.w	80014f6 <__udivmoddi4+0x28a>
 80012c6:	4290      	cmp	r0, r2
 80012c8:	f240 8115 	bls.w	80014f6 <__udivmoddi4+0x28a>
 80012cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d0:	443a      	add	r2, r7
 80012d2:	1a12      	subs	r2, r2, r0
 80012d4:	fbb2 f0f8 	udiv	r0, r2, r8
 80012d8:	fb08 2210 	mls	r2, r8, r0, r2
 80012dc:	fb00 f109 	mul.w	r1, r0, r9
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012e6:	42a1      	cmp	r1, r4
 80012e8:	d909      	bls.n	80012fe <__udivmoddi4+0x92>
 80012ea:	193c      	adds	r4, r7, r4
 80012ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f0:	f080 8103 	bcs.w	80014fa <__udivmoddi4+0x28e>
 80012f4:	42a1      	cmp	r1, r4
 80012f6:	f240 8100 	bls.w	80014fa <__udivmoddi4+0x28e>
 80012fa:	3802      	subs	r0, #2
 80012fc:	443c      	add	r4, r7
 80012fe:	1a64      	subs	r4, r4, r1
 8001300:	2100      	movs	r1, #0
 8001302:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001306:	b11e      	cbz	r6, 8001310 <__udivmoddi4+0xa4>
 8001308:	2200      	movs	r2, #0
 800130a:	40dc      	lsrs	r4, r3
 800130c:	e9c6 4200 	strd	r4, r2, [r6]
 8001310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001314:	b902      	cbnz	r2, 8001318 <__udivmoddi4+0xac>
 8001316:	deff      	udf	#255	; 0xff
 8001318:	fab2 f382 	clz	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d14f      	bne.n	80013c0 <__udivmoddi4+0x154>
 8001320:	1a8d      	subs	r5, r1, r2
 8001322:	2101      	movs	r1, #1
 8001324:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001328:	fa1f f882 	uxth.w	r8, r2
 800132c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001330:	fb0e 551c 	mls	r5, lr, ip, r5
 8001334:	fb08 f00c 	mul.w	r0, r8, ip
 8001338:	0c22      	lsrs	r2, r4, #16
 800133a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800133e:	42a8      	cmp	r0, r5
 8001340:	d907      	bls.n	8001352 <__udivmoddi4+0xe6>
 8001342:	197d      	adds	r5, r7, r5
 8001344:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001348:	d202      	bcs.n	8001350 <__udivmoddi4+0xe4>
 800134a:	42a8      	cmp	r0, r5
 800134c:	f200 80e9 	bhi.w	8001522 <__udivmoddi4+0x2b6>
 8001350:	4694      	mov	ip, r2
 8001352:	1a2d      	subs	r5, r5, r0
 8001354:	fbb5 f0fe 	udiv	r0, r5, lr
 8001358:	fb0e 5510 	mls	r5, lr, r0, r5
 800135c:	fb08 f800 	mul.w	r8, r8, r0
 8001360:	b2a4      	uxth	r4, r4
 8001362:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001366:	45a0      	cmp	r8, r4
 8001368:	d907      	bls.n	800137a <__udivmoddi4+0x10e>
 800136a:	193c      	adds	r4, r7, r4
 800136c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001370:	d202      	bcs.n	8001378 <__udivmoddi4+0x10c>
 8001372:	45a0      	cmp	r8, r4
 8001374:	f200 80d9 	bhi.w	800152a <__udivmoddi4+0x2be>
 8001378:	4610      	mov	r0, r2
 800137a:	eba4 0408 	sub.w	r4, r4, r8
 800137e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001382:	e7c0      	b.n	8001306 <__udivmoddi4+0x9a>
 8001384:	428b      	cmp	r3, r1
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x12e>
 8001388:	2e00      	cmp	r6, #0
 800138a:	f000 80b1 	beq.w	80014f0 <__udivmoddi4+0x284>
 800138e:	2100      	movs	r1, #0
 8001390:	e9c6 0500 	strd	r0, r5, [r6]
 8001394:	4608      	mov	r0, r1
 8001396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139a:	fab3 f183 	clz	r1, r3
 800139e:	2900      	cmp	r1, #0
 80013a0:	d14b      	bne.n	800143a <__udivmoddi4+0x1ce>
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	d302      	bcc.n	80013ac <__udivmoddi4+0x140>
 80013a6:	4282      	cmp	r2, r0
 80013a8:	f200 80b9 	bhi.w	800151e <__udivmoddi4+0x2b2>
 80013ac:	1a84      	subs	r4, r0, r2
 80013ae:	eb65 0303 	sbc.w	r3, r5, r3
 80013b2:	2001      	movs	r0, #1
 80013b4:	469e      	mov	lr, r3
 80013b6:	2e00      	cmp	r6, #0
 80013b8:	d0aa      	beq.n	8001310 <__udivmoddi4+0xa4>
 80013ba:	e9c6 4e00 	strd	r4, lr, [r6]
 80013be:	e7a7      	b.n	8001310 <__udivmoddi4+0xa4>
 80013c0:	409f      	lsls	r7, r3
 80013c2:	f1c3 0220 	rsb	r2, r3, #32
 80013c6:	40d1      	lsrs	r1, r2
 80013c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80013d0:	fa1f f887 	uxth.w	r8, r7
 80013d4:	fb0e 1110 	mls	r1, lr, r0, r1
 80013d8:	fa24 f202 	lsr.w	r2, r4, r2
 80013dc:	409d      	lsls	r5, r3
 80013de:	fb00 fc08 	mul.w	ip, r0, r8
 80013e2:	432a      	orrs	r2, r5
 80013e4:	0c15      	lsrs	r5, r2, #16
 80013e6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ea:	45ac      	cmp	ip, r5
 80013ec:	fa04 f403 	lsl.w	r4, r4, r3
 80013f0:	d909      	bls.n	8001406 <__udivmoddi4+0x19a>
 80013f2:	197d      	adds	r5, r7, r5
 80013f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80013f8:	f080 808f 	bcs.w	800151a <__udivmoddi4+0x2ae>
 80013fc:	45ac      	cmp	ip, r5
 80013fe:	f240 808c 	bls.w	800151a <__udivmoddi4+0x2ae>
 8001402:	3802      	subs	r0, #2
 8001404:	443d      	add	r5, r7
 8001406:	eba5 050c 	sub.w	r5, r5, ip
 800140a:	fbb5 f1fe 	udiv	r1, r5, lr
 800140e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001412:	fb01 f908 	mul.w	r9, r1, r8
 8001416:	b295      	uxth	r5, r2
 8001418:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800141c:	45a9      	cmp	r9, r5
 800141e:	d907      	bls.n	8001430 <__udivmoddi4+0x1c4>
 8001420:	197d      	adds	r5, r7, r5
 8001422:	f101 32ff 	add.w	r2, r1, #4294967295
 8001426:	d274      	bcs.n	8001512 <__udivmoddi4+0x2a6>
 8001428:	45a9      	cmp	r9, r5
 800142a:	d972      	bls.n	8001512 <__udivmoddi4+0x2a6>
 800142c:	3902      	subs	r1, #2
 800142e:	443d      	add	r5, r7
 8001430:	eba5 0509 	sub.w	r5, r5, r9
 8001434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001438:	e778      	b.n	800132c <__udivmoddi4+0xc0>
 800143a:	f1c1 0720 	rsb	r7, r1, #32
 800143e:	408b      	lsls	r3, r1
 8001440:	fa22 fc07 	lsr.w	ip, r2, r7
 8001444:	ea4c 0c03 	orr.w	ip, ip, r3
 8001448:	fa25 f407 	lsr.w	r4, r5, r7
 800144c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001450:	fbb4 f9fe 	udiv	r9, r4, lr
 8001454:	fa1f f88c 	uxth.w	r8, ip
 8001458:	fb0e 4419 	mls	r4, lr, r9, r4
 800145c:	fa20 f307 	lsr.w	r3, r0, r7
 8001460:	fb09 fa08 	mul.w	sl, r9, r8
 8001464:	408d      	lsls	r5, r1
 8001466:	431d      	orrs	r5, r3
 8001468:	0c2b      	lsrs	r3, r5, #16
 800146a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800146e:	45a2      	cmp	sl, r4
 8001470:	fa02 f201 	lsl.w	r2, r2, r1
 8001474:	fa00 f301 	lsl.w	r3, r0, r1
 8001478:	d909      	bls.n	800148e <__udivmoddi4+0x222>
 800147a:	eb1c 0404 	adds.w	r4, ip, r4
 800147e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001482:	d248      	bcs.n	8001516 <__udivmoddi4+0x2aa>
 8001484:	45a2      	cmp	sl, r4
 8001486:	d946      	bls.n	8001516 <__udivmoddi4+0x2aa>
 8001488:	f1a9 0902 	sub.w	r9, r9, #2
 800148c:	4464      	add	r4, ip
 800148e:	eba4 040a 	sub.w	r4, r4, sl
 8001492:	fbb4 f0fe 	udiv	r0, r4, lr
 8001496:	fb0e 4410 	mls	r4, lr, r0, r4
 800149a:	fb00 fa08 	mul.w	sl, r0, r8
 800149e:	b2ad      	uxth	r5, r5
 80014a0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014a4:	45a2      	cmp	sl, r4
 80014a6:	d908      	bls.n	80014ba <__udivmoddi4+0x24e>
 80014a8:	eb1c 0404 	adds.w	r4, ip, r4
 80014ac:	f100 35ff 	add.w	r5, r0, #4294967295
 80014b0:	d22d      	bcs.n	800150e <__udivmoddi4+0x2a2>
 80014b2:	45a2      	cmp	sl, r4
 80014b4:	d92b      	bls.n	800150e <__udivmoddi4+0x2a2>
 80014b6:	3802      	subs	r0, #2
 80014b8:	4464      	add	r4, ip
 80014ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014be:	fba0 8902 	umull	r8, r9, r0, r2
 80014c2:	eba4 040a 	sub.w	r4, r4, sl
 80014c6:	454c      	cmp	r4, r9
 80014c8:	46c6      	mov	lr, r8
 80014ca:	464d      	mov	r5, r9
 80014cc:	d319      	bcc.n	8001502 <__udivmoddi4+0x296>
 80014ce:	d016      	beq.n	80014fe <__udivmoddi4+0x292>
 80014d0:	b15e      	cbz	r6, 80014ea <__udivmoddi4+0x27e>
 80014d2:	ebb3 020e 	subs.w	r2, r3, lr
 80014d6:	eb64 0405 	sbc.w	r4, r4, r5
 80014da:	fa04 f707 	lsl.w	r7, r4, r7
 80014de:	fa22 f301 	lsr.w	r3, r2, r1
 80014e2:	431f      	orrs	r7, r3
 80014e4:	40cc      	lsrs	r4, r1
 80014e6:	e9c6 7400 	strd	r7, r4, [r6]
 80014ea:	2100      	movs	r1, #0
 80014ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f0:	4631      	mov	r1, r6
 80014f2:	4630      	mov	r0, r6
 80014f4:	e70c      	b.n	8001310 <__udivmoddi4+0xa4>
 80014f6:	468c      	mov	ip, r1
 80014f8:	e6eb      	b.n	80012d2 <__udivmoddi4+0x66>
 80014fa:	4610      	mov	r0, r2
 80014fc:	e6ff      	b.n	80012fe <__udivmoddi4+0x92>
 80014fe:	4543      	cmp	r3, r8
 8001500:	d2e6      	bcs.n	80014d0 <__udivmoddi4+0x264>
 8001502:	ebb8 0e02 	subs.w	lr, r8, r2
 8001506:	eb69 050c 	sbc.w	r5, r9, ip
 800150a:	3801      	subs	r0, #1
 800150c:	e7e0      	b.n	80014d0 <__udivmoddi4+0x264>
 800150e:	4628      	mov	r0, r5
 8001510:	e7d3      	b.n	80014ba <__udivmoddi4+0x24e>
 8001512:	4611      	mov	r1, r2
 8001514:	e78c      	b.n	8001430 <__udivmoddi4+0x1c4>
 8001516:	4681      	mov	r9, r0
 8001518:	e7b9      	b.n	800148e <__udivmoddi4+0x222>
 800151a:	4608      	mov	r0, r1
 800151c:	e773      	b.n	8001406 <__udivmoddi4+0x19a>
 800151e:	4608      	mov	r0, r1
 8001520:	e749      	b.n	80013b6 <__udivmoddi4+0x14a>
 8001522:	f1ac 0c02 	sub.w	ip, ip, #2
 8001526:	443d      	add	r5, r7
 8001528:	e713      	b.n	8001352 <__udivmoddi4+0xe6>
 800152a:	3802      	subs	r0, #2
 800152c:	443c      	add	r4, r7
 800152e:	e724      	b.n	800137a <__udivmoddi4+0x10e>

08001530 <__aeabi_idiv0>:
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001538:	f002 fcef 	bl	8003f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153c:	f000 f832 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001540:	f000 fa6e 	bl	8001a20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001544:	f000 fa4e 	bl	80019e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001548:	f000 f9f8 	bl	800193c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800154c:	f000 fa20 	bl	8001990 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001550:	f000 f878 	bl	8001644 <MX_ADC_Init>
  MX_SPI1_Init();
 8001554:	f000 f8fc 	bl	8001750 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001558:	f000 f930 	bl	80017bc <MX_SPI2_Init>
  MX_TIM3_Init();
 800155c:	f000 f964 	bl	8001828 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001560:	f000 f9b6 	bl	80018d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ble_com_init();
 8001564:	f000 fd83 	bl	800206e <ble_com_init>
  retarget_shell(&huart1);
 8001568:	480a      	ldr	r0, [pc, #40]	; (8001594 <main+0x60>)
 800156a:	f001 fde5 	bl	8003138 <retarget_shell>
  vsm_cli_start();
 800156e:	f001 fbdf 	bl	8002d30 <vsm_cli_start>
  user_timer_start();
 8001572:	f000 ff5d 	bl	8002430 <user_timer_start>
  knock_sensor_init();
 8001576:	f001 f9d3 	bl	8002920 <knock_sensor_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800157a:	f005 ff89 	bl	8007490 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <main+0x64>)
 8001580:	2100      	movs	r1, #0
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <main+0x68>)
 8001584:	f005 ffea 	bl	800755c <osThreadNew>
 8001588:	4603      	mov	r3, r0
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <main+0x6c>)
 800158c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800158e:	f005 ffb1 	bl	80074f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001592:	e7fe      	b.n	8001592 <main+0x5e>
 8001594:	20001f70 	.word	0x20001f70
 8001598:	0800eaec 	.word	0x0800eaec
 800159c:	08001b29 	.word	0x08001b29
 80015a0:	20001ed4 	.word	0x20001ed4

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b092      	sub	sp, #72	; 0x48
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2234      	movs	r2, #52	; 0x34
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f008 fc92 	bl	8009edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c6:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <SystemClock_Config+0x9c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80015ce:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <SystemClock_Config+0x9c>)
 80015d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d4:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80015d6:	2303      	movs	r3, #3
 80015d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015de:	2301      	movs	r3, #1
 80015e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e2:	2310      	movs	r3, #16
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80015f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80015f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fdaf 	bl	8005164 <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800160c:	f000 fa9f 	bl	8001b4e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001610:	230f      	movs	r3, #15
 8001612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001614:	2303      	movs	r3, #3
 8001616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	2101      	movs	r1, #1
 8001628:	4618      	mov	r0, r3
 800162a:	f004 f8cb 	bl	80057c4 <HAL_RCC_ClockConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001634:	f000 fa8b 	bl	8001b4e <Error_Handler>
  }
}
 8001638:	bf00      	nop
 800163a:	3748      	adds	r7, #72	; 0x48
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40007000 	.word	0x40007000

08001644 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001654:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <MX_ADC_Init+0x104>)
 8001656:	4a3d      	ldr	r2, [pc, #244]	; (800174c <MX_ADC_Init+0x108>)
 8001658:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <MX_ADC_Init+0x104>)
 800165c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001660:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <MX_ADC_Init+0x104>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001668:	4b37      	ldr	r3, [pc, #220]	; (8001748 <MX_ADC_Init+0x104>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800166e:	4b36      	ldr	r3, [pc, #216]	; (8001748 <MX_ADC_Init+0x104>)
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001674:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <MX_ADC_Init+0x104>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <MX_ADC_Init+0x104>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <MX_ADC_Init+0x104>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <MX_ADC_Init+0x104>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <MX_ADC_Init+0x104>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 4;
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <MX_ADC_Init+0x104>)
 8001698:	2204      	movs	r2, #4
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <MX_ADC_Init+0x104>)
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <MX_ADC_Init+0x104>)
 80016a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <MX_ADC_Init+0x104>)
 80016ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <MX_ADC_Init+0x104>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80016bc:	4822      	ldr	r0, [pc, #136]	; (8001748 <MX_ADC_Init+0x104>)
 80016be:	f002 fc9b 	bl	8003ff8 <HAL_ADC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC_Init+0x88>
  {
    Error_Handler();
 80016c8:	f000 fa41 	bl	8001b4e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	481a      	ldr	r0, [pc, #104]	; (8001748 <MX_ADC_Init+0x104>)
 80016de:	f002 fe71 	bl	80043c4 <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 80016e8:	f000 fa31 	bl	8001b4e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4813      	ldr	r0, [pc, #76]	; (8001748 <MX_ADC_Init+0x104>)
 80016fa:	f002 fe63 	bl	80043c4 <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC_Init+0xc4>
  {
    Error_Handler();
 8001704:	f000 fa23 	bl	8001b4e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001708:	2308      	movs	r3, #8
 800170a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800170c:	2303      	movs	r3, #3
 800170e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <MX_ADC_Init+0x104>)
 8001716:	f002 fe55 	bl	80043c4 <HAL_ADC_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_ADC_Init+0xe0>
  {
    Error_Handler();
 8001720:	f000 fa15 	bl	8001b4e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001724:	2309      	movs	r3, #9
 8001726:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001728:	2304      	movs	r3, #4
 800172a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_ADC_Init+0x104>)
 8001732:	f002 fe47 	bl	80043c4 <HAL_ADC_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_ADC_Init+0xfc>
  {
    Error_Handler();
 800173c:	f000 fa07 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200020cc 	.word	0x200020cc
 800174c:	40012400 	.word	0x40012400

08001750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <MX_SPI1_Init+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI1_Init+0x64>)
 800175c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI1_Init+0x64>)
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI1_Init+0x64>)
 800179c:	220a      	movs	r2, #10
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_SPI1_Init+0x64>)
 80017a2:	f004 faa1 	bl	8005ce8 <HAL_SPI_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017ac:	f000 f9cf 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20001ff0 	.word	0x20001ff0
 80017b8:	40013000 	.word	0x40013000

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_SPI2_Init+0x64>)
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <MX_SPI2_Init+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_SPI2_Init+0x64>)
 80017c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_SPI2_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_SPI2_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_SPI2_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_SPI2_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_SPI2_Init+0x64>)
 80017e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_SPI2_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <MX_SPI2_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_SPI2_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <MX_SPI2_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_SPI2_Init+0x64>)
 8001808:	220a      	movs	r2, #10
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_SPI2_Init+0x64>)
 800180e:	f004 fa6b 	bl	8005ce8 <HAL_SPI_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001818:	f000 f999 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20001ed8 	.word	0x20001ed8
 8001824:	40003800 	.word	0x40003800

08001828 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <MX_TIM3_Init+0xa0>)
 8001846:	4a21      	ldr	r2, [pc, #132]	; (80018cc <MX_TIM3_Init+0xa4>)
 8001848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3200-1;
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_TIM3_Init+0xa0>)
 800184c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001850:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_TIM3_Init+0xa0>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_TIM3_Init+0xa0>)
 800185a:	2263      	movs	r2, #99	; 0x63
 800185c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_TIM3_Init+0xa0>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_TIM3_Init+0xa0>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800186a:	4817      	ldr	r0, [pc, #92]	; (80018c8 <MX_TIM3_Init+0xa0>)
 800186c:	f004 fe1e 	bl	80064ac <HAL_TIM_OC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001876:	f000 f96a 	bl	8001b4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800187a:	2320      	movs	r3, #32
 800187c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	4619      	mov	r1, r3
 8001888:	480f      	ldr	r0, [pc, #60]	; (80018c8 <MX_TIM3_Init+0xa0>)
 800188a:	f005 f909 	bl	8006aa0 <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001894:	f000 f95b 	bl	8001b4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001898:	2300      	movs	r3, #0
 800189a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	2200      	movs	r2, #0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <MX_TIM3_Init+0xa0>)
 80018b0:	f004 ff18 	bl	80066e4 <HAL_TIM_OC_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80018ba:	f000 f948 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20001f30 	.word	0x20001f30
 80018cc:	40000400 	.word	0x40000400

080018d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_TIM6_Init+0x64>)
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <MX_TIM6_Init+0x68>)
 80018e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 320-1;
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_TIM6_Init+0x64>)
 80018e6:	f240 123f 	movw	r2, #319	; 0x13f
 80018ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_TIM6_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_TIM6_Init+0x64>)
 80018f4:	2263      	movs	r2, #99	; 0x63
 80018f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_TIM6_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_TIM6_Init+0x64>)
 8001900:	f004 fcda 	bl	80062b8 <HAL_TIM_Base_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800190a:	f000 f920 	bl	8001b4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001916:	463b      	mov	r3, r7
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <MX_TIM6_Init+0x64>)
 800191c:	f005 f8c0 	bl	8006aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001926:	f000 f912 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20001fb0 	.word	0x20001fb0
 8001938:	40001000 	.word	0x40001000

0800193c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_USART1_UART_Init+0x50>)
 8001944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001974:	f005 f8f2 	bl	8006b5c <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800197e:	f000 f8e6 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20001f70 	.word	0x20001f70
 800198c:	40013800 	.word	0x40013800

08001990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <MX_USART2_UART_Init+0x50>)
 8001998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019c8:	f005 f8c8 	bl	8006b5c <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019d2:	f000 f8bc 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20002048 	.word	0x20002048
 80019e0:	40004400 	.word	0x40004400

080019e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_DMA_Init+0x38>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <MX_DMA_Init+0x38>)
 80019f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_DMA_Init+0x38>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2105      	movs	r1, #5
 8001a06:	200b      	movs	r0, #11
 8001a08:	f002 ffd5 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a0c:	200b      	movs	r0, #11
 8001a0e:	f002 ffee 	bl	80049ee <HAL_NVIC_EnableIRQ>

}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a38      	ldr	r2, [pc, #224]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KNOCK_HOLD_Pin|BLE_TRANS_MODE_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001a84:	4826      	ldr	r0, [pc, #152]	; (8001b20 <MX_GPIO_Init+0x100>)
 8001a86:	f003 fb3c 	bl	8005102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|BLE_RST_Pin, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001a90:	4823      	ldr	r0, [pc, #140]	; (8001b20 <MX_GPIO_Init+0x100>)
 8001a92:	f003 fb36 	bl	8005102 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KNOCK_HOLD_Pin BLE_TRANS_MODE_Pin */
  GPIO_InitStruct.Pin = KNOCK_HOLD_Pin|BLE_TRANS_MODE_Pin;
 8001a96:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	481c      	ldr	r0, [pc, #112]	; (8001b20 <MX_GPIO_Init+0x100>)
 8001ab0:	f003 f990 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin BLE_RST_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|BLE_RST_Pin;
 8001ab4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	4814      	ldr	r0, [pc, #80]	; (8001b20 <MX_GPIO_Init+0x100>)
 8001ace:	f003 f981 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_SENSOR_Pin */
  GPIO_InitStruct.Pin = RPM_SENSOR_Pin;
 8001ad2:	2340      	movs	r3, #64	; 0x40
 8001ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <MX_GPIO_Init+0x104>)
 8001ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RPM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480e      	ldr	r0, [pc, #56]	; (8001b20 <MX_GPIO_Init+0x100>)
 8001ae6:	f003 f975 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STTT_Pin */
  GPIO_InitStruct.Pin = BLE_STTT_Pin;
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLE_STTT_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4619      	mov	r1, r3
 8001afc:	4808      	ldr	r0, [pc, #32]	; (8001b20 <MX_GPIO_Init+0x100>)
 8001afe:	f003 f969 	bl	8004dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2105      	movs	r1, #5
 8001b06:	2017      	movs	r0, #23
 8001b08:	f002 ff55 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b0c:	2017      	movs	r0, #23
 8001b0e:	f002 ff6e 	bl	80049ee <HAL_NVIC_EnableIRQ>

}
 8001b12:	bf00      	nop
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020400 	.word	0x40020400
 8001b24:	10110000 	.word	0x10110000

08001b28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	adc_start_process();
 8001b30:	f000 fc62 	bl	80023f8 <adc_start_process>
  /* Infinite loop */
  for(;;)
  {
	sensor_measure_process(); // process for read sensor
 8001b34:	f000 fcea 	bl	800250c <sensor_measure_process>
	vsm_cli_main_loop(NULL);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f001 f925 	bl	8002d88 <vsm_cli_main_loop>
	ble_hanlder_loop(); // read message ble
 8001b3e:	f000 fad7 	bl	80020f0 <ble_hanlder_loop>
	ble_com_send_interval(); // send interval message
 8001b42:	f000 fa9b 	bl	800207c <ble_com_send_interval>

	osDelay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f005 fdb2 	bl	80076b0 <osDelay>
	sensor_measure_process(); // process for read sensor
 8001b4c:	e7f2      	b.n	8001b34 <StartDefaultTask+0xc>

08001b4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b52:	b672      	cpsid	i
}
 8001b54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <Error_Handler+0x8>

08001b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <HAL_MspInit+0x64>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	4a16      	ldr	r2, [pc, #88]	; (8001bbc <HAL_MspInit+0x64>)
 8001b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b68:	6253      	str	r3, [r2, #36]	; 0x24
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_MspInit+0x64>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_MspInit+0x64>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_MspInit+0x64>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_MspInit+0x64>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_MspInit+0x64>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_MspInit+0x64>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6253      	str	r3, [r2, #36]	; 0x24
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_MspInit+0x64>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	210f      	movs	r1, #15
 8001baa:	f06f 0001 	mvn.w	r0, #1
 8001bae:	f002 ff02 	bl	80049b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a35      	ldr	r2, [pc, #212]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d163      	bne.n	8001caa <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be2:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bec:	6213      	str	r3, [r2, #32]
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481f      	ldr	r0, [pc, #124]	; (8001cbc <HAL_ADC_MspInit+0xfc>)
 8001c3e:	f003 f8c9 	bl	8004dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c42:	2303      	movs	r3, #3
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c46:	2303      	movs	r3, #3
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	481a      	ldr	r0, [pc, #104]	; (8001cc0 <HAL_ADC_MspInit+0x100>)
 8001c56:	f003 f8bd 	bl	8004dd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001c5c:	4a1a      	ldr	r2, [pc, #104]	; (8001cc8 <HAL_ADC_MspInit+0x108>)
 8001c5e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c78:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c80:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001c8e:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001c90:	f002 fec8 	bl	8004a24 <HAL_DMA_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8001c9a:	f7ff ff58 	bl	8001b4e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_ADC_MspInit+0x104>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40012400 	.word	0x40012400
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	20002088 	.word	0x20002088
 8001cc8:	40026008 	.word	0x40026008

08001ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08c      	sub	sp, #48	; 0x30
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2e      	ldr	r2, [pc, #184]	; (8001da4 <HAL_SPI_MspInit+0xd8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d128      	bne.n	8001d40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d1e:	23e0      	movs	r3, #224	; 0xe0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	481c      	ldr	r0, [pc, #112]	; (8001dac <HAL_SPI_MspInit+0xe0>)
 8001d3a:	f003 f84b 	bl	8004dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d3e:	e02d      	b.n	8001d9c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1a      	ldr	r2, [pc, #104]	; (8001db0 <HAL_SPI_MspInit+0xe4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d128      	bne.n	8001d9c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6253      	str	r3, [r2, #36]	; 0x24
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_SPI_MspInit+0xdc>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d7a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <HAL_SPI_MspInit+0xe8>)
 8001d98:	f003 f81c 	bl	8004dd4 <HAL_GPIO_Init>
}
 8001d9c:	bf00      	nop
 8001d9e:	3730      	adds	r7, #48	; 0x30
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40013000 	.word	0x40013000
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40003800 	.word	0x40003800
 8001db4:	40020400 	.word	0x40020400

08001db8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a09      	ldr	r2, [pc, #36]	; (8001dec <HAL_TIM_OC_MspInit+0x34>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10b      	bne.n	8001de2 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_TIM_OC_MspInit+0x38>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <HAL_TIM_OC_MspInit+0x38>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6253      	str	r3, [r2, #36]	; 0x24
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_TIM_OC_MspInit+0x38>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <HAL_TIM_Base_MspInit+0x44>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d113      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_TIM_Base_MspInit+0x48>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <HAL_TIM_Base_MspInit+0x48>)
 8001e0c:	f043 0310 	orr.w	r3, r3, #16
 8001e10:	6253      	str	r3, [r2, #36]	; 0x24
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_TIM_Base_MspInit+0x48>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2105      	movs	r1, #5
 8001e22:	202b      	movs	r0, #43	; 0x2b
 8001e24:	f002 fdc7 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f002 fde0 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40001000 	.word	0x40001000
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a36      	ldr	r2, [pc, #216]	; (8001f38 <HAL_UART_MspInit+0xf8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d131      	bne.n	8001ec6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a35      	ldr	r2, [pc, #212]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	4824      	ldr	r0, [pc, #144]	; (8001f40 <HAL_UART_MspInit+0x100>)
 8001eb0:	f002 ff90 	bl	8004dd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2105      	movs	r1, #5
 8001eb8:	2025      	movs	r0, #37	; 0x25
 8001eba:	f002 fd7c 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ebe:	2025      	movs	r0, #37	; 0x25
 8001ec0:	f002 fd95 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ec4:	e034      	b.n	8001f30 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_UART_MspInit+0x104>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d12f      	bne.n	8001f30 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eda:	6253      	str	r3, [r2, #36]	; 0x24
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	61d3      	str	r3, [r2, #28]
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f00:	230c      	movs	r3, #12
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f10:	2307      	movs	r3, #7
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4809      	ldr	r0, [pc, #36]	; (8001f40 <HAL_UART_MspInit+0x100>)
 8001f1c:	f002 ff5a 	bl	8004dd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2105      	movs	r1, #5
 8001f24:	2026      	movs	r0, #38	; 0x26
 8001f26:	f002 fd46 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f2a:	2026      	movs	r0, #38	; 0x26
 8001f2c:	f002 fd5f 	bl	80049ee <HAL_NVIC_EnableIRQ>
}
 8001f30:	bf00      	nop
 8001f32:	3730      	adds	r7, #48	; 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40004400 	.word	0x40004400

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f76:	f002 f823 	bl	8003fc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f7a:	f006 ffa5 	bl	8008ec8 <xTaskGetSchedulerState>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d001      	beq.n	8001f88 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f84:	f007 fd00 	bl	8009988 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <DMA1_Channel1_IRQHandler+0x10>)
 8001f92:	f002 fe40 	bl	8004c16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20002088 	.word	0x20002088

08001fa0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fa4:	2040      	movs	r0, #64	; 0x40
 8001fa6:	f003 f8c5 	bl	8005134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <USART1_IRQHandler+0x10>)
 8001fb6:	f004 ff0b 	bl	8006dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20001f70 	.word	0x20001f70

08001fc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <USART2_IRQHandler+0x10>)
 8001fca:	f004 ff01 	bl	8006dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20002048 	.word	0x20002048

08001fd8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <TIM6_IRQHandler+0x18>)
 8001fde:	f004 faa4 	bl	800652a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  timer_tick++; // timer 1ms
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <TIM6_IRQHandler+0x1c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4a02      	ldr	r2, [pc, #8]	; (8001ff4 <TIM6_IRQHandler+0x1c>)
 8001fea:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM6_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20001fb0 	.word	0x20001fb0
 8001ff4:	20000204 	.word	0x20000204

08001ff8 <timer_get_tick>:

/* USER CODE BEGIN 1 */
uint32_t timer_get_tick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
	return timer_tick;
 8001ffc:	4b02      	ldr	r3, [pc, #8]	; (8002008 <timer_get_tick+0x10>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	20000204 	.word	0x20000204

0800200c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <SystemInit+0x14>)
 8002012:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002016:	609a      	str	r2, [r3, #8]
#endif
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002024:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002026:	e003      	b.n	8002030 <LoopCopyDataInit>

08002028 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800202a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800202c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800202e:	3104      	adds	r1, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002030:	480a      	ldr	r0, [pc, #40]	; (800205c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002034:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002036:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002038:	d3f6      	bcc.n	8002028 <CopyDataInit>
  ldr r2, =_sbss
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800203c:	e002      	b.n	8002044 <LoopFillZerobss>

0800203e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002040:	f842 3b04 	str.w	r3, [r2], #4

08002044 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002046:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002048:	d3f9      	bcc.n	800203e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800204a:	f7ff ffdf 	bl	800200c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204e:	f007 fef9 	bl	8009e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002052:	f7ff fa6f 	bl	8001534 <main>
  bx lr
 8002056:	4770      	bx	lr
  ldr r3, =_sidata
 8002058:	0800f094 	.word	0x0800f094
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002060:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8002064:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8002068:	200022e8 	.word	0x200022e8

0800206c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_IRQHandler>

0800206e <ble_com_init>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void ble_com_init(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
	user_uart_init(); // for ble communication init
 8002072:	f000 f9e7 	bl	8002444 <user_uart_init>
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <ble_com_send_interval>:

void ble_com_send_interval(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	sensor_read.ble_status = HAL_GPIO_ReadPin(BLE_STTT_GPIO_Port, BLE_STTT_Pin);
 8002080:	2180      	movs	r1, #128	; 0x80
 8002082:	4817      	ldr	r0, [pc, #92]	; (80020e0 <ble_com_send_interval+0x64>)
 8002084:	f003 f826 	bl	80050d4 <HAL_GPIO_ReadPin>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <ble_com_send_interval+0x68>)
 800208e:	741a      	strb	r2, [r3, #16]
	if( sensor_read.ble_status)
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <ble_com_send_interval+0x68>)
 8002092:	7c1b      	ldrb	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01e      	beq.n	80020d6 <ble_com_send_interval+0x5a>
	{
		switch (step_ble_send) {
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <ble_com_send_interval+0x6c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <ble_com_send_interval+0x2a>
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d009      	beq.n	80020b8 <ble_com_send_interval+0x3c>
				{
					step_ble_send = 0;
					device_send_report();
				}
			default:
				break;
 80020a4:	e019      	b.n	80020da <ble_com_send_interval+0x5e>
				previous_tick_send = timer_get_tick();
 80020a6:	f7ff ffa7 	bl	8001ff8 <timer_get_tick>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <ble_com_send_interval+0x70>)
 80020ae:	6013      	str	r3, [r2, #0]
				step_ble_send = 1;
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <ble_com_send_interval+0x6c>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
				break;
 80020b6:	e011      	b.n	80020dc <ble_com_send_interval+0x60>
				if( timer_get_tick() - previous_tick_send > 1000) // 10s
 80020b8:	f7ff ff9e 	bl	8001ff8 <timer_get_tick>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <ble_com_send_interval+0x70>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020c8:	d907      	bls.n	80020da <ble_com_send_interval+0x5e>
					step_ble_send = 0;
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <ble_com_send_interval+0x6c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
					device_send_report();
 80020d0:	f000 f8b4 	bl	800223c <device_send_report>
				break;
 80020d4:	e001      	b.n	80020da <ble_com_send_interval+0x5e>
		}
	}
 80020d6:	bf00      	nop
 80020d8:	e000      	b.n	80020dc <ble_com_send_interval+0x60>
				break;
 80020da:	bf00      	nop

}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020400 	.word	0x40020400
 80020e4:	20001ec0 	.word	0x20001ec0
 80020e8:	20000294 	.word	0x20000294
 80020ec:	20000290 	.word	0x20000290

080020f0 <ble_hanlder_loop>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void ble_hanlder_loop(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0

	if (fifo_is_empty(&com_fifo) != true && fifo_get(&com_fifo, &ch) == true)
 80020f4:	4845      	ldr	r0, [pc, #276]	; (800220c <ble_hanlder_loop+0x11c>)
 80020f6:	f000 ffc1 	bl	800307c <fifo_is_empty>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f083 0301 	eor.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d060      	beq.n	80021c8 <ble_hanlder_loop+0xd8>
 8002106:	4942      	ldr	r1, [pc, #264]	; (8002210 <ble_hanlder_loop+0x120>)
 8002108:	4840      	ldr	r0, [pc, #256]	; (800220c <ble_hanlder_loop+0x11c>)
 800210a:	f000 ff85 	bl	8003018 <fifo_get>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d059      	beq.n	80021c8 <ble_hanlder_loop+0xd8>
	{
		if( new_message == false)
 8002114:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <ble_hanlder_loop+0x124>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f083 0301 	eor.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d013      	beq.n	800214a <ble_hanlder_loop+0x5a>
		{
			APP_LOGD("new message");
 8002122:	2352      	movs	r3, #82	; 0x52
 8002124:	4a3c      	ldr	r2, [pc, #240]	; (8002218 <ble_hanlder_loop+0x128>)
 8002126:	493d      	ldr	r1, [pc, #244]	; (800221c <ble_hanlder_loop+0x12c>)
 8002128:	483d      	ldr	r0, [pc, #244]	; (8002220 <ble_hanlder_loop+0x130>)
 800212a:	f001 f853 	bl	80031d4 <uart_debug_printf>
 800212e:	483d      	ldr	r0, [pc, #244]	; (8002224 <ble_hanlder_loop+0x134>)
 8002130:	f001 f850 	bl	80031d4 <uart_debug_printf>
 8002134:	483c      	ldr	r0, [pc, #240]	; (8002228 <ble_hanlder_loop+0x138>)
 8002136:	f001 f84d 	bl	80031d4 <uart_debug_printf>
			previous_tick_count = timer_get_tick();
 800213a:	f7ff ff5d 	bl	8001ff8 <timer_get_tick>
 800213e:	4603      	mov	r3, r0
 8002140:	4a3a      	ldr	r2, [pc, #232]	; (800222c <ble_hanlder_loop+0x13c>)
 8002142:	6013      	str	r3, [r2, #0]
			new_message = true;
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <ble_hanlder_loop+0x124>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
		}
		if( (ch == '\n') | (ch == '\r'))
 800214a:	4b31      	ldr	r3, [pc, #196]	; (8002210 <ble_hanlder_loop+0x120>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b0a      	cmp	r3, #10
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <ble_hanlder_loop+0x120>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b0d      	cmp	r3, #13
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d015      	beq.n	800219a <ble_hanlder_loop+0xaa>
		{
			APP_LOGD("data read: = %s", com_rx_buffer);
 800216e:	2358      	movs	r3, #88	; 0x58
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <ble_hanlder_loop+0x128>)
 8002172:	492a      	ldr	r1, [pc, #168]	; (800221c <ble_hanlder_loop+0x12c>)
 8002174:	482a      	ldr	r0, [pc, #168]	; (8002220 <ble_hanlder_loop+0x130>)
 8002176:	f001 f82d 	bl	80031d4 <uart_debug_printf>
 800217a:	492d      	ldr	r1, [pc, #180]	; (8002230 <ble_hanlder_loop+0x140>)
 800217c:	482d      	ldr	r0, [pc, #180]	; (8002234 <ble_hanlder_loop+0x144>)
 800217e:	f001 f829 	bl	80031d4 <uart_debug_printf>
 8002182:	4829      	ldr	r0, [pc, #164]	; (8002228 <ble_hanlder_loop+0x138>)
 8002184:	f001 f826 	bl	80031d4 <uart_debug_printf>
			length_count = 0;
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <ble_hanlder_loop+0x148>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
			memset( com_rx_buffer, 0x00, sizeof(com_rx_buffer));
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	2100      	movs	r1, #0
 8002192:	4827      	ldr	r0, [pc, #156]	; (8002230 <ble_hanlder_loop+0x140>)
 8002194:	f007 fea2 	bl	8009edc <memset>
 8002198:	e016      	b.n	80021c8 <ble_hanlder_loop+0xd8>
		}
		else
		{
			if (length_count >= DATA_RX_MAX_LENGHT)
 800219a:	4b27      	ldr	r3, [pc, #156]	; (8002238 <ble_hanlder_loop+0x148>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da04      	bge.n	80021ae <ble_hanlder_loop+0xbe>
			{
				memset( com_rx_buffer, 0x00, sizeof(com_rx_buffer));
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	2100      	movs	r1, #0
 80021a8:	4821      	ldr	r0, [pc, #132]	; (8002230 <ble_hanlder_loop+0x140>)
 80021aa:	f007 fe97 	bl	8009edc <memset>
			}
			com_rx_buffer[length_count] = ch;
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <ble_hanlder_loop+0x148>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <ble_hanlder_loop+0x120>)
 80021b6:	7819      	ldrb	r1, [r3, #0]
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <ble_hanlder_loop+0x140>)
 80021ba:	5499      	strb	r1, [r3, r2]
			length_count++;
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <ble_hanlder_loop+0x148>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	3301      	adds	r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <ble_hanlder_loop+0x148>)
 80021c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if( new_message == true)
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <ble_hanlder_loop+0x124>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01a      	beq.n	8002206 <ble_hanlder_loop+0x116>
	{
		if(timer_get_tick() - previous_tick_count > 200)
 80021d0:	f7ff ff12 	bl	8001ff8 <timer_get_tick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <ble_hanlder_loop+0x13c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2bc8      	cmp	r3, #200	; 0xc8
 80021de:	d912      	bls.n	8002206 <ble_hanlder_loop+0x116>
		{
			new_message = false;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <ble_hanlder_loop+0x124>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
			APP_LOGD("data read: = %s", com_rx_buffer);
 80021e6:	236c      	movs	r3, #108	; 0x6c
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <ble_hanlder_loop+0x128>)
 80021ea:	490c      	ldr	r1, [pc, #48]	; (800221c <ble_hanlder_loop+0x12c>)
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <ble_hanlder_loop+0x130>)
 80021ee:	f000 fff1 	bl	80031d4 <uart_debug_printf>
 80021f2:	490f      	ldr	r1, [pc, #60]	; (8002230 <ble_hanlder_loop+0x140>)
 80021f4:	480f      	ldr	r0, [pc, #60]	; (8002234 <ble_hanlder_loop+0x144>)
 80021f6:	f000 ffed 	bl	80031d4 <uart_debug_printf>
 80021fa:	480b      	ldr	r0, [pc, #44]	; (8002228 <ble_hanlder_loop+0x138>)
 80021fc:	f000 ffea 	bl	80031d4 <uart_debug_printf>
			length_count = 0;
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <ble_hanlder_loop+0x148>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20002120 	.word	0x20002120
 8002210:	20000289 	.word	0x20000289
 8002214:	2000028a 	.word	0x2000028a
 8002218:	0800eb34 	.word	0x0800eb34
 800221c:	0800e7d4 	.word	0x0800e7d4
 8002220:	0800e7d8 	.word	0x0800e7d8
 8002224:	0800e7e8 	.word	0x0800e7e8
 8002228:	0800e7f4 	.word	0x0800e7f4
 800222c:	2000028c 	.word	0x2000028c
 8002230:	20000208 	.word	0x20000208
 8002234:	0800e7f8 	.word	0x0800e7f8
 8002238:	20000288 	.word	0x20000288

0800223c <device_send_report>:
/***********************************************************************************************************************
* Static Functions
***********************************************************************************************************************/

static void device_send_report(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
	// message will send battery (volt), knock, oild pressuare, rpm
	uint8_t tmp_data[MESSAGE_LENGTH];

	tmp_data[0] = 0x00; // command id
 8002242:	2300      	movs	r3, #0
 8002244:	713b      	strb	r3, [r7, #4]
	tmp_data[1] = sensor_read.fVbat_lipo >> 8;
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <device_send_report+0x74>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b29b      	uxth	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	717b      	strb	r3, [r7, #5]
	tmp_data[2] = sensor_read.fVbat_lipo & 0x00FF;
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <device_send_report+0x74>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	71bb      	strb	r3, [r7, #6]

	tmp_data[3] = sensor_read.knock_sensor_channel_1 >> 8;
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <device_send_report+0x74>)
 800225c:	899b      	ldrh	r3, [r3, #12]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	71fb      	strb	r3, [r7, #7]
	tmp_data[4] = sensor_read.knock_sensor_channel_1 & 0x00FF;
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <device_send_report+0x74>)
 8002268:	899b      	ldrh	r3, [r3, #12]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	723b      	strb	r3, [r7, #8]

	tmp_data[5] = sensor_read.fPressure_sender_percent >> 8;
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <device_send_report+0x74>)
 8002270:	889b      	ldrh	r3, [r3, #4]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	727b      	strb	r3, [r7, #9]
	tmp_data[6] =sensor_read.fPressure_sender_percent & 0x00FF;
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <device_send_report+0x74>)
 800227c:	889b      	ldrh	r3, [r3, #4]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	72bb      	strb	r3, [r7, #10]

	tmp_data[7] = sensor_read.rpm >> 16;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <device_send_report+0x74>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	0c1b      	lsrs	r3, r3, #16
 8002288:	b2db      	uxtb	r3, r3
 800228a:	72fb      	strb	r3, [r7, #11]
	tmp_data[8] =sensor_read.rpm >> 8;
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <device_send_report+0x74>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	b2db      	uxtb	r3, r3
 8002294:	733b      	strb	r3, [r7, #12]
	tmp_data[9] =sensor_read.rpm & 0x0000FF;
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <device_send_report+0x74>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	737b      	strb	r3, [r7, #13]

	ble_packet_message(tmp_data, MESSAGE_LENGTH);
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	210a      	movs	r1, #10
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f806 	bl	80022b4 <ble_packet_message>

}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20001ec0 	.word	0x20001ec0

080022b4 <ble_packet_message>:

static bool ble_packet_message(uint8_t *buf, uint8_t buf_len)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
	bool status = false;
 80022c0:	2300      	movs	r3, #0
 80022c2:	773b      	strb	r3, [r7, #28]
    uint8_t tmp_cksa = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	77fb      	strb	r3, [r7, #31]
    uint8_t tmp_cksb = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	77bb      	strb	r3, [r7, #30]
    uint8_t i = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	777b      	strb	r3, [r7, #29]
    uint8_t sum_data[MESSAGE_LENGTH + 5];

    sum_data[0] = HEADER_01;
 80022d0:	23aa      	movs	r3, #170	; 0xaa
 80022d2:	733b      	strb	r3, [r7, #12]
    sum_data[1] = HEADER_02;
 80022d4:	2355      	movs	r3, #85	; 0x55
 80022d6:	737b      	strb	r3, [r7, #13]
    sum_data[2] = buf_len;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	73bb      	strb	r3, [r7, #14]

    tmp_cksa += buf_len;
 80022dc:	7ffa      	ldrb	r2, [r7, #31]
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	4413      	add	r3, r2
 80022e2:	77fb      	strb	r3, [r7, #31]
    tmp_cksb += tmp_cksa;
 80022e4:	7fba      	ldrb	r2, [r7, #30]
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
 80022e8:	4413      	add	r3, r2
 80022ea:	77bb      	strb	r3, [r7, #30]

    for (i = 0; i < buf_len; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	777b      	strb	r3, [r7, #29]
 80022f0:	e018      	b.n	8002324 <ble_packet_message+0x70>
    {
        sum_data[3 + i] = buf[i];
 80022f2:	7f7b      	ldrb	r3, [r7, #29]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	441a      	add	r2, r3
 80022f8:	7f7b      	ldrb	r3, [r7, #29]
 80022fa:	3303      	adds	r3, #3
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	f107 0120 	add.w	r1, r7, #32
 8002302:	440b      	add	r3, r1
 8002304:	f803 2c14 	strb.w	r2, [r3, #-20]
        tmp_cksa += buf[i];
 8002308:	7f7b      	ldrb	r3, [r7, #29]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	7ffb      	ldrb	r3, [r7, #31]
 8002312:	4413      	add	r3, r2
 8002314:	77fb      	strb	r3, [r7, #31]
        tmp_cksb += tmp_cksa;
 8002316:	7fba      	ldrb	r2, [r7, #30]
 8002318:	7ffb      	ldrb	r3, [r7, #31]
 800231a:	4413      	add	r3, r2
 800231c:	77bb      	strb	r3, [r7, #30]
    for (i = 0; i < buf_len; i++)
 800231e:	7f7b      	ldrb	r3, [r7, #29]
 8002320:	3301      	adds	r3, #1
 8002322:	777b      	strb	r3, [r7, #29]
 8002324:	7f7a      	ldrb	r2, [r7, #29]
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	429a      	cmp	r2, r3
 800232a:	d3e2      	bcc.n	80022f2 <ble_packet_message+0x3e>
    }

    sum_data[3 + i] = tmp_cksa;
 800232c:	7f7b      	ldrb	r3, [r7, #29]
 800232e:	3303      	adds	r3, #3
 8002330:	f107 0220 	add.w	r2, r7, #32
 8002334:	4413      	add	r3, r2
 8002336:	7ffa      	ldrb	r2, [r7, #31]
 8002338:	f803 2c14 	strb.w	r2, [r3, #-20]
    sum_data[4 + i] = tmp_cksb;
 800233c:	7f7b      	ldrb	r3, [r7, #29]
 800233e:	3304      	adds	r3, #4
 8002340:	f107 0220 	add.w	r2, r7, #32
 8002344:	4413      	add	r3, r2
 8002346:	7fba      	ldrb	r2, [r7, #30]
 8002348:	f803 2c14 	strb.w	r2, [r3, #-20]

    uart_trasmit(sum_data, buf_len + 5);
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	b29b      	uxth	r3, r3
 8002350:	3305      	adds	r3, #5
 8002352:	b29a      	uxth	r2, r3
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f890 	bl	8002480 <uart_trasmit>
	return status;
 8002360:	7f3b      	ldrb	r3, [r7, #28]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_ADC_ConvCpltCallback>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    uint16_t i = 0, j = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	81fb      	strh	r3, [r7, #14]
 8002378:	2300      	movs	r3, #0
 800237a:	81bb      	strh	r3, [r7, #12]
    uint32_t sumTmp = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
    HAL_TIM_Base_Stop(&TIMER_TRIGGER);
 8002380:	4819      	ldr	r0, [pc, #100]	; (80023e8 <HAL_ADC_ConvCpltCallback+0x7c>)
 8002382:	f004 f823 	bl	80063cc <HAL_TIM_Base_Stop>
    for(j = 0; j < ADC_CHANNEL_COUNT; j++) {
 8002386:	2300      	movs	r3, #0
 8002388:	81bb      	strh	r3, [r7, #12]
 800238a:	e023      	b.n	80023d4 <HAL_ADC_ConvCpltCallback+0x68>
        sumTmp = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
        for(i = 0; i < ADC_SAMPLE_COUNT; i++)
 8002390:	2300      	movs	r3, #0
 8002392:	81fb      	strh	r3, [r7, #14]
 8002394:	e00e      	b.n	80023b4 <HAL_ADC_ConvCpltCallback+0x48>
        {
            sumTmp += adc_buffer_sample[i * ADC_CHANNEL_COUNT + j]; // 0 3 6 9 12
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	89bb      	ldrh	r3, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	4a13      	ldr	r2, [pc, #76]	; (80023ec <HAL_ADC_ConvCpltCallback+0x80>)
 80023a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4413      	add	r3, r2
 80023ac:	60bb      	str	r3, [r7, #8]
        for(i = 0; i < ADC_SAMPLE_COUNT; i++)
 80023ae:	89fb      	ldrh	r3, [r7, #14]
 80023b0:	3301      	adds	r3, #1
 80023b2:	81fb      	strh	r3, [r7, #14]
 80023b4:	89fb      	ldrh	r3, [r7, #14]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d9ed      	bls.n	8002396 <HAL_ADC_ConvCpltCallback+0x2a>
        }
        adc_value[j] = sumTmp / ADC_SAMPLE_COUNT;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <HAL_ADC_ConvCpltCallback+0x84>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	089a      	lsrs	r2, r3, #2
 80023c4:	89bb      	ldrh	r3, [r7, #12]
 80023c6:	b291      	uxth	r1, r2
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_ADC_ConvCpltCallback+0x88>)
 80023ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < ADC_CHANNEL_COUNT; j++) {
 80023ce:	89bb      	ldrh	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	81bb      	strh	r3, [r7, #12]
 80023d4:	89bb      	ldrh	r3, [r7, #12]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d9d8      	bls.n	800238c <HAL_ADC_ConvCpltCallback+0x20>
    }
    adc_start_process();
 80023da:	f000 f80d 	bl	80023f8 <adc_start_process>
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20001f30 	.word	0x20001f30
 80023ec:	2000213c 	.word	0x2000213c
 80023f0:	cccccccd 	.word	0xcccccccd
 80023f4:	20002134 	.word	0x20002134

080023f8 <adc_start_process>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void adc_start_process(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_buffer_sample, ADC_CHANNEL_COUNT * ADC_SAMPLE_COUNT);
 80023fc:	2214      	movs	r2, #20
 80023fe:	4904      	ldr	r1, [pc, #16]	; (8002410 <adc_start_process+0x18>)
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <adc_start_process+0x1c>)
 8002402:	f001 ff3f 	bl	8004284 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&TIMER_TRIGGER);
 8002406:	4804      	ldr	r0, [pc, #16]	; (8002418 <adc_start_process+0x20>)
 8002408:	f003 ff96 	bl	8006338 <HAL_TIM_Base_Start>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000213c 	.word	0x2000213c
 8002414:	200020cc 	.word	0x200020cc
 8002418:	20001f30 	.word	0x20001f30

0800241c <adc_get_sample>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
uint16_t* adc_get_sample(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
    return (uint16_t*)adc_value;
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <adc_get_sample+0x10>)
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20002134 	.word	0x20002134

08002430 <user_timer_start>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void user_timer_start(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <user_timer_start+0x10>)
 8002436:	f003 ffe7 	bl	8006408 <HAL_TIM_Base_Start_IT>
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20001fb0 	.word	0x20001fb0

08002444 <user_uart_init>:
* @author Tuanhd2
* @param void
* @date 09/22/2019
*/
void user_uart_init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
//	if (HAL_UART_Init(&huart2) != HAL_OK)
//	{
//		Error_Handler();
//	}
	/* USER CODE BEGIN USART1_Init 2 */
	user_com_init();
 8002448:	f000 f802 	bl	8002450 <user_com_init>
	// register call back

	/* USER CODE END USART1_Init 2 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}

08002450 <user_com_init>:

static void user_com_init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
	fifo_create(
 8002454:	2301      	movs	r3, #1
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	4905      	ldr	r1, [pc, #20]	; (8002470 <user_com_init+0x20>)
 800245a:	4806      	ldr	r0, [pc, #24]	; (8002474 <user_com_init+0x24>)
 800245c:	f000 fd8e 	bl	8002f7c <fifo_create>
		&com_fifo,
		com_rx_buffer,
		sizeof(com_rx_buffer) / sizeof(uint8_t),
		sizeof(uint8_t));
	/* Infinite loop */
	HAL_UART_Receive_IT(&UART_COM, (uint8_t *)&u8RxByte2, 1);
 8002460:	2201      	movs	r2, #1
 8002462:	4905      	ldr	r1, [pc, #20]	; (8002478 <user_com_init+0x28>)
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <user_com_init+0x2c>)
 8002466:	f004 fc5f 	bl	8006d28 <HAL_UART_Receive_IT>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000208 	.word	0x20000208
 8002474:	20002120 	.word	0x20002120
 8002478:	20000295 	.word	0x20000295
 800247c:	20002048 	.word	0x20002048

08002480 <uart_trasmit>:
{
	HAL_UART_DeInit(&UART_COM);
}

bool uart_trasmit(uint8_t *buffer, uint16_t Size)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_UART_Transmit(&UART_COM, (uint8_t *)buffer, Size, 200);
 800248c:	887a      	ldrh	r2, [r7, #2]
 800248e:	23c8      	movs	r3, #200	; 0xc8
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <uart_trasmit+0x28>)
 8002494:	f004 fbaf 	bl	8006bf6 <HAL_UART_Transmit>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]

	return (status ? HAL_OK : 1, 0);
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20002048 	.word	0x20002048

080024ac <uart_ble_printf>:

int uart_ble_printf(const char *Format, ...)
{
 80024ac:	b40f      	push	{r0, r1, r2, r3}
 80024ae:	b580      	push	{r7, lr}
 80024b0:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80024b4:	af00      	add	r7, sp, #0
	uint8_t buff[512 + 1] = {0};
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	3304      	adds	r3, #4
 80024be:	f240 12fd 	movw	r2, #509	; 0x1fd
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f007 fd09 	bl	8009edc <memset>
	va_list args;
	va_start(args, Format);
 80024ca:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80024ce:	463b      	mov	r3, r7
 80024d0:	601a      	str	r2, [r3, #0]
	uint16_t len = vsprintf((char*)buff, Format, args);
 80024d2:	463b      	mov	r3, r7
 80024d4:	1d38      	adds	r0, r7, #4
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80024dc:	f009 fa62 	bl	800b9a4 <vsiprintf>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
    HAL_UART_Transmit(&UART_COM, (uint8_t *)buff, len, 100);
 80024e6:	f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 80024ea:	1d39      	adds	r1, r7, #4
 80024ec:	2364      	movs	r3, #100	; 0x64
 80024ee:	4806      	ldr	r0, [pc, #24]	; (8002508 <uart_ble_printf+0x5c>)
 80024f0:	f004 fb81 	bl	8006bf6 <HAL_UART_Transmit>
	va_end(args);
	return -1;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80024fe:	46bd      	mov	sp, r7
 8002500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002504:	b004      	add	sp, #16
 8002506:	4770      	bx	lr
 8002508:	20002048 	.word	0x20002048

0800250c <sensor_measure_process>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void sensor_measure_process(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
    batterry_lipo_measure();
 8002510:	f000 f80a 	bl	8002528 <batterry_lipo_measure>
    batterry_charging_measure();
 8002514:	f000 f83a 	bl	800258c <batterry_charging_measure>
    pressure_sender_measure();
 8002518:	f000 f86a 	bl	80025f0 <pressure_sender_measure>
    // read rpm ad knock sensor
	rpm_sensor_process();
 800251c:	f000 fb9e 	bl	8002c5c <rpm_sensor_process>
	knock_sensor_process();
 8002520:	f000 fa6e 	bl	8002a00 <knock_sensor_process>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <batterry_lipo_measure>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void batterry_lipo_measure(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
    uint16_t volt_lipo_adc_raw = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	80fb      	strh	r3, [r7, #6]
    volt_lipo_adc_raw = adc_get_sample()[E_VBAT_LIPO];
 8002532:	f7ff ff73 	bl	800241c <adc_get_sample>
 8002536:	4603      	mov	r3, r0
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	80fb      	strh	r3, [r7, #6]
    sensor_read.fVbat_lipo =	(uint16_t)(((volt_lipo_adc_raw * kADC_SENSOR_SCALE) * (kVBAT_R_BAT_CONST_02 + kVBAT_R_BAT_CONST_01)) / kVBAT_R_BAT_CONST_02);
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fbe4 	bl	8000d0c <__aeabi_i2f>
 8002544:	4603      	mov	r3, r0
 8002546:	490d      	ldr	r1, [pc, #52]	; (800257c <batterry_lipo_measure+0x54>)
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fc33 	bl	8000db4 <__aeabi_fmul>
 800254e:	4603      	mov	r3, r0
 8002550:	490b      	ldr	r1, [pc, #44]	; (8002580 <batterry_lipo_measure+0x58>)
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fc2e 	bl	8000db4 <__aeabi_fmul>
 8002558:	4603      	mov	r3, r0
 800255a:	490a      	ldr	r1, [pc, #40]	; (8002584 <batterry_lipo_measure+0x5c>)
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fcdd 	bl	8000f1c <__aeabi_fdiv>
 8002562:	4603      	mov	r3, r0
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fe11 	bl	800118c <__aeabi_f2uiz>
 800256a:	4603      	mov	r3, r0
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <batterry_lipo_measure+0x60>)
 8002570:	801a      	strh	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	3f4e4ce5 	.word	0x3f4e4ce5
 8002580:	43b58000 	.word	0x43b58000
 8002584:	423c0000 	.word	0x423c0000
 8002588:	20001ec0 	.word	0x20001ec0

0800258c <batterry_charging_measure>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void batterry_charging_measure(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
    uint16_t volt_charging_adc_raw = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	80fb      	strh	r3, [r7, #6]
    volt_charging_adc_raw = adc_get_sample()[E_VBAT_CHARGING];
 8002596:	f7ff ff41 	bl	800241c <adc_get_sample>
 800259a:	4603      	mov	r3, r0
 800259c:	885b      	ldrh	r3, [r3, #2]
 800259e:	80fb      	strh	r3, [r7, #6]
    sensor_read.fVbat_charging = (uint16_t)(((volt_charging_adc_raw * kADC_SENSOR_SCALE) *(kVBAT_R_BAT_CHG_CONST_02 + kVBAT_R_BAT_CHG_CONST_01)) / kVBAT_R_BAT_CHG_CONST_02);
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fbb2 	bl	8000d0c <__aeabi_i2f>
 80025a8:	4603      	mov	r3, r0
 80025aa:	490d      	ldr	r1, [pc, #52]	; (80025e0 <batterry_charging_measure+0x54>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fc01 	bl	8000db4 <__aeabi_fmul>
 80025b2:	4603      	mov	r3, r0
 80025b4:	490b      	ldr	r1, [pc, #44]	; (80025e4 <batterry_charging_measure+0x58>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fbfc 	bl	8000db4 <__aeabi_fmul>
 80025bc:	4603      	mov	r3, r0
 80025be:	490a      	ldr	r1, [pc, #40]	; (80025e8 <batterry_charging_measure+0x5c>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fcab 	bl	8000f1c <__aeabi_fdiv>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fddf 	bl	800118c <__aeabi_f2uiz>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <batterry_charging_measure+0x60>)
 80025d4:	805a      	strh	r2, [r3, #2]
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	3f4e4ce5 	.word	0x3f4e4ce5
 80025e4:	42dc0000 	.word	0x42dc0000
 80025e8:	41200000 	.word	0x41200000
 80025ec:	20001ec0 	.word	0x20001ec0

080025f0 <pressure_sender_measure>:
* Return Value : none
***********************************************************************************************************************/
float volt_pressure_out = 0.0;
float resistance = 0.0;
static void pressure_sender_measure(void)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
    uint16_t volt_pressure_adc_raw = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	80fb      	strh	r3, [r7, #6]
    volt_pressure_adc_raw = adc_get_sample()[E_PRESSURE_SENDER];
 80025fa:	f7ff ff0f 	bl	800241c <adc_get_sample>
 80025fe:	4603      	mov	r3, r0
 8002600:	889b      	ldrh	r3, [r3, #4]
 8002602:	80fb      	strh	r3, [r7, #6]
    volt_pressure_out = volt_pressure_adc_raw * kADC_SENSOR_SCALE / 1000;
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fb80 	bl	8000d0c <__aeabi_i2f>
 800260c:	4603      	mov	r3, r0
 800260e:	4926      	ldr	r1, [pc, #152]	; (80026a8 <pressure_sender_measure+0xb8>)
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fbcf 	bl	8000db4 <__aeabi_fmul>
 8002616:	4603      	mov	r3, r0
 8002618:	4924      	ldr	r1, [pc, #144]	; (80026ac <pressure_sender_measure+0xbc>)
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fc7e 	bl	8000f1c <__aeabi_fdiv>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <pressure_sender_measure+0xc0>)
 8002626:	601a      	str	r2, [r3, #0]
    resistance = ((volt_pressure_out) * 2400) / (11*3.3 - volt_pressure_out);
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <pressure_sender_measure+0xc0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4921      	ldr	r1, [pc, #132]	; (80026b4 <pressure_sender_measure+0xc4>)
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fbc0 	bl	8000db4 <__aeabi_fmul>
 8002634:	4603      	mov	r3, r0
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff0e 	bl	8000458 <__aeabi_f2d>
 800263c:	4604      	mov	r4, r0
 800263e:	460d      	mov	r5, r1
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <pressure_sender_measure+0xc0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff07 	bl	8000458 <__aeabi_f2d>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	a114      	add	r1, pc, #80	; (adr r1, 80026a0 <pressure_sender_measure+0xb0>)
 8002650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002654:	f7fd fda0 	bl	8000198 <__aeabi_dsub>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4620      	mov	r0, r4
 800265e:	4629      	mov	r1, r5
 8002660:	f7fe f87c 	bl	800075c <__aeabi_ddiv>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f7fe fa44 	bl	8000af8 <__aeabi_d2f>
 8002670:	4603      	mov	r3, r0
 8002672:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <pressure_sender_measure+0xc8>)
 8002674:	6013      	str	r3, [r2, #0]

    sensor_read.fPressure_sender_percent = oild_pressuare_table(resistance * 10); // xem lai
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <pressure_sender_measure+0xc8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4910      	ldr	r1, [pc, #64]	; (80026bc <pressure_sender_measure+0xcc>)
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fb99 	bl	8000db4 <__aeabi_fmul>
 8002682:	4603      	mov	r3, r0
 8002684:	4618      	mov	r0, r3
 8002686:	f000 f81d 	bl	80026c4 <oild_pressuare_table>
 800268a:	4603      	mov	r3, r0
 800268c:	b29a      	uxth	r2, r3
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <pressure_sender_measure+0xd0>)
 8002690:	809a      	strh	r2, [r3, #4]
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bdb0      	pop	{r4, r5, r7, pc}
 800269a:	bf00      	nop
 800269c:	f3af 8000 	nop.w
 80026a0:	66666666 	.word	0x66666666
 80026a4:	40422666 	.word	0x40422666
 80026a8:	3f4e4ce5 	.word	0x3f4e4ce5
 80026ac:	447a0000 	.word	0x447a0000
 80026b0:	20000298 	.word	0x20000298
 80026b4:	45160000 	.word	0x45160000
 80026b8:	2000029c 	.word	0x2000029c
 80026bc:	41200000 	.word	0x41200000
 80026c0:	20001ec0 	.word	0x20001ec0

080026c4 <oild_pressuare_table>:
//	{184	,9},
//};


int32_t oild_pressuare_table(float resistance) // factor 10
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	6078      	str	r0, [r7, #4]
	int32_t value_compute = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
	if( resistance < 100)
 80026d0:	4989      	ldr	r1, [pc, #548]	; (80028f8 <oild_pressuare_table+0x234>)
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fd0c 	bl	80010f0 <__aeabi_fcmplt>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <oild_pressuare_table+0x20>
		value_compute = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e103      	b.n	80028ec <oild_pressuare_table+0x228>
	else if( (100 <= resistance) && (resistance < 310))
 80026e4:	4984      	ldr	r1, [pc, #528]	; (80028f8 <oild_pressuare_table+0x234>)
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe fd16 	bl	8001118 <__aeabi_fcmpge>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d013      	beq.n	800271a <oild_pressuare_table+0x56>
 80026f2:	4982      	ldr	r1, [pc, #520]	; (80028fc <oild_pressuare_table+0x238>)
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fe fcfb 	bl	80010f0 <__aeabi_fcmplt>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00c      	beq.n	800271a <oild_pressuare_table+0x56>
	{
		value_compute = vsm_rise_compute((int32_t)resistance, 100, 0, 310, 10);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7fe fd1d 	bl	8001140 <__aeabi_f2iz>
 8002706:	230a      	movs	r3, #10
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800270e:	2200      	movs	r2, #0
 8002710:	2164      	movs	r1, #100	; 0x64
 8002712:	f001 fbb1 	bl	8003e78 <vsm_rise_compute>
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	e0e8      	b.n	80028ec <oild_pressuare_table+0x228>
	}
	else if( (310 <= resistance) && (resistance < 520))
 800271a:	4978      	ldr	r1, [pc, #480]	; (80028fc <oild_pressuare_table+0x238>)
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7fe fcfb 	bl	8001118 <__aeabi_fcmpge>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d014      	beq.n	8002752 <oild_pressuare_table+0x8e>
 8002728:	4975      	ldr	r1, [pc, #468]	; (8002900 <oild_pressuare_table+0x23c>)
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fce0 	bl	80010f0 <__aeabi_fcmplt>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00d      	beq.n	8002752 <oild_pressuare_table+0x8e>
	{
		value_compute = vsm_rise_compute((int32_t)resistance, 310, 10, 520, 20);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fd02 	bl	8001140 <__aeabi_f2iz>
 800273c:	2314      	movs	r3, #20
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002744:	220a      	movs	r2, #10
 8002746:	f44f 719b 	mov.w	r1, #310	; 0x136
 800274a:	f001 fb95 	bl	8003e78 <vsm_rise_compute>
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	e0cc      	b.n	80028ec <oild_pressuare_table+0x228>
	}
	else if( (520 <= resistance) && (resistance < 710))
 8002752:	496b      	ldr	r1, [pc, #428]	; (8002900 <oild_pressuare_table+0x23c>)
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fe fcdf 	bl	8001118 <__aeabi_fcmpge>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d014      	beq.n	800278a <oild_pressuare_table+0xc6>
 8002760:	4968      	ldr	r1, [pc, #416]	; (8002904 <oild_pressuare_table+0x240>)
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fcc4 	bl	80010f0 <__aeabi_fcmplt>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <oild_pressuare_table+0xc6>
	{
		value_compute = vsm_rise_compute((int32_t)resistance, 520, 20, 710, 30);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fce6 	bl	8001140 <__aeabi_f2iz>
 8002774:	231e      	movs	r3, #30
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	f240 23c6 	movw	r3, #710	; 0x2c6
 800277c:	2214      	movs	r2, #20
 800277e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002782:	f001 fb79 	bl	8003e78 <vsm_rise_compute>
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	e0b0      	b.n	80028ec <oild_pressuare_table+0x228>
	}
	else if( (710 <= resistance) && (resistance < 880))
 800278a:	495e      	ldr	r1, [pc, #376]	; (8002904 <oild_pressuare_table+0x240>)
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fe fcc3 	bl	8001118 <__aeabi_fcmpge>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d014      	beq.n	80027c2 <oild_pressuare_table+0xfe>
 8002798:	495b      	ldr	r1, [pc, #364]	; (8002908 <oild_pressuare_table+0x244>)
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fca8 	bl	80010f0 <__aeabi_fcmplt>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00d      	beq.n	80027c2 <oild_pressuare_table+0xfe>
	{
		value_compute = vsm_rise_compute((int32_t)resistance, 710, 30, 880, 40);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fcca 	bl	8001140 <__aeabi_f2iz>
 80027ac:	2328      	movs	r3, #40	; 0x28
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f44f 735c 	mov.w	r3, #880	; 0x370
 80027b4:	221e      	movs	r2, #30
 80027b6:	f240 21c6 	movw	r1, #710	; 0x2c6
 80027ba:	f001 fb5d 	bl	8003e78 <vsm_rise_compute>
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	e094      	b.n	80028ec <oild_pressuare_table+0x228>
	}
	else if( (880 <= resistance) && (resistance < 1060))
 80027c2:	4951      	ldr	r1, [pc, #324]	; (8002908 <oild_pressuare_table+0x244>)
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7fe fca7 	bl	8001118 <__aeabi_fcmpge>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d014      	beq.n	80027fa <oild_pressuare_table+0x136>
 80027d0:	494e      	ldr	r1, [pc, #312]	; (800290c <oild_pressuare_table+0x248>)
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe fc8c 	bl	80010f0 <__aeabi_fcmplt>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <oild_pressuare_table+0x136>
	{
		value_compute = vsm_rise_compute((int32_t)resistance, 880, 40, 1060, 50);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fcae 	bl	8001140 <__aeabi_f2iz>
 80027e4:	2332      	movs	r3, #50	; 0x32
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f240 4324 	movw	r3, #1060	; 0x424
 80027ec:	2228      	movs	r2, #40	; 0x28
 80027ee:	f44f 715c 	mov.w	r1, #880	; 0x370
 80027f2:	f001 fb41 	bl	8003e78 <vsm_rise_compute>
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	e078      	b.n	80028ec <oild_pressuare_table+0x228>
	}
	else if( (1060 <= resistance) && (resistance < 1240))
 80027fa:	4944      	ldr	r1, [pc, #272]	; (800290c <oild_pressuare_table+0x248>)
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7fe fc8b 	bl	8001118 <__aeabi_fcmpge>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d014      	beq.n	8002832 <oild_pressuare_table+0x16e>
 8002808:	4941      	ldr	r1, [pc, #260]	; (8002910 <oild_pressuare_table+0x24c>)
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fc70 	bl	80010f0 <__aeabi_fcmplt>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <oild_pressuare_table+0x16e>
	{
		value_compute = vsm_rise_compute((int32_t)resistance, 1060, 50, 1240, 60);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fc92 	bl	8001140 <__aeabi_f2iz>
 800281c:	233c      	movs	r3, #60	; 0x3c
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8002824:	2232      	movs	r2, #50	; 0x32
 8002826:	f240 4124 	movw	r1, #1060	; 0x424
 800282a:	f001 fb25 	bl	8003e78 <vsm_rise_compute>
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	e05c      	b.n	80028ec <oild_pressuare_table+0x228>
	}
	else if( (1240 <= resistance) && (resistance < 1550))
 8002832:	4937      	ldr	r1, [pc, #220]	; (8002910 <oild_pressuare_table+0x24c>)
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fe fc6f 	bl	8001118 <__aeabi_fcmpge>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d014      	beq.n	800286a <oild_pressuare_table+0x1a6>
 8002840:	4934      	ldr	r1, [pc, #208]	; (8002914 <oild_pressuare_table+0x250>)
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fc54 	bl	80010f0 <__aeabi_fcmplt>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <oild_pressuare_table+0x1a6>
	{
		value_compute = vsm_rise_compute((int32_t)resistance, 1240, 60, 1550, 70);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fc76 	bl	8001140 <__aeabi_f2iz>
 8002854:	2346      	movs	r3, #70	; 0x46
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	f240 630e 	movw	r3, #1550	; 0x60e
 800285c:	223c      	movs	r2, #60	; 0x3c
 800285e:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8002862:	f001 fb09 	bl	8003e78 <vsm_rise_compute>
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	e040      	b.n	80028ec <oild_pressuare_table+0x228>
	}
	else if( (1550 <= resistance) && (resistance < 1700))
 800286a:	492a      	ldr	r1, [pc, #168]	; (8002914 <oild_pressuare_table+0x250>)
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7fe fc53 	bl	8001118 <__aeabi_fcmpge>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <oild_pressuare_table+0x1de>
 8002878:	4927      	ldr	r1, [pc, #156]	; (8002918 <oild_pressuare_table+0x254>)
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fc38 	bl	80010f0 <__aeabi_fcmplt>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <oild_pressuare_table+0x1de>
	{
		value_compute = vsm_rise_compute((int32_t)resistance, 1550, 70, 1700, 80);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fc5a 	bl	8001140 <__aeabi_f2iz>
 800288c:	2350      	movs	r3, #80	; 0x50
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8002894:	2246      	movs	r2, #70	; 0x46
 8002896:	f240 610e 	movw	r1, #1550	; 0x60e
 800289a:	f001 faed 	bl	8003e78 <vsm_rise_compute>
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	e024      	b.n	80028ec <oild_pressuare_table+0x228>
	}
	else if( (1700 <= resistance) && (resistance < 1840))
 80028a2:	491d      	ldr	r1, [pc, #116]	; (8002918 <oild_pressuare_table+0x254>)
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7fe fc37 	bl	8001118 <__aeabi_fcmpge>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d014      	beq.n	80028da <oild_pressuare_table+0x216>
 80028b0:	491a      	ldr	r1, [pc, #104]	; (800291c <oild_pressuare_table+0x258>)
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fc1c 	bl	80010f0 <__aeabi_fcmplt>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00d      	beq.n	80028da <oild_pressuare_table+0x216>
	{
		value_compute = vsm_rise_compute((int32_t)resistance, 1700, 80, 1840, 90);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fc3e 	bl	8001140 <__aeabi_f2iz>
 80028c4:	235a      	movs	r3, #90	; 0x5a
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 80028cc:	2250      	movs	r2, #80	; 0x50
 80028ce:	f240 61a4 	movw	r1, #1700	; 0x6a4
 80028d2:	f001 fad1 	bl	8003e78 <vsm_rise_compute>
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	e008      	b.n	80028ec <oild_pressuare_table+0x228>
	}
	else if( (1840 >= resistance))
 80028da:	4910      	ldr	r1, [pc, #64]	; (800291c <oild_pressuare_table+0x258>)
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7fe fc11 	bl	8001104 <__aeabi_fcmple>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <oild_pressuare_table+0x228>
	{
		value_compute = 100;
 80028e8:	2364      	movs	r3, #100	; 0x64
 80028ea:	60fb      	str	r3, [r7, #12]
	}
	return value_compute;
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	42c80000 	.word	0x42c80000
 80028fc:	439b0000 	.word	0x439b0000
 8002900:	44020000 	.word	0x44020000
 8002904:	44318000 	.word	0x44318000
 8002908:	445c0000 	.word	0x445c0000
 800290c:	44848000 	.word	0x44848000
 8002910:	449b0000 	.word	0x449b0000
 8002914:	44c1c000 	.word	0x44c1c000
 8002918:	44d48000 	.word	0x44d48000
 800291c:	44e60000 	.word	0x44e60000

08002920 <knock_sensor_init>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
bool knock_sensor_init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
    bool status = false;
 8002926:	2300      	movs	r3, #0
 8002928:	71fb      	strb	r3, [r7, #7]
    // init user spi
    status = user_spi_init();
 800292a:	f000 f95b 	bl	8002be4 <user_spi_init>
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
    osDelay(10);
 8002932:	200a      	movs	r0, #10
 8002934:	f004 febc 	bl	80076b0 <osDelay>
    //Configure SPU.
    APP_LOGD("Configuring SPU: 0x%x", COM_SPI(kSPU_SET_PRESCALAR_6MHz));
 8002938:	2339      	movs	r3, #57	; 0x39
 800293a:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <knock_sensor_init+0xc4>)
 800293c:	492a      	ldr	r1, [pc, #168]	; (80029e8 <knock_sensor_init+0xc8>)
 800293e:	482b      	ldr	r0, [pc, #172]	; (80029ec <knock_sensor_init+0xcc>)
 8002940:	f000 fc48 	bl	80031d4 <uart_debug_printf>
 8002944:	2044      	movs	r0, #68	; 0x44
 8002946:	f000 f913 	bl	8002b70 <COM_SPI>
 800294a:	4603      	mov	r3, r0
 800294c:	4619      	mov	r1, r3
 800294e:	4828      	ldr	r0, [pc, #160]	; (80029f0 <knock_sensor_init+0xd0>)
 8002950:	f000 fc40 	bl	80031d4 <uart_debug_printf>
 8002954:	4827      	ldr	r0, [pc, #156]	; (80029f4 <knock_sensor_init+0xd4>)
 8002956:	f000 fc3d 	bl	80031d4 <uart_debug_printf>
    APP_LOGD(", 0x%x", COM_SPI(kSPU_SET_BAND_PASS_FREQUENCY));
 800295a:	233a      	movs	r3, #58	; 0x3a
 800295c:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <knock_sensor_init+0xc4>)
 800295e:	4922      	ldr	r1, [pc, #136]	; (80029e8 <knock_sensor_init+0xc8>)
 8002960:	4822      	ldr	r0, [pc, #136]	; (80029ec <knock_sensor_init+0xcc>)
 8002962:	f000 fc37 	bl	80031d4 <uart_debug_printf>
 8002966:	202a      	movs	r0, #42	; 0x2a
 8002968:	f000 f902 	bl	8002b70 <COM_SPI>
 800296c:	4603      	mov	r3, r0
 800296e:	4619      	mov	r1, r3
 8002970:	4821      	ldr	r0, [pc, #132]	; (80029f8 <knock_sensor_init+0xd8>)
 8002972:	f000 fc2f 	bl	80031d4 <uart_debug_printf>
 8002976:	481f      	ldr	r0, [pc, #124]	; (80029f4 <knock_sensor_init+0xd4>)
 8002978:	f000 fc2c 	bl	80031d4 <uart_debug_printf>
    APP_LOGD(", 0x%x", COM_SPI(kSPU_SET_PROGRAMMABLE_GAIN));
 800297c:	233b      	movs	r3, #59	; 0x3b
 800297e:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <knock_sensor_init+0xc4>)
 8002980:	4919      	ldr	r1, [pc, #100]	; (80029e8 <knock_sensor_init+0xc8>)
 8002982:	481a      	ldr	r0, [pc, #104]	; (80029ec <knock_sensor_init+0xcc>)
 8002984:	f000 fc26 	bl	80031d4 <uart_debug_printf>
 8002988:	20a2      	movs	r0, #162	; 0xa2
 800298a:	f000 f8f1 	bl	8002b70 <COM_SPI>
 800298e:	4603      	mov	r3, r0
 8002990:	4619      	mov	r1, r3
 8002992:	4819      	ldr	r0, [pc, #100]	; (80029f8 <knock_sensor_init+0xd8>)
 8002994:	f000 fc1e 	bl	80031d4 <uart_debug_printf>
 8002998:	4816      	ldr	r0, [pc, #88]	; (80029f4 <knock_sensor_init+0xd4>)
 800299a:	f000 fc1b 	bl	80031d4 <uart_debug_printf>
    APP_LOGD(", 0x%x", COM_SPI(kSPU_SET_INTEGRATOR_TIME));
 800299e:	233c      	movs	r3, #60	; 0x3c
 80029a0:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <knock_sensor_init+0xc4>)
 80029a2:	4911      	ldr	r1, [pc, #68]	; (80029e8 <knock_sensor_init+0xc8>)
 80029a4:	4811      	ldr	r0, [pc, #68]	; (80029ec <knock_sensor_init+0xcc>)
 80029a6:	f000 fc15 	bl	80031d4 <uart_debug_printf>
 80029aa:	20ca      	movs	r0, #202	; 0xca
 80029ac:	f000 f8e0 	bl	8002b70 <COM_SPI>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4619      	mov	r1, r3
 80029b4:	4810      	ldr	r0, [pc, #64]	; (80029f8 <knock_sensor_init+0xd8>)
 80029b6:	f000 fc0d 	bl	80031d4 <uart_debug_printf>
 80029ba:	480e      	ldr	r0, [pc, #56]	; (80029f4 <knock_sensor_init+0xd4>)
 80029bc:	f000 fc0a 	bl	80031d4 <uart_debug_printf>
    APP_LOGD("\n\r");
 80029c0:	233d      	movs	r3, #61	; 0x3d
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <knock_sensor_init+0xc4>)
 80029c4:	4908      	ldr	r1, [pc, #32]	; (80029e8 <knock_sensor_init+0xc8>)
 80029c6:	4809      	ldr	r0, [pc, #36]	; (80029ec <knock_sensor_init+0xcc>)
 80029c8:	f000 fc04 	bl	80031d4 <uart_debug_printf>
 80029cc:	480b      	ldr	r0, [pc, #44]	; (80029fc <knock_sensor_init+0xdc>)
 80029ce:	f000 fc01 	bl	80031d4 <uart_debug_printf>
 80029d2:	4808      	ldr	r0, [pc, #32]	; (80029f4 <knock_sensor_init+0xd4>)
 80029d4:	f000 fbfe 	bl	80031d4 <uart_debug_printf>
    return status;
 80029d8:	79fb      	ldrb	r3, [r7, #7]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	0800eb48 	.word	0x0800eb48
 80029e8:	0800e808 	.word	0x0800e808
 80029ec:	0800e80c 	.word	0x0800e80c
 80029f0:	0800e81c 	.word	0x0800e81c
 80029f4:	0800e834 	.word	0x0800e834
 80029f8:	0800e838 	.word	0x0800e838
 80029fc:	0800e840 	.word	0x0800e840

08002a00 <knock_sensor_process>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void knock_sensor_process(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
    switch (knock_sensor_state)
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <knock_sensor_process+0x8c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d024      	beq.n	8002a56 <knock_sensor_process+0x56>
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	dc35      	bgt.n	8002a7c <knock_sensor_process+0x7c>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <knock_sensor_process+0x1a>
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d00b      	beq.n	8002a30 <knock_sensor_process+0x30>
//            APP_LOGD("send message to device");
        }
    }
    break;
    default:
        break;
 8002a18:	e030      	b.n	8002a7c <knock_sensor_process+0x7c>
        knock_sensor_state = 1;
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <knock_sensor_process+0x8c>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
        knock_sensor_tick_count = timer_get_tick(); // tick for 1ms
 8002a20:	f7ff faea 	bl	8001ff8 <timer_get_tick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <knock_sensor_process+0x90>)
 8002a28:	6013      	str	r3, [r2, #0]
        sensor_knock_set_channel_1();
 8002a2a:	f000 f833 	bl	8002a94 <sensor_knock_set_channel_1>
        break;
 8002a2e:	e02a      	b.n	8002a86 <knock_sensor_process+0x86>
        if (timer_get_tick() - knock_sensor_tick_count > 3)
 8002a30:	f7ff fae2 	bl	8001ff8 <timer_get_tick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <knock_sensor_process+0x90>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d91f      	bls.n	8002a80 <knock_sensor_process+0x80>
            knock_sensor_state = 0;
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <knock_sensor_process+0x8c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
            knock_sensor_tick_count = timer_get_tick();
 8002a46:	f7ff fad7 	bl	8001ff8 <timer_get_tick>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <knock_sensor_process+0x90>)
 8002a4e:	6013      	str	r3, [r2, #0]
            sensor_knock_read_channel_1();
 8002a50:	f000 f82a 	bl	8002aa8 <sensor_knock_read_channel_1>
    break;
 8002a54:	e014      	b.n	8002a80 <knock_sensor_process+0x80>
        if (timer_get_tick() - knock_sensor_tick_count > 3)
 8002a56:	f7ff facf 	bl	8001ff8 <timer_get_tick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <knock_sensor_process+0x90>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d90e      	bls.n	8002a84 <knock_sensor_process+0x84>
            knock_sensor_state = 0;
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <knock_sensor_process+0x8c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
            knock_sensor_tick_count = timer_get_tick();
 8002a6c:	f7ff fac4 	bl	8001ff8 <timer_get_tick>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <knock_sensor_process+0x90>)
 8002a74:	6013      	str	r3, [r2, #0]
            sensor_knock_read_channel_2();
 8002a76:	f000 f84f 	bl	8002b18 <sensor_knock_read_channel_2>
    break;
 8002a7a:	e003      	b.n	8002a84 <knock_sensor_process+0x84>
        break;
 8002a7c:	bf00      	nop
 8002a7e:	e002      	b.n	8002a86 <knock_sensor_process+0x86>
    break;
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <knock_sensor_process+0x86>
    break;
 8002a84:	bf00      	nop
    }
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200002a4 	.word	0x200002a4
 8002a90:	200002a0 	.word	0x200002a0

08002a94 <sensor_knock_set_channel_1>:

/***********************************************************************************************************************
* Static Functions
***********************************************************************************************************************/
static void sensor_knock_set_channel_1(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
    //Set channel 1.
    COM_SPI(kSPU_SET_CHANNEL_1);
 8002a98:	20e0      	movs	r0, #224	; 0xe0
 8002a9a:	f000 f869 	bl	8002b70 <COM_SPI>

    //The measurement window starts by driving digital pin 4 high.
    knock_sensor_hold_pin(kHIGH);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f000 f8a8 	bl	8002bf4 <knock_sensor_hold_pin>

    //The SPU performs the integration process and increases the output voltage based on the signal processing result.
//    osDelay(kMEASUREMENT_WINDOW_TIME / 1000);
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <sensor_knock_read_channel_1>:

static void sensor_knock_read_channel_1(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
    //The measurement window ends by driving digital pin 4 low. The SPU stops the integration process and the output voltage is frozen until the window starts again.
    knock_sensor_hold_pin(kLOW);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f000 f8a0 	bl	8002bf4 <knock_sensor_hold_pin>

    //The SPU output voltage is read by the Arduino ADC on analogue input pin 0.
    uint16_t adcChannel1 = adc_get_sample()[E_KNOCK_SENSOR];
 8002ab4:	f7ff fcb2 	bl	800241c <adc_get_sample>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	88db      	ldrh	r3, [r3, #6]
 8002abc:	80fb      	strh	r3, [r7, #6]
    float knockChannel1 = ((float)adcChannel1 / 4095) * 100 * 2 / 3;
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe f91f 	bl	8000d04 <__aeabi_ui2f>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	490f      	ldr	r1, [pc, #60]	; (8002b08 <sensor_knock_read_channel_1+0x60>)
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fa26 	bl	8000f1c <__aeabi_fdiv>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	490e      	ldr	r1, [pc, #56]	; (8002b0c <sensor_knock_read_channel_1+0x64>)
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe f96d 	bl	8000db4 <__aeabi_fmul>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe f860 	bl	8000ba4 <__addsf3>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	490a      	ldr	r1, [pc, #40]	; (8002b10 <sensor_knock_read_channel_1+0x68>)
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fa17 	bl	8000f1c <__aeabi_fdiv>
 8002aee:	4603      	mov	r3, r0
 8002af0:	603b      	str	r3, [r7, #0]
    sensor_read.knock_sensor_channel_1 = (uint16_t)knockChannel1;
 8002af2:	6838      	ldr	r0, [r7, #0]
 8002af4:	f7fe fb4a 	bl	800118c <__aeabi_f2uiz>
 8002af8:	4603      	mov	r3, r0
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <sensor_knock_read_channel_1+0x6c>)
 8002afe:	819a      	strh	r2, [r3, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	457ff000 	.word	0x457ff000
 8002b0c:	42c80000 	.word	0x42c80000
 8002b10:	40400000 	.word	0x40400000
 8002b14:	20001ec0 	.word	0x20001ec0

08002b18 <sensor_knock_read_channel_2>:
    //The SPU performs the integration process and increases the output voltage based on the signal processing result.
    // delayMicroseconds(MEASUREMENT_WINDOW_TIME);
}

static void sensor_knock_read_channel_2(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
    //The measurement window ends by driving digital pin 4 low. The SPU stops the integration process and the output voltage is frozen until the window starts again.
    knock_sensor_hold_pin(kLOW);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f000 f868 	bl	8002bf4 <knock_sensor_hold_pin>

    //The SPU output voltage is read by the Arduino ADC on analogue input pin 0.
    uint16_t adcChannel2 = adc_get_sample()[E_KNOCK_SENSOR];
 8002b24:	f7ff fc7a 	bl	800241c <adc_get_sample>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	88db      	ldrh	r3, [r3, #6]
 8002b2c:	80fb      	strh	r3, [r7, #6]

    //Convert ADC-values to percentages.
    float knockChannel2 = ((float)adcChannel2 / 4095) * 100;
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f8e7 	bl	8000d04 <__aeabi_ui2f>
 8002b36:	4603      	mov	r3, r0
 8002b38:	490a      	ldr	r1, [pc, #40]	; (8002b64 <sensor_knock_read_channel_2+0x4c>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe f9ee 	bl	8000f1c <__aeabi_fdiv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4909      	ldr	r1, [pc, #36]	; (8002b68 <sensor_knock_read_channel_2+0x50>)
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe f935 	bl	8000db4 <__aeabi_fmul>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	603b      	str	r3, [r7, #0]
    sensor_read.knock_sensor_channel_2 = knockChannel2;
 8002b4e:	6838      	ldr	r0, [r7, #0]
 8002b50:	f7fe fb1c 	bl	800118c <__aeabi_f2uiz>
 8002b54:	4603      	mov	r3, r0
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <sensor_knock_read_channel_2+0x54>)
 8002b5a:	81da      	strh	r2, [r3, #14]
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	457ff000 	.word	0x457ff000
 8002b68:	42c80000 	.word	0x42c80000
 8002b6c:	20001ec0 	.word	0x20001ec0

08002b70 <COM_SPI>:
//Function for transfering SPI data to the SPU.
static uint8_t COM_SPI(uint8_t TX_data)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
    uint8_t Response = 0x00;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef ret = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
    //Configure SPI for knock controller.
    // SPI.setDataMode(SPI_MODE1);
    // SPI.setClockDivider(kSPI_CLOCK_DIV16);

    //Set chip select pin low, chip in use.
    user_spi_cs_clear();
 8002b82:	f000 f85f 	bl	8002c44 <user_spi_cs_clear>

    //Transmit request.
    // uint8_t Response =  SPI.transfer(TX_data);
    ret = HAL_SPI_TransmitReceive(&hspi2, &TX_data, &Response, 1, 100);
 8002b86:	f107 020e 	add.w	r2, r7, #14
 8002b8a:	1df9      	adds	r1, r7, #7
 8002b8c:	2364      	movs	r3, #100	; 0x64
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2301      	movs	r3, #1
 8002b92:	480e      	ldr	r0, [pc, #56]	; (8002bcc <COM_SPI+0x5c>)
 8002b94:	f003 f924 	bl	8005de0 <HAL_SPI_TransmitReceive>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <COM_SPI+0x4e>
    {
    	APP_LOGD("ret = %d", ret);
 8002ba2:	23b3      	movs	r3, #179	; 0xb3
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <COM_SPI+0x60>)
 8002ba6:	490b      	ldr	r1, [pc, #44]	; (8002bd4 <COM_SPI+0x64>)
 8002ba8:	480b      	ldr	r0, [pc, #44]	; (8002bd8 <COM_SPI+0x68>)
 8002baa:	f000 fb13 	bl	80031d4 <uart_debug_printf>
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	480a      	ldr	r0, [pc, #40]	; (8002bdc <COM_SPI+0x6c>)
 8002bb4:	f000 fb0e 	bl	80031d4 <uart_debug_printf>
 8002bb8:	4809      	ldr	r0, [pc, #36]	; (8002be0 <COM_SPI+0x70>)
 8002bba:	f000 fb0b 	bl	80031d4 <uart_debug_printf>
    }
    //Set chip select pin high, chip not in use.
    user_spi_cs_set();
 8002bbe:	f000 f835 	bl	8002c2c <user_spi_cs_set>

    return Response;
 8002bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20001ed8 	.word	0x20001ed8
 8002bd0:	0800eb5c 	.word	0x0800eb5c
 8002bd4:	0800e808 	.word	0x0800e808
 8002bd8:	0800e80c 	.word	0x0800e80c
 8002bdc:	0800e844 	.word	0x0800e844
 8002be0:	0800e834 	.word	0x0800e834

08002be4 <user_spi_init>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static bool user_spi_init(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
    return true;
 8002be8:	2301      	movs	r3, #1
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
	...

08002bf4 <knock_sensor_hold_pin>:
***********************************************************************************************************************/
//static uint8_t user_spi_send(uint8_t data)
//{
//}
static void knock_sensor_hold_pin( uint8_t status)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
	if( status == kHIGH)
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <knock_sensor_hold_pin+0x1c>
		HAL_GPIO_WritePin(KNOCK_HOLD_GPIO_Port, KNOCK_HOLD_Pin, GPIO_PIN_SET);
 8002c04:	2201      	movs	r2, #1
 8002c06:	2104      	movs	r1, #4
 8002c08:	4807      	ldr	r0, [pc, #28]	; (8002c28 <knock_sensor_hold_pin+0x34>)
 8002c0a:	f002 fa7a 	bl	8005102 <HAL_GPIO_WritePin>
	else if( status == kLOW)
		HAL_GPIO_WritePin(KNOCK_HOLD_GPIO_Port, KNOCK_HOLD_Pin, GPIO_PIN_RESET);
}
 8002c0e:	e007      	b.n	8002c20 <knock_sensor_hold_pin+0x2c>
	else if( status == kLOW)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d104      	bne.n	8002c20 <knock_sensor_hold_pin+0x2c>
		HAL_GPIO_WritePin(KNOCK_HOLD_GPIO_Port, KNOCK_HOLD_Pin, GPIO_PIN_RESET);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2104      	movs	r1, #4
 8002c1a:	4803      	ldr	r0, [pc, #12]	; (8002c28 <knock_sensor_hold_pin+0x34>)
 8002c1c:	f002 fa71 	bl	8005102 <HAL_GPIO_WritePin>
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40020400 	.word	0x40020400

08002c2c <user_spi_cs_set>:
//* Description  :
//* Arguments    : none
//* Return Value : none
//***********************************************************************************************************************/
static void user_spi_cs_set(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c36:	4802      	ldr	r0, [pc, #8]	; (8002c40 <user_spi_cs_set+0x14>)
 8002c38:	f002 fa63 	bl	8005102 <HAL_GPIO_WritePin>
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40020400 	.word	0x40020400

08002c44 <user_spi_cs_clear>:
//* Description  :
//* Arguments    : none
//* Return Value : none
//***********************************************************************************************************************/
static void user_spi_cs_clear(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c4e:	4802      	ldr	r0, [pc, #8]	; (8002c58 <user_spi_cs_clear+0x14>)
 8002c50:	f002 fa57 	bl	8005102 <HAL_GPIO_WritePin>
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40020400 	.word	0x40020400

08002c5c <rpm_sensor_process>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void rpm_sensor_process(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  // timer 1s for process
	switch (one_second_active) {
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <rpm_sensor_process+0x5c>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <rpm_sensor_process+0x12>
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d009      	beq.n	8002c80 <rpm_sensor_process+0x24>
				one_second_active = 0;
			    sensor_read.rpm = rmp_per_second * 60; // change second to minutes
			    rmp_per_second = 0;
			}
		default:
			break;
 8002c6c:	e020      	b.n	8002cb0 <rpm_sensor_process+0x54>
			previous_time = timer_get_tick();
 8002c6e:	f7ff f9c3 	bl	8001ff8 <timer_get_tick>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <rpm_sensor_process+0x60>)
 8002c76:	6013      	str	r3, [r2, #0]
			one_second_active = 1;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <rpm_sensor_process+0x5c>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
			break;
 8002c7e:	e018      	b.n	8002cb2 <rpm_sensor_process+0x56>
			if( timer_get_tick() - previous_time > 1000)
 8002c80:	f7ff f9ba 	bl	8001ff8 <timer_get_tick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <rpm_sensor_process+0x60>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c90:	d90e      	bls.n	8002cb0 <rpm_sensor_process+0x54>
				one_second_active = 0;
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <rpm_sensor_process+0x5c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
			    sensor_read.rpm = rmp_per_second * 60; // change second to minutes
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <rpm_sensor_process+0x64>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <rpm_sensor_process+0x68>)
 8002ca8:	609a      	str	r2, [r3, #8]
			    rmp_per_second = 0;
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <rpm_sensor_process+0x64>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
			break;
 8002cb0:	bf00      	nop
	}
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200002ac 	.word	0x200002ac
 8002cbc:	200002b0 	.word	0x200002b0
 8002cc0:	200002a8 	.word	0x200002a8
 8002cc4:	20001ec0 	.word	0x20001ec0

08002cc8 <HAL_GPIO_EXTI_Callback>:
/***********************************************************************************************************************
* Static Functions
***********************************************************************************************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	80fb      	strh	r3, [r7, #6]
  if( GPIO_Pin == RPM_SENSOR_Pin)
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d104      	bne.n	8002ce2 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    rmp_per_second++;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <HAL_GPIO_EXTI_Callback+0x24>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	4a03      	ldr	r2, [pc, #12]	; (8002cec <HAL_GPIO_EXTI_Callback+0x24>)
 8002ce0:	6013      	str	r3, [r2, #0]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	200002a8 	.word	0x200002a8

08002cf0 <user_put_char>:
};

shell_context_struct user_context;

int user_put_char(uint8_t *buf, uint32_t len)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
    return user_putchar((const char *)*buf);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fa9a 	bl	8003238 <user_putchar>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <user_get_char>:

int user_get_char(uint8_t *buf, uint32_t len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
    uint8_t ch = user_getchar();
 8002d18:	f000 faa0 	bl	800325c <user_getchar>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]
    *buf = ch;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	701a      	strb	r2, [r3, #0]
    return ch;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <vsm_cli_start>:

void vsm_cli_start(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af02      	add	r7, sp, #8
    SHELL_Init(&user_context,
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <vsm_cli_start+0x40>)
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <vsm_cli_start+0x44>)
 8002d3c:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <vsm_cli_start+0x48>)
 8002d3e:	490f      	ldr	r1, [pc, #60]	; (8002d7c <vsm_cli_start+0x4c>)
 8002d40:	480f      	ldr	r0, [pc, #60]	; (8002d80 <vsm_cli_start+0x50>)
 8002d42:	f000 fad3 	bl	80032ec <SHELL_Init>
               user_get_char,
               uart_debug_printf,
               ">");

    /* Register CLI commands */
    for (int i = 0; i < sizeof(cli_command_table) / sizeof(shell_command_context_t); i++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	e009      	b.n	8002d60 <vsm_cli_start+0x30>
    {
        SHELL_RegisterCommand(&cli_command_table[i]);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <vsm_cli_start+0x54>)
 8002d52:	4413      	add	r3, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 f85b 	bl	8003e10 <SHELL_RegisterCommand>
    for (int i = 0; i < sizeof(cli_command_table) / sizeof(shell_command_context_t); i++)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d9f2      	bls.n	8002d4c <vsm_cli_start+0x1c>
    }
}
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	0800e8f8 	.word	0x0800e8f8
 8002d74:	080031d5 	.word	0x080031d5
 8002d78:	08002d0f 	.word	0x08002d0f
 8002d7c:	08002cf1 	.word	0x08002cf1
 8002d80:	20002164 	.word	0x20002164
 8002d84:	0800eb64 	.word	0x0800eb64

08002d88 <vsm_cli_main_loop>:

void vsm_cli_main_loop(void *pvParameters)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    SHELL_Process(&user_context);
 8002d90:	4803      	ldr	r0, [pc, #12]	; (8002da0 <vsm_cli_main_loop+0x18>)
 8002d92:	f000 facd 	bl	8003330 <SHELL_Process>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20002164 	.word	0x20002164

08002da4 <cli_reset_system>:

/* Reset System */
static int32_t cli_reset_system(p_shell_context_t context, int32_t argc, char **argv)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
    return 0;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <test_ble>:


static int32_t test_ble(p_shell_context_t context, int32_t argc, char **argv)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
    char *param = argv[1];
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	617b      	str	r3, [r7, #20]
    uart_ble_printf("%s\r\n", param);
 8002dce:	6979      	ldr	r1, [r7, #20]
 8002dd0:	4803      	ldr	r0, [pc, #12]	; (8002de0 <test_ble+0x24>)
 8002dd2:	f7ff fb6b 	bl	80024ac <uart_ble_printf>
    return 0;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	0800e8fc 	.word	0x0800e8fc

08002de4 <sensor_list>:

static int32_t sensor_list(p_shell_context_t context, int32_t argc, char **argv)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
	APP_LOGD("ble status = %s", sensor_read.ble_status == 1 ? "CONNECT":"DISCONNECT");
 8002df0:	2362      	movs	r3, #98	; 0x62
 8002df2:	4a39      	ldr	r2, [pc, #228]	; (8002ed8 <sensor_list+0xf4>)
 8002df4:	4939      	ldr	r1, [pc, #228]	; (8002edc <sensor_list+0xf8>)
 8002df6:	483a      	ldr	r0, [pc, #232]	; (8002ee0 <sensor_list+0xfc>)
 8002df8:	f000 f9ec 	bl	80031d4 <uart_debug_printf>
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <sensor_list+0x100>)
 8002dfe:	7c1b      	ldrb	r3, [r3, #16]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <sensor_list+0x24>
 8002e04:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <sensor_list+0x104>)
 8002e06:	e000      	b.n	8002e0a <sensor_list+0x26>
 8002e08:	4b38      	ldr	r3, [pc, #224]	; (8002eec <sensor_list+0x108>)
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4838      	ldr	r0, [pc, #224]	; (8002ef0 <sensor_list+0x10c>)
 8002e0e:	f000 f9e1 	bl	80031d4 <uart_debug_printf>
 8002e12:	4838      	ldr	r0, [pc, #224]	; (8002ef4 <sensor_list+0x110>)
 8002e14:	f000 f9de 	bl	80031d4 <uart_debug_printf>
	APP_LOGD("sensor press = %d", sensor_read.fPressure_sender_percent);
 8002e18:	2363      	movs	r3, #99	; 0x63
 8002e1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ed8 <sensor_list+0xf4>)
 8002e1c:	492f      	ldr	r1, [pc, #188]	; (8002edc <sensor_list+0xf8>)
 8002e1e:	4830      	ldr	r0, [pc, #192]	; (8002ee0 <sensor_list+0xfc>)
 8002e20:	f000 f9d8 	bl	80031d4 <uart_debug_printf>
 8002e24:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <sensor_list+0x100>)
 8002e26:	889b      	ldrh	r3, [r3, #4]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4833      	ldr	r0, [pc, #204]	; (8002ef8 <sensor_list+0x114>)
 8002e2c:	f000 f9d2 	bl	80031d4 <uart_debug_printf>
 8002e30:	4830      	ldr	r0, [pc, #192]	; (8002ef4 <sensor_list+0x110>)
 8002e32:	f000 f9cf 	bl	80031d4 <uart_debug_printf>
	APP_LOGD("sensor vBat charg = %d", sensor_read.fVbat_charging);
 8002e36:	2364      	movs	r3, #100	; 0x64
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <sensor_list+0xf4>)
 8002e3a:	4928      	ldr	r1, [pc, #160]	; (8002edc <sensor_list+0xf8>)
 8002e3c:	4828      	ldr	r0, [pc, #160]	; (8002ee0 <sensor_list+0xfc>)
 8002e3e:	f000 f9c9 	bl	80031d4 <uart_debug_printf>
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <sensor_list+0x100>)
 8002e44:	885b      	ldrh	r3, [r3, #2]
 8002e46:	4619      	mov	r1, r3
 8002e48:	482c      	ldr	r0, [pc, #176]	; (8002efc <sensor_list+0x118>)
 8002e4a:	f000 f9c3 	bl	80031d4 <uart_debug_printf>
 8002e4e:	4829      	ldr	r0, [pc, #164]	; (8002ef4 <sensor_list+0x110>)
 8002e50:	f000 f9c0 	bl	80031d4 <uart_debug_printf>
	APP_LOGD("sensor vBat lipo= %d", sensor_read.fVbat_lipo);
 8002e54:	2365      	movs	r3, #101	; 0x65
 8002e56:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <sensor_list+0xf4>)
 8002e58:	4920      	ldr	r1, [pc, #128]	; (8002edc <sensor_list+0xf8>)
 8002e5a:	4821      	ldr	r0, [pc, #132]	; (8002ee0 <sensor_list+0xfc>)
 8002e5c:	f000 f9ba 	bl	80031d4 <uart_debug_printf>
 8002e60:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <sensor_list+0x100>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	4619      	mov	r1, r3
 8002e66:	4826      	ldr	r0, [pc, #152]	; (8002f00 <sensor_list+0x11c>)
 8002e68:	f000 f9b4 	bl	80031d4 <uart_debug_printf>
 8002e6c:	4821      	ldr	r0, [pc, #132]	; (8002ef4 <sensor_list+0x110>)
 8002e6e:	f000 f9b1 	bl	80031d4 <uart_debug_printf>
	APP_LOGD("sensor Knock1 = %d", sensor_read.knock_sensor_channel_1);
 8002e72:	2366      	movs	r3, #102	; 0x66
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <sensor_list+0xf4>)
 8002e76:	4919      	ldr	r1, [pc, #100]	; (8002edc <sensor_list+0xf8>)
 8002e78:	4819      	ldr	r0, [pc, #100]	; (8002ee0 <sensor_list+0xfc>)
 8002e7a:	f000 f9ab 	bl	80031d4 <uart_debug_printf>
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <sensor_list+0x100>)
 8002e80:	899b      	ldrh	r3, [r3, #12]
 8002e82:	4619      	mov	r1, r3
 8002e84:	481f      	ldr	r0, [pc, #124]	; (8002f04 <sensor_list+0x120>)
 8002e86:	f000 f9a5 	bl	80031d4 <uart_debug_printf>
 8002e8a:	481a      	ldr	r0, [pc, #104]	; (8002ef4 <sensor_list+0x110>)
 8002e8c:	f000 f9a2 	bl	80031d4 <uart_debug_printf>
	APP_LOGD("sensor Knock2 = %d", sensor_read.knock_sensor_channel_2);
 8002e90:	2367      	movs	r3, #103	; 0x67
 8002e92:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <sensor_list+0xf4>)
 8002e94:	4911      	ldr	r1, [pc, #68]	; (8002edc <sensor_list+0xf8>)
 8002e96:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <sensor_list+0xfc>)
 8002e98:	f000 f99c 	bl	80031d4 <uart_debug_printf>
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <sensor_list+0x100>)
 8002e9e:	89db      	ldrh	r3, [r3, #14]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4819      	ldr	r0, [pc, #100]	; (8002f08 <sensor_list+0x124>)
 8002ea4:	f000 f996 	bl	80031d4 <uart_debug_printf>
 8002ea8:	4812      	ldr	r0, [pc, #72]	; (8002ef4 <sensor_list+0x110>)
 8002eaa:	f000 f993 	bl	80031d4 <uart_debug_printf>
	APP_LOGD("sensor rpm = %d", sensor_read.rpm);
 8002eae:	2368      	movs	r3, #104	; 0x68
 8002eb0:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <sensor_list+0xf4>)
 8002eb2:	490a      	ldr	r1, [pc, #40]	; (8002edc <sensor_list+0xf8>)
 8002eb4:	480a      	ldr	r0, [pc, #40]	; (8002ee0 <sensor_list+0xfc>)
 8002eb6:	f000 f98d 	bl	80031d4 <uart_debug_printf>
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <sensor_list+0x100>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4812      	ldr	r0, [pc, #72]	; (8002f0c <sensor_list+0x128>)
 8002ec2:	f000 f987 	bl	80031d4 <uart_debug_printf>
 8002ec6:	480b      	ldr	r0, [pc, #44]	; (8002ef4 <sensor_list+0x110>)
 8002ec8:	f000 f984 	bl	80031d4 <uart_debug_printf>
    return 0;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	0800eba4 	.word	0x0800eba4
 8002edc:	0800e904 	.word	0x0800e904
 8002ee0:	0800e908 	.word	0x0800e908
 8002ee4:	20001ec0 	.word	0x20001ec0
 8002ee8:	0800e918 	.word	0x0800e918
 8002eec:	0800e920 	.word	0x0800e920
 8002ef0:	0800e92c 	.word	0x0800e92c
 8002ef4:	0800e93c 	.word	0x0800e93c
 8002ef8:	0800e940 	.word	0x0800e940
 8002efc:	0800e954 	.word	0x0800e954
 8002f00:	0800e96c 	.word	0x0800e96c
 8002f04:	0800e984 	.word	0x0800e984
 8002f08:	0800e998 	.word	0x0800e998
 8002f0c:	0800e9ac 	.word	0x0800e9ac

08002f10 <rise_compute>:

static int32_t rise_compute(p_shell_context_t context, int32_t argc, char **argv)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
	uint16_t data = atoi(argv[1]);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f006 ff8a 	bl	8009e3c <atoi>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	82fb      	strh	r3, [r7, #22]
	int32_t value = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]
	value = oild_pressuare_table(data);
 8002f30:	8afb      	ldrh	r3, [r7, #22]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fee6 	bl	8000d04 <__aeabi_ui2f>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fbc2 	bl	80026c4 <oild_pressuare_table>
 8002f40:	6138      	str	r0, [r7, #16]
	APP_LOGI("compute = %d", value);
 8002f42:	2371      	movs	r3, #113	; 0x71
 8002f44:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <rise_compute+0x58>)
 8002f46:	4909      	ldr	r1, [pc, #36]	; (8002f6c <rise_compute+0x5c>)
 8002f48:	4809      	ldr	r0, [pc, #36]	; (8002f70 <rise_compute+0x60>)
 8002f4a:	f000 f943 	bl	80031d4 <uart_debug_printf>
 8002f4e:	6939      	ldr	r1, [r7, #16]
 8002f50:	4808      	ldr	r0, [pc, #32]	; (8002f74 <rise_compute+0x64>)
 8002f52:	f000 f93f 	bl	80031d4 <uart_debug_printf>
 8002f56:	4808      	ldr	r0, [pc, #32]	; (8002f78 <rise_compute+0x68>)
 8002f58:	f000 f93c 	bl	80031d4 <uart_debug_printf>
}
 8002f5c:	bf00      	nop
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	0800ebb0 	.word	0x0800ebb0
 8002f6c:	0800e9bc 	.word	0x0800e9bc
 8002f70:	0800e908 	.word	0x0800e908
 8002f74:	0800e9c0 	.word	0x0800e9c0
 8002f78:	0800e93c 	.word	0x0800e93c

08002f7c <fifo_create>:
/************************** Variable Definitions *****************************/

/********************* Exported Function Definitions *************************/

bool fifo_create(fifo_t* p_fifo, void * buf, uint16_t count, size_t size)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	80fb      	strh	r3, [r7, #6]
    // Sanity check for memory and element sizes
    if (buf != NULL && p_fifo != NULL && count != 0) {
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01c      	beq.n	8002fcc <fifo_create+0x50>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d019      	beq.n	8002fcc <fifo_create+0x50>
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <fifo_create+0x50>
        p_fifo->itemspace = buf;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	601a      	str	r2, [r3, #0]
        p_fifo->itemsize = size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
        p_fifo->allocatedbytes = count * size;
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	fb02 f203 	mul.w	r2, r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	609a      	str	r2, [r3, #8]
        p_fifo->readoffset = 0;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	819a      	strh	r2, [r3, #12]
        p_fifo->writeoffset = 0;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	81da      	strh	r2, [r3, #14]
        p_fifo->storedbytes = 0;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
        return true;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <fifo_create+0x52>
    }
    return false;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <fifo_add>:

bool fifo_add(fifo_t* p_fifo, const void * item)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
    if (!fifo_is_full(p_fifo)) {
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f838 	bl	8003058 <fifo_is_full>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f083 0301 	eor.w	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00c      	beq.n	800300e <fifo_add+0x36>
        fifo_copy_to(p_fifo, item);
 8002ff4:	6839      	ldr	r1, [r7, #0]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f877 	bl	80030ea <fifo_copy_to>
        p_fifo->storedbytes += p_fifo->itemsize;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	611a      	str	r2, [r3, #16]
        return true;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <fifo_add+0x38>
    } else {
        return false;
 800300e:	2300      	movs	r3, #0
    }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <fifo_get>:

bool fifo_get(fifo_t* p_fifo, void * item)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
    if (!fifo_is_empty(p_fifo)) {
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f82a 	bl	800307c <fifo_is_empty>
 8003028:	4603      	mov	r3, r0
 800302a:	f083 0301 	eor.w	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00c      	beq.n	800304e <fifo_get+0x36>
        fifo_copy_from(p_fifo, item);
 8003034:	6839      	ldr	r1, [r7, #0]
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f830 	bl	800309c <fifo_copy_from>
        p_fifo->storedbytes -= p_fifo->itemsize;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	1ad2      	subs	r2, r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]
        return true;
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <fifo_get+0x38>
    } else {
        return false;
 800304e:	2300      	movs	r3, #0
    }
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <fifo_is_full>:

bool fifo_is_full(fifo_t* p_fifo)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes >= p_fifo->allocatedbytes)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	d301      	bcc.n	8003070 <fifo_is_full+0x18>
        return true;
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <fifo_is_full+0x1a>
    else
        return false;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <fifo_is_empty>:

bool fifo_is_empty(fifo_t* p_fifo)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes == 0)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <fifo_is_empty+0x14>
        return true;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <fifo_is_empty+0x16>
    else
        return false;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <fifo_copy_from>:



/********************* Internal Function Definitions *************************/
static void fifo_copy_from(fifo_t* p_fifo, void * item)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
    memcpy(item, (uint8_t*)p_fifo->itemspace + p_fifo->readoffset, p_fifo->itemsize);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	8992      	ldrh	r2, [r2, #12]
 80030ae:	1899      	adds	r1, r3, r2
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	461a      	mov	r2, r3
 80030b6:	6838      	ldr	r0, [r7, #0]
 80030b8:	f006 fee8 	bl	8009e8c <memcpy>
    p_fifo->readoffset += p_fifo->itemsize;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	899a      	ldrh	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	819a      	strh	r2, [r3, #12]
    if (p_fifo->readoffset >= p_fifo->allocatedbytes) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	899b      	ldrh	r3, [r3, #12]
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <fifo_copy_from+0x46>
        p_fifo->readoffset = 0;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	819a      	strh	r2, [r3, #12]
    }
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <fifo_copy_to>:

static void fifo_copy_to(fifo_t* p_fifo, const void *item)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)p_fifo->itemspace + p_fifo->writeoffset, item, p_fifo->itemsize);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	89d2      	ldrh	r2, [r2, #14]
 80030fc:	1898      	adds	r0, r3, r2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	461a      	mov	r2, r3
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	f006 fec1 	bl	8009e8c <memcpy>
    p_fifo->writeoffset += p_fifo->itemsize;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	89da      	ldrh	r2, [r3, #14]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	b29b      	uxth	r3, r3
 8003114:	4413      	add	r3, r2
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	81da      	strh	r2, [r3, #14]
    if (p_fifo->writeoffset >= p_fifo->allocatedbytes) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	89db      	ldrh	r3, [r3, #14]
 8003120:	461a      	mov	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <fifo_copy_to+0x46>
        p_fifo->writeoffset = 0;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	81da      	strh	r2, [r3, #14]
    }
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <retarget_shell>:
 * @fn port_stdio_init
 * @brief Initialize stdio on the given UART
 *
 * @param[in] huart Pointer to the STM32 HAL UART peripheral instance
 */
void retarget_shell(UART_HandleTypeDef* huart) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
    uart = huart;
 8003140:	4a04      	ldr	r2, [pc, #16]	; (8003154 <retarget_shell+0x1c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
    retarget_init_fifo();
 8003146:	f000 f807 	bl	8003158 <retarget_init_fifo>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200002b4 	.word	0x200002b4

08003158 <retarget_init_fifo>:
/**
 * @brief      Initialize FIFO
 *
 * @return     { description_of_the_return_value }
 */
static int retarget_init_fifo(void) {
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  fifo_create(
 800315c:	2301      	movs	r3, #1
 800315e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003162:	4906      	ldr	r1, [pc, #24]	; (800317c <retarget_init_fifo+0x24>)
 8003164:	4806      	ldr	r0, [pc, #24]	; (8003180 <retarget_init_fifo+0x28>)
 8003166:	f7ff ff09 	bl	8002f7c <fifo_create>
                    &shell_fifo,
                    shell_rx_buffer,
                    sizeof(shell_rx_buffer)/sizeof(uint8_t),
                    sizeof(uint8_t)
                  );
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&cli_rx_byte, 1);
 800316a:	2201      	movs	r2, #1
 800316c:	4905      	ldr	r1, [pc, #20]	; (8003184 <retarget_init_fifo+0x2c>)
 800316e:	4806      	ldr	r0, [pc, #24]	; (8003188 <retarget_init_fifo+0x30>)
 8003170:	f003 fdda 	bl	8006d28 <HAL_UART_Receive_IT>
  return 0;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200002b8 	.word	0x200002b8
 8003180:	20002280 	.word	0x20002280
 8003184:	200004b8 	.word	0x200004b8
 8003188:	20001f70 	.word	0x20001f70

0800318c <serial_get_char>:
 *
 * @param      c     { parameter_description }
 *
 * @return     { description_of_the_return_value }
 */
int serial_get_char(uint8_t *c) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if(fifo_is_empty(&shell_fifo) == true) return 0;
 8003194:	480e      	ldr	r0, [pc, #56]	; (80031d0 <serial_get_char+0x44>)
 8003196:	f7ff ff71 	bl	800307c <fifo_is_empty>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <serial_get_char+0x18>
 80031a0:	2300      	movs	r3, #0
 80031a2:	e010      	b.n	80031c6 <serial_get_char+0x3a>

  uint8_t item = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]

  if(fifo_get(&shell_fifo, &item) == true) {
 80031a8:	f107 030f 	add.w	r3, r7, #15
 80031ac:	4619      	mov	r1, r3
 80031ae:	4808      	ldr	r0, [pc, #32]	; (80031d0 <serial_get_char+0x44>)
 80031b0:	f7ff ff32 	bl	8003018 <fifo_get>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <serial_get_char+0x38>
    *c = item;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	701a      	strb	r2, [r3, #0]
    return 1;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <serial_get_char+0x3a>
  }

  return 0;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20002280 	.word	0x20002280

080031d4 <uart_debug_printf>:
* Return Value : none
***********************************************************************************************************************/

//debug printf
int uart_debug_printf(const char *Format, ...)
{
 80031d4:	b40f      	push	{r0, r1, r2, r3}
 80031d6:	b580      	push	{r7, lr}
 80031d8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80031dc:	af00      	add	r7, sp, #0
	uint8_t buff[512 + 1] = {0};
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	3304      	adds	r3, #4
 80031e6:	f240 12fd 	movw	r2, #509	; 0x1fd
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f006 fe75 	bl	8009edc <memset>
	va_list args;
	va_start(args, Format);
 80031f2:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80031f6:	463b      	mov	r3, r7
 80031f8:	601a      	str	r2, [r3, #0]
	uint16_t len = vsprintf((char*)buff, Format, args);
 80031fa:	463b      	mov	r3, r7
 80031fc:	1d38      	adds	r0, r7, #4
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8003204:	f008 fbce 	bl	800b9a4 <vsiprintf>
 8003208:	4603      	mov	r3, r0
 800320a:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
    HAL_UART_Transmit(uart, (uint8_t *)buff, len, 400);
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <uart_debug_printf+0x60>)
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 8003216:	1d39      	adds	r1, r7, #4
 8003218:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800321c:	f003 fceb 	bl	8006bf6 <HAL_UART_Transmit>
	va_end(args);
	return -1;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003224:	4618      	mov	r0, r3
 8003226:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800322a:	46bd      	mov	sp, r7
 800322c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003230:	b004      	add	sp, #16
 8003232:	4770      	bx	lr
 8003234:	200002b4 	.word	0x200002b4

08003238 <user_putchar>:


long user_putchar(const char * str)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(uart, (uint8_t *)str, 1, 100);
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <user_putchar+0x20>)
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	2364      	movs	r3, #100	; 0x64
 8003246:	2201      	movs	r2, #1
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	f003 fcd4 	bl	8006bf6 <HAL_UART_Transmit>
    return 0;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200002b4 	.word	0x200002b4

0800325c <user_getchar>:


long user_getchar (void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  int ch = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
  return (serial_get_char((uint8_t*)&ch) == 1) ? ch : 0;
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff8f 	bl	800318c <serial_get_char>
 800326e:	4603      	mov	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <user_getchar+0x1c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	e000      	b.n	800327a <user_getchar+0x1e>
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <HAL_UART_RxCpltCallback+0x4c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d10b      	bne.n	80032ac <HAL_UART_RxCpltCallback+0x28>
    {
      fifo_add(&shell_fifo, &cli_rx_byte);
 8003294:	490f      	ldr	r1, [pc, #60]	; (80032d4 <HAL_UART_RxCpltCallback+0x50>)
 8003296:	4810      	ldr	r0, [pc, #64]	; (80032d8 <HAL_UART_RxCpltCallback+0x54>)
 8003298:	f7ff fe9e 	bl	8002fd8 <fifo_add>
      HAL_UART_Receive_IT(uart, &cli_rx_byte, 1);
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_UART_RxCpltCallback+0x58>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	490c      	ldr	r1, [pc, #48]	; (80032d4 <HAL_UART_RxCpltCallback+0x50>)
 80032a4:	4618      	mov	r0, r3
 80032a6:	f003 fd3f 	bl	8006d28 <HAL_UART_Receive_IT>
	else if (huart == &huart2)
	{
		fifo_add(&com_fifo, &u8RxByte2);
		HAL_UART_Receive_IT(&huart2, &u8RxByte2, 1);
	}
}
 80032aa:	e00c      	b.n	80032c6 <HAL_UART_RxCpltCallback+0x42>
	else if (huart == &huart2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <HAL_UART_RxCpltCallback+0x5c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d108      	bne.n	80032c6 <HAL_UART_RxCpltCallback+0x42>
		fifo_add(&com_fifo, &u8RxByte2);
 80032b4:	490b      	ldr	r1, [pc, #44]	; (80032e4 <HAL_UART_RxCpltCallback+0x60>)
 80032b6:	480c      	ldr	r0, [pc, #48]	; (80032e8 <HAL_UART_RxCpltCallback+0x64>)
 80032b8:	f7ff fe8e 	bl	8002fd8 <fifo_add>
		HAL_UART_Receive_IT(&huart2, &u8RxByte2, 1);
 80032bc:	2201      	movs	r2, #1
 80032be:	4909      	ldr	r1, [pc, #36]	; (80032e4 <HAL_UART_RxCpltCallback+0x60>)
 80032c0:	4807      	ldr	r0, [pc, #28]	; (80032e0 <HAL_UART_RxCpltCallback+0x5c>)
 80032c2:	f003 fd31 	bl	8006d28 <HAL_UART_Receive_IT>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20001f70 	.word	0x20001f70
 80032d4:	200004b8 	.word	0x200004b8
 80032d8:	20002280 	.word	0x20002280
 80032dc:	200002b4 	.word	0x200002b4
 80032e0:	20002048 	.word	0x20002048
 80032e4:	20000295 	.word	0x20000295
 80032e8:	20002120 	.word	0x20002120

080032ec <SHELL_Init>:
/*******************************************************************************
 * Code
 ******************************************************************************/
void SHELL_Init(
    p_shell_context_t context, send_data_cb_t send_cb, recv_data_cb_t recv_cb, printf_data_t shell_printf, char *prompt)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
//    assert(recv_cb != NULL);
//    assert(prompt != NULL);
//    assert(shell_printf != NULL);

    /* Memset for context */
    memset(context, 0, sizeof(shell_context_struct));
 80032fa:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80032fe:	2100      	movs	r1, #0
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f006 fdeb 	bl	8009edc <memset>
    context->send_data_func = send_cb;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	649a      	str	r2, [r3, #72]	; 0x48
    context->recv_data_func = recv_cb;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	64da      	str	r2, [r3, #76]	; 0x4c
    context->printf_data_func = shell_printf;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	651a      	str	r2, [r3, #80]	; 0x50
    context->prompt = prompt;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	601a      	str	r2, [r3, #0]

    SHELL_RegisterCommand(&xHelpCommand);
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <SHELL_Init+0x40>)
 8003320:	f000 fd76 	bl	8003e10 <SHELL_RegisterCommand>
    // SHELL_RegisterCommand(&xExitCommand);
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	0800ebc0 	.word	0x0800ebc0

08003330 <SHELL_Process>:


void SHELL_Process(p_shell_context_t context) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

   static uint32_t tick = 0;
   static uint8_t first_run  = 1;


    if (!context)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8227 	beq.w	800378e <SHELL_Process+0x45e>
    {
        return;
    }

    if(first_run == 1) {
 8003340:	4bad      	ldr	r3, [pc, #692]	; (80035f8 <SHELL_Process+0x2c8>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d115      	bne.n	8003374 <SHELL_Process+0x44>
        context->exit = false;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        context->printf_data_func("\r\nSHELL (build: %s)\r\n", __DATE__);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003354:	49a9      	ldr	r1, [pc, #676]	; (80035fc <SHELL_Process+0x2cc>)
 8003356:	48aa      	ldr	r0, [pc, #680]	; (8003600 <SHELL_Process+0x2d0>)
 8003358:	4798      	blx	r3
        context->printf_data_func("Copyright (c) 2020 VinSmart., JSC\r\n");
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	48a9      	ldr	r0, [pc, #676]	; (8003604 <SHELL_Process+0x2d4>)
 8003360:	4798      	blx	r3
        context->printf_data_func(context->prompt);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	4610      	mov	r0, r2
 800336c:	4798      	blx	r3
        first_run = 0;
 800336e:	4ba2      	ldr	r3, [pc, #648]	; (80035f8 <SHELL_Process+0x2c8>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
    }


    if(xTaskGetTickCount() - tick < 20) {
 8003374:	f005 fa6e 	bl	8008854 <xTaskGetTickCount>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	4ba2      	ldr	r3, [pc, #648]	; (8003608 <SHELL_Process+0x2d8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b13      	cmp	r3, #19
 8003384:	f240 8205 	bls.w	8003792 <SHELL_Process+0x462>
        return;
    }

    tick = xTaskGetTickCount();
 8003388:	f005 fa64 	bl	8008854 <xTaskGetTickCount>
 800338c:	4603      	mov	r3, r0
 800338e:	461a      	mov	r2, r3
 8003390:	4b9d      	ldr	r3, [pc, #628]	; (8003608 <SHELL_Process+0x2d8>)
 8003392:	601a      	str	r2, [r3, #0]

    if (context->exit)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 81fb 	bne.w	8003796 <SHELL_Process+0x466>
    {
        return;
    }
    ch = GetChar(context);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fd59 	bl	8003e58 <GetChar>
 80033a6:	4603      	mov	r3, r0
 80033a8:	72fb      	strb	r3, [r7, #11]
    if(ch == 0) {
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 81f4 	beq.w	800379a <SHELL_Process+0x46a>
      return;
    }
    /* Special key */
    if (ch == KEY_ESC)
 80033b2:	7afb      	ldrb	r3, [r7, #11]
 80033b4:	2b1b      	cmp	r3, #27
 80033b6:	d103      	bne.n	80033c0 <SHELL_Process+0x90>
    {
        context->stat = kSHELL_Special;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	711a      	strb	r2, [r3, #4]
        return;
 80033be:	e1ef      	b.n	80037a0 <SHELL_Process+0x470>
    }
    else if (context->stat == kSHELL_Special)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	791b      	ldrb	r3, [r3, #4]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10a      	bne.n	80033de <SHELL_Process+0xae>
    {
        /* Function key */
        if (ch == '[')
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	2b5b      	cmp	r3, #91	; 0x5b
 80033cc:	d103      	bne.n	80033d6 <SHELL_Process+0xa6>
        {
            context->stat = kSHELL_Function;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	711a      	strb	r2, [r3, #4]
            return;
 80033d4:	e1e4      	b.n	80037a0 <SHELL_Process+0x470>
        }
        context->stat = kSHELL_Normal;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	711a      	strb	r2, [r3, #4]
 80033dc:	e138      	b.n	8003650 <SHELL_Process+0x320>
    }
    else if (context->stat == kSHELL_Function)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	791b      	ldrb	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d17c      	bne.n	80034e0 <SHELL_Process+0x1b0>
    {
        context->stat = kSHELL_Normal;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	711a      	strb	r2, [r3, #4]

        switch ((uint8_t)ch)
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	3b41      	subs	r3, #65	; 0x41
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d86b      	bhi.n	80034cc <SHELL_Process+0x19c>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <SHELL_Process+0xcc>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	08003443 	.word	0x08003443
 8003404:	08003493 	.word	0x08003493
 8003408:	0800346f 	.word	0x0800346f
        {
            /* History operation here */
            case 'A': /* Up key */
                GetHistoryCommand(context, context->hist_current);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003412:	b2db      	uxtb	r3, r3
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fb32 	bl	8003a80 <GetHistoryCommand>
                if (context->hist_current < (context->hist_count - 1))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003422:	461a      	mov	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800342a:	3b01      	subs	r3, #1
 800342c:	429a      	cmp	r2, r3
 800342e:	da4f      	bge.n	80034d0 <SHELL_Process+0x1a0>
                {
                    context->hist_current++;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003436:	3301      	adds	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 8003440:	e046      	b.n	80034d0 <SHELL_Process+0x1a0>
            case 'B': /* Down key */
                GetHistoryCommand(context, context->hist_current);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb17 	bl	8003a80 <GetHistoryCommand>
                if (context->hist_current > 0)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003458:	2b00      	cmp	r3, #0
 800345a:	d03b      	beq.n	80034d4 <SHELL_Process+0x1a4>
                {
                    context->hist_current--;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 800346c:	e032      	b.n	80034d4 <SHELL_Process+0x1a4>
            case 'D': /* Left key */
                if (context->c_pos)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02f      	beq.n	80034d8 <SHELL_Process+0x1a8>
                {
                    context->printf_data_func("\b");
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347c:	4863      	ldr	r0, [pc, #396]	; (800360c <SHELL_Process+0x2dc>)
 800347e:	4798      	blx	r3
                    context->c_pos--;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003486:	3b01      	subs	r3, #1
 8003488:	b2da      	uxtb	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 8003490:	e022      	b.n	80034d8 <SHELL_Process+0x1a8>
            case 'C': /* Right key */
                if (context->c_pos < context->l_pos)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800349e:	429a      	cmp	r2, r3
 80034a0:	d21c      	bcs.n	80034dc <SHELL_Process+0x1ac>
                {
                    context->printf_data_func("%c", context->line[context->c_pos]);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 80034ac:	4611      	mov	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	440a      	add	r2, r1
 80034b2:	7952      	ldrb	r2, [r2, #5]
 80034b4:	4611      	mov	r1, r2
 80034b6:	4856      	ldr	r0, [pc, #344]	; (8003610 <SHELL_Process+0x2e0>)
 80034b8:	4798      	blx	r3
                    context->c_pos++;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80034c0:	3301      	adds	r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 80034ca:	e007      	b.n	80034dc <SHELL_Process+0x1ac>
            default:
                break;
 80034cc:	bf00      	nop
 80034ce:	e167      	b.n	80037a0 <SHELL_Process+0x470>
                break;
 80034d0:	bf00      	nop
 80034d2:	e165      	b.n	80037a0 <SHELL_Process+0x470>
                break;
 80034d4:	bf00      	nop
 80034d6:	e163      	b.n	80037a0 <SHELL_Process+0x470>
                break;
 80034d8:	bf00      	nop
 80034da:	e161      	b.n	80037a0 <SHELL_Process+0x470>
                break;
 80034dc:	bf00      	nop
        }
        return;
 80034de:	e15f      	b.n	80037a0 <SHELL_Process+0x470>
    }
    /* Handle tab key */
    else if (ch == '\t')
 80034e0:	7afb      	ldrb	r3, [r7, #11]
 80034e2:	2b09      	cmp	r3, #9
 80034e4:	d124      	bne.n	8003530 <SHELL_Process+0x200>
    {
#if SHELL_AUTO_COMPLETE
        /* Move the cursor to the beginning of line */
        for (i = 0; i < context->c_pos; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e006      	b.n	80034fa <SHELL_Process+0x1ca>
        {
            context->printf_data_func("\b");
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f0:	4846      	ldr	r0, [pc, #280]	; (800360c <SHELL_Process+0x2dc>)
 80034f2:	4798      	blx	r3
        for (i = 0; i < context->c_pos; i++)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003500:	461a      	mov	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4293      	cmp	r3, r2
 8003506:	dbf1      	blt.n	80034ec <SHELL_Process+0x1bc>
        }
        /* Do auto complete */
        AutoComplete(context);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fb1b 	bl	8003b44 <AutoComplete>
        /* Move position to end */
        context->c_pos = context->l_pos = StrLen(context->line);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3305      	adds	r3, #5
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fbc2 	bl	8003c9c <StrLen>
 8003518:	4603      	mov	r3, r0
 800351a:	b2da      	uxtb	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
#endif
        return;
 800352e:	e137      	b.n	80037a0 <SHELL_Process+0x470>
    }
#if SHELL_SEARCH_IN_HIST
    /* Search command in history */
    else if ((ch == '`') && (context->l_pos == 0) && (context->line[0] == 0x00))
 8003530:	7afb      	ldrb	r3, [r7, #11]
 8003532:	2b60      	cmp	r3, #96	; 0x60
 8003534:	d109      	bne.n	800354a <SHELL_Process+0x21a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <SHELL_Process+0x21a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	795b      	ldrb	r3, [r3, #5]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8083 	beq.w	8003650 <SHELL_Process+0x320>
    {
    }
#endif
    /* Handle backspace key */
    else if ((ch == KET_DEL) || (ch == '\b'))
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	2b7f      	cmp	r3, #127	; 0x7f
 800354e:	d002      	beq.n	8003556 <SHELL_Process+0x226>
 8003550:	7afb      	ldrb	r3, [r7, #11]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d17c      	bne.n	8003650 <SHELL_Process+0x320>
    {
        /* There must be at last one char */
        if (context->c_pos == 0)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 811e 	beq.w	800379e <SHELL_Process+0x46e>
        {
            return;
        }

        context->l_pos--;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003568:	3b01      	subs	r3, #1
 800356a:	b2da      	uxtb	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        context->c_pos--;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003578:	3b01      	subs	r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

        if (context->l_pos > context->c_pos)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800358e:	429a      	cmp	r2, r3
 8003590:	d951      	bls.n	8003636 <SHELL_Process+0x306>
        {
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003598:	461a      	mov	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	1d58      	adds	r0, r3, #5
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80035a6:	3301      	adds	r3, #1
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	1d59      	adds	r1, r3, #5
                    context->l_pos - context->c_pos);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80035b4:	461a      	mov	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80035bc:	1ad3      	subs	r3, r2, r3
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 80035be:	461a      	mov	r2, r3
 80035c0:	f006 fc72 	bl	8009ea8 <memmove>
            context->line[context->l_pos] = 0;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	2200      	movs	r2, #0
 80035d2:	715a      	strb	r2, [r3, #5]
            context->printf_data_func("\b%s  \b", &context->line[context->c_pos]);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 80035de:	4611      	mov	r1, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	440a      	add	r2, r1
 80035e4:	3205      	adds	r2, #5
 80035e6:	4611      	mov	r1, r2
 80035e8:	480a      	ldr	r0, [pc, #40]	; (8003614 <SHELL_Process+0x2e4>)
 80035ea:	4798      	blx	r3

            /* Reset position */
            for (i = context->c_pos; i <= context->l_pos; i++)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e017      	b.n	8003626 <SHELL_Process+0x2f6>
 80035f6:	bf00      	nop
 80035f8:	20000004 	.word	0x20000004
 80035fc:	0800ea04 	.word	0x0800ea04
 8003600:	0800ea10 	.word	0x0800ea10
 8003604:	0800ea28 	.word	0x0800ea28
 8003608:	200005a0 	.word	0x200005a0
 800360c:	0800ea4c 	.word	0x0800ea4c
 8003610:	0800ea50 	.word	0x0800ea50
 8003614:	0800ea54 	.word	0x0800ea54
            {
                context->printf_data_func("\b");
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361c:	4862      	ldr	r0, [pc, #392]	; (80037a8 <SHELL_Process+0x478>)
 800361e:	4798      	blx	r3
            for (i = context->c_pos; i <= context->l_pos; i++)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3301      	adds	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800362c:	461a      	mov	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4293      	cmp	r3, r2
 8003632:	ddf1      	ble.n	8003618 <SHELL_Process+0x2e8>
        else /* Normal backspace operation */
        {
            context->printf_data_func("\b \b");
            context->line[context->l_pos] = 0;
        }
        return;
 8003634:	e0b4      	b.n	80037a0 <SHELL_Process+0x470>
            context->printf_data_func("\b \b");
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363a:	485c      	ldr	r0, [pc, #368]	; (80037ac <SHELL_Process+0x47c>)
 800363c:	4798      	blx	r3
            context->line[context->l_pos] = 0;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003644:	461a      	mov	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	2200      	movs	r2, #0
 800364c:	715a      	strb	r2, [r3, #5]
        return;
 800364e:	e0a7      	b.n	80037a0 <SHELL_Process+0x470>
    else
    {
    }

    /* Input too long */
    if (context->l_pos >= (SHELL_BUFFER_SIZE - 1))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003656:	2b3e      	cmp	r3, #62	; 0x3e
 8003658:	d903      	bls.n	8003662 <SHELL_Process+0x332>
    {
        context->l_pos = 0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }

    /* Handle end of line, break */
    if ((ch == '\r') || (ch == '\n'))
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	2b0d      	cmp	r3, #13
 8003666:	d002      	beq.n	800366e <SHELL_Process+0x33e>
 8003668:	7afb      	ldrb	r3, [r7, #11]
 800366a:	2b0a      	cmp	r3, #10
 800366c:	d125      	bne.n	80036ba <SHELL_Process+0x38a>
    {
        context->printf_data_func("\r\n");
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003672:	484f      	ldr	r0, [pc, #316]	; (80037b0 <SHELL_Process+0x480>)
 8003674:	4798      	blx	r3
        ProcessCommand(context, context->line);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3305      	adds	r3, #5
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f8c1 	bl	8003804 <ProcessCommand>
        /* Reset all params */
        context->c_pos = context->l_pos = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        context->hist_current = 0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        context->printf_data_func(context->prompt);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	4610      	mov	r0, r2
 80036a8:	4798      	blx	r3
        memset(context->line, 0, sizeof(context->line));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3305      	adds	r3, #5
 80036ae:	2240      	movs	r2, #64	; 0x40
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f006 fc12 	bl	8009edc <memset>
        return;
 80036b8:	e072      	b.n	80037a0 <SHELL_Process+0x470>
    }

    /* Normal character */
    if (context->c_pos < context->l_pos)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d240      	bcs.n	800374c <SHELL_Process+0x41c>
    {
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80036d0:	3301      	adds	r3, #1
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	1d58      	adds	r0, r3, #5
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80036de:	461a      	mov	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	1d59      	adds	r1, r3, #5
                context->l_pos - context->c_pos);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80036f4:	1ad3      	subs	r3, r2, r3
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 80036f6:	461a      	mov	r2, r3
 80036f8:	f006 fbd6 	bl	8009ea8 <memmove>
        context->line[context->c_pos] = ch;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003702:	461a      	mov	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	7afa      	ldrb	r2, [r7, #11]
 800370a:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%s", &context->line[context->c_pos]);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8003716:	4611      	mov	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	440a      	add	r2, r1
 800371c:	3205      	adds	r2, #5
 800371e:	4611      	mov	r1, r2
 8003720:	4824      	ldr	r0, [pc, #144]	; (80037b4 <SHELL_Process+0x484>)
 8003722:	4798      	blx	r3
        /* Move the cursor to new position */
        for (i = context->c_pos; i < context->l_pos; i++)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e006      	b.n	800373c <SHELL_Process+0x40c>
        {
            context->printf_data_func("\b");
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003732:	481d      	ldr	r0, [pc, #116]	; (80037a8 <SHELL_Process+0x478>)
 8003734:	4798      	blx	r3
        for (i = context->c_pos; i < context->l_pos; i++)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3301      	adds	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4293      	cmp	r3, r2
 8003748:	dbf1      	blt.n	800372e <SHELL_Process+0x3fe>
 800374a:	e00d      	b.n	8003768 <SHELL_Process+0x438>
        }
    }
    else
    {
        context->line[context->l_pos] = ch;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	7afa      	ldrb	r2, [r7, #11]
 800375a:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%c", ch);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	7afa      	ldrb	r2, [r7, #11]
 8003762:	4611      	mov	r1, r2
 8003764:	4814      	ldr	r0, [pc, #80]	; (80037b8 <SHELL_Process+0x488>)
 8003766:	4798      	blx	r3
    }

    ch = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	72fb      	strb	r3, [r7, #11]
    context->l_pos++;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003772:	3301      	adds	r3, #1
 8003774:	b2da      	uxtb	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003782:	3301      	adds	r3, #1
 8003784:	b2da      	uxtb	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800378c:	e008      	b.n	80037a0 <SHELL_Process+0x470>
        return;
 800378e:	bf00      	nop
 8003790:	e006      	b.n	80037a0 <SHELL_Process+0x470>
        return;
 8003792:	bf00      	nop
 8003794:	e004      	b.n	80037a0 <SHELL_Process+0x470>
        return;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <SHELL_Process+0x470>
      return;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <SHELL_Process+0x470>
            return;
 800379e:	bf00      	nop

}
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	0800ea4c 	.word	0x0800ea4c
 80037ac:	0800ea5c 	.word	0x0800ea5c
 80037b0:	0800ea60 	.word	0x0800ea60
 80037b4:	0800ea64 	.word	0x0800ea64
 80037b8:	0800ea50 	.word	0x0800ea50

080037bc <HelpCommand>:

static int32_t HelpCommand(p_shell_context_t context, int32_t argc, char **argv)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]

    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	75fb      	strb	r3, [r7, #23]
 80037d0:	e00b      	b.n	80037ea <HelpCommand+0x2e>
    {
        context->printf_data_func(g_RegisteredCommands.CommandList[i]->pcHelpString);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	7dfa      	ldrb	r2, [r7, #23]
 80037d8:	4909      	ldr	r1, [pc, #36]	; (8003800 <HelpCommand+0x44>)
 80037da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80037de:	6852      	ldr	r2, [r2, #4]
 80037e0:	4610      	mov	r0, r2
 80037e2:	4798      	blx	r3
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++)
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	3301      	adds	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HelpCommand+0x44>)
 80037ec:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80037f0:	7dfa      	ldrb	r2, [r7, #23]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d3ed      	bcc.n	80037d2 <HelpCommand+0x16>
    }
    return 0;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	200004bc 	.word	0x200004bc

08003804 <ProcessCommand>:
//    context->exit = true;
//    return 0;
//}

static void ProcessCommand(p_shell_context_t context, const char *cmd)
{
 8003804:	b5b0      	push	{r4, r5, r7, lr}
 8003806:	b0c6      	sub	sp, #280	; 0x118
 8003808:	af00      	add	r7, sp, #0
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	6018      	str	r0, [r3, #0]
 800380e:	463b      	mov	r3, r7
 8003810:	6019      	str	r1, [r3, #0]
    static const shell_command_context_t *tmpCommand = NULL;
    static const char *tmpCommandString;
    int32_t argc;
    char *argv[SHELL_BUFFER_SIZE];
    uint8_t flag = 1;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    uint8_t tmpCommandLen;
    uint8_t tmpLen;
    uint8_t i = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    tmpLen = StrLen(cmd);
 800381e:	463b      	mov	r3, r7
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	f000 fa3b 	bl	8003c9c <StrLen>
 8003826:	4603      	mov	r3, r0
 8003828:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    argc = ParseLine(cmd, tmpLen, argv);
 800382c:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 8003830:	f107 020c 	add.w	r2, r7, #12
 8003834:	463b      	mov	r3, r7
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	f000 fa6c 	bl	8003d14 <ParseLine>
 800383c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    if ((tmpCommand == NULL) && (argc > 0))
 8003840:	4b8b      	ldr	r3, [pc, #556]	; (8003a70 <ProcessCommand+0x26c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d168      	bne.n	800391a <ProcessCommand+0x116>
 8003848:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800384c:	2b00      	cmp	r3, #0
 800384e:	dd64      	ble.n	800391a <ProcessCommand+0x116>
    {
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++)
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003856:	e057      	b.n	8003908 <ProcessCommand+0x104>
        {
            tmpCommand = g_RegisteredCommands.CommandList[i];
 8003858:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800385c:	4a85      	ldr	r2, [pc, #532]	; (8003a74 <ProcessCommand+0x270>)
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	4a83      	ldr	r2, [pc, #524]	; (8003a70 <ProcessCommand+0x26c>)
 8003864:	6013      	str	r3, [r2, #0]
            tmpCommandString = tmpCommand->pcCommand;
 8003866:	4b82      	ldr	r3, [pc, #520]	; (8003a70 <ProcessCommand+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a82      	ldr	r2, [pc, #520]	; (8003a78 <ProcessCommand+0x274>)
 800386e:	6013      	str	r3, [r2, #0]
            tmpCommandLen = StrLen(tmpCommandString);
 8003870:	4b81      	ldr	r3, [pc, #516]	; (8003a78 <ProcessCommand+0x274>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fa11 	bl	8003c9c <StrLen>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            /* Compare with space or end of string */
            if ((cmd[tmpCommandLen] == ' ') || (cmd[tmpCommandLen] == 0x00))
 8003880:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003884:	463a      	mov	r2, r7
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	4413      	add	r3, r2
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b20      	cmp	r3, #32
 800388e:	d007      	beq.n	80038a0 <ProcessCommand+0x9c>
 8003890:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003894:	463a      	mov	r2, r7
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	4413      	add	r3, r2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d12e      	bne.n	80038fe <ProcessCommand+0xfa>
            {
                if (StrCompare(tmpCommandString, argv[0], tmpCommandLen) == 0)
 80038a0:	4b75      	ldr	r3, [pc, #468]	; (8003a78 <ProcessCommand+0x274>)
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80038ae:	4619      	mov	r1, r3
 80038b0:	f000 fa0b 	bl	8003cca <StrCompare>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d121      	bne.n	80038fe <ProcessCommand+0xfa>
                {
                    if ((tmpCommand->cExpectedNumberOfParameters == 0) && (argc == 1))
 80038ba:	4b6d      	ldr	r3, [pc, #436]	; (8003a70 <ProcessCommand+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	7b1b      	ldrb	r3, [r3, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <ProcessCommand+0xd0>
 80038c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d103      	bne.n	80038d4 <ProcessCommand+0xd0>
                    {
                        flag = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    }
                    else
                    {
                        flag = 1;
                    }
                    break;
 80038d2:	e021      	b.n	8003918 <ProcessCommand+0x114>
                    else if (tmpCommand->cExpectedNumberOfParameters > 0)
 80038d4:	4b66      	ldr	r3, [pc, #408]	; (8003a70 <ProcessCommand+0x26c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	7b1b      	ldrb	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <ProcessCommand+0xf2>
                        if ((argc - 1) == tmpCommand->cExpectedNumberOfParameters)
 80038de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038e2:	3b01      	subs	r3, #1
 80038e4:	4a62      	ldr	r2, [pc, #392]	; (8003a70 <ProcessCommand+0x26c>)
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	7b12      	ldrb	r2, [r2, #12]
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d114      	bne.n	8003918 <ProcessCommand+0x114>
                            flag = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 80038f4:	e010      	b.n	8003918 <ProcessCommand+0x114>
                        flag = 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 80038fc:	e00c      	b.n	8003918 <ProcessCommand+0x114>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++)
 80038fe:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003902:	3301      	adds	r3, #1
 8003904:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003908:	4b5a      	ldr	r3, [pc, #360]	; (8003a74 <ProcessCommand+0x270>)
 800390a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800390e:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8003912:	429a      	cmp	r2, r3
 8003914:	d3a0      	bcc.n	8003858 <ProcessCommand+0x54>
 8003916:	e000      	b.n	800391a <ProcessCommand+0x116>
                    break;
 8003918:	bf00      	nop
                }
            }
        }
    }

    if ((tmpCommand != NULL) && (flag == 1U))
 800391a:	4b55      	ldr	r3, [pc, #340]	; (8003a70 <ProcessCommand+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <ProcessCommand+0x138>
 8003922:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003926:	2b01      	cmp	r3, #1
 8003928:	d108      	bne.n	800393c <ProcessCommand+0x138>
    {
        context->printf_data_func(
 800392a:	1d3b      	adds	r3, r7, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003930:	4852      	ldr	r0, [pc, #328]	; (8003a7c <ProcessCommand+0x278>)
 8003932:	4798      	blx	r3
            "\r\nIncorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
 8003934:	4b4e      	ldr	r3, [pc, #312]	; (8003a70 <ProcessCommand+0x26c>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
    {
        // context->printf_data_func(
        //     "\r\nCommand not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
    }
}
 800393a:	e093      	b.n	8003a64 <ProcessCommand+0x260>
    else if (tmpCommand != NULL)
 800393c:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <ProcessCommand+0x26c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 808c 	beq.w	8003a5e <ProcessCommand+0x25a>
        tmpLen = StrLen(cmd);
 8003946:	463b      	mov	r3, r7
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	f000 f9a7 	bl	8003c9c <StrLen>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        if (tmpLen != StrCompare(cmd, context->hist_buf[0], StrLen(cmd)))
 8003954:	f897 4115 	ldrb.w	r4, [r7, #277]	; 0x115
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f103 0558 	add.w	r5, r3, #88	; 0x58
 8003960:	463b      	mov	r3, r7
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	f000 f99a 	bl	8003c9c <StrLen>
 8003968:	4602      	mov	r2, r0
 800396a:	463b      	mov	r3, r7
 800396c:	4629      	mov	r1, r5
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	f000 f9ab 	bl	8003cca <StrCompare>
 8003974:	4603      	mov	r3, r0
 8003976:	429c      	cmp	r4, r3
 8003978:	d063      	beq.n	8003a42 <ProcessCommand+0x23e>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--)
 800397a:	2302      	movs	r3, #2
 800397c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003980:	e032      	b.n	80039e8 <ProcessCommand+0x1e4>
                memset(context->hist_buf[i], '\0', SHELL_BUFFER_SIZE);
 8003982:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003986:	1d3a      	adds	r2, r7, #4
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	3358      	adds	r3, #88	; 0x58
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	4413      	add	r3, r2
 8003990:	2240      	movs	r2, #64	; 0x40
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f006 faa1 	bl	8009edc <memset>
                tmpLen = StrLen(context->hist_buf[i - 1]);
 800399a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800399e:	3b01      	subs	r3, #1
 80039a0:	1d3a      	adds	r2, r7, #4
 80039a2:	019b      	lsls	r3, r3, #6
 80039a4:	3358      	adds	r3, #88	; 0x58
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	4413      	add	r3, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f976 	bl	8003c9c <StrLen>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
                StrCopy(context->hist_buf[i], context->hist_buf[i - 1], tmpLen);
 80039b6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80039ba:	1d3a      	adds	r2, r7, #4
 80039bc:	019b      	lsls	r3, r3, #6
 80039be:	3358      	adds	r3, #88	; 0x58
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	18d0      	adds	r0, r2, r3
 80039c4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80039c8:	3b01      	subs	r3, #1
 80039ca:	1d3a      	adds	r2, r7, #4
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	3358      	adds	r3, #88	; 0x58
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	4413      	add	r3, r2
 80039d4:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80039d8:	4619      	mov	r1, r3
 80039da:	f000 f93d 	bl	8003c58 <StrCopy>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--)
 80039de:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80039e2:	3b01      	subs	r3, #1
 80039e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80039e8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1c8      	bne.n	8003982 <ProcessCommand+0x17e>
            memset(context->hist_buf[0], '\0', SHELL_BUFFER_SIZE);
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3358      	adds	r3, #88	; 0x58
 80039f6:	2240      	movs	r2, #64	; 0x40
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f006 fa6e 	bl	8009edc <memset>
            tmpLen = StrLen(cmd);
 8003a00:	463b      	mov	r3, r7
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	f000 f94a 	bl	8003c9c <StrLen>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
            StrCopy(context->hist_buf[0], cmd, tmpLen);
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8003a16:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	f000 f91b 	bl	8003c58 <StrCopy>
            if (context->hist_count < SHELL_HIST_MAX)
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d809      	bhi.n	8003a42 <ProcessCommand+0x23e>
                context->hist_count++;
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a36:	3301      	adds	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        tmpCommand->pFuncCallBack(context, argc, argv);
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <ProcessCommand+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f107 020c 	add.w	r2, r7, #12
 8003a4c:	1d38      	adds	r0, r7, #4
 8003a4e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8003a52:	6800      	ldr	r0, [r0, #0]
 8003a54:	4798      	blx	r3
        tmpCommand = NULL;
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <ProcessCommand+0x26c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
}
 8003a5c:	e002      	b.n	8003a64 <ProcessCommand+0x260>
        tmpCommand = NULL;
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <ProcessCommand+0x26c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
}
 8003a64:	bf00      	nop
 8003a66:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200005a4 	.word	0x200005a4
 8003a74:	200004bc 	.word	0x200004bc
 8003a78:	200005a8 	.word	0x200005a8
 8003a7c:	0800ea68 	.word	0x0800ea68

08003a80 <GetHistoryCommand>:

static void GetHistoryCommand(p_shell_context_t context, uint8_t hist_pos)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint32_t tmp;

    if (context->hist_buf[0][0] == '\0')
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <GetHistoryCommand+0x20>
    {
        context->hist_current = 0;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        return;
 8003a9e:	e04c      	b.n	8003b3a <GetHistoryCommand+0xba>
    }
    if (hist_pos > SHELL_HIST_MAX)
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d901      	bls.n	8003aaa <GetHistoryCommand+0x2a>
    {
        hist_pos = SHELL_HIST_MAX - 1;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	70fb      	strb	r3, [r7, #3]
    }
    tmp = StrLen(context->line);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3305      	adds	r3, #5
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f8f4 	bl	8003c9c <StrLen>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	60bb      	str	r3, [r7, #8]
    /* Clear current if have */
    if (tmp > 0)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d014      	beq.n	8003ae8 <GetHistoryCommand+0x68>
    {
        memset(context->line, '\0', tmp);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3305      	adds	r3, #5
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f006 fa08 	bl	8009edc <memset>
        for (i = 0; i < tmp; i++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	e006      	b.n	8003ae0 <GetHistoryCommand+0x60>
        {
            context->printf_data_func("\b \b");
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad6:	481a      	ldr	r0, [pc, #104]	; (8003b40 <GetHistoryCommand+0xc0>)
 8003ad8:	4798      	blx	r3
        for (i = 0; i < tmp; i++)
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	3301      	adds	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d8f4      	bhi.n	8003ad2 <GetHistoryCommand+0x52>
        }
    }

    context->l_pos = StrLen(context->hist_buf[hist_pos]);
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	019b      	lsls	r3, r3, #6
 8003aec:	3358      	adds	r3, #88	; 0x58
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f8d2 	bl	8003c9c <StrLen>
 8003af8:	4603      	mov	r3, r0
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos = context->l_pos;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    StrCopy(context->line, context->hist_buf[hist_pos], context->l_pos);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	1d58      	adds	r0, r3, #5
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	3358      	adds	r3, #88	; 0x58
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	18d1      	adds	r1, r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003b22:	461a      	mov	r2, r3
 8003b24:	f000 f898 	bl	8003c58 <StrCopy>
    context->printf_data_func(context->hist_buf[hist_pos]);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	0192      	lsls	r2, r2, #6
 8003b30:	3258      	adds	r2, #88	; 0x58
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	440a      	add	r2, r1
 8003b36:	4610      	mov	r0, r2
 8003b38:	4798      	blx	r3
}
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	0800ea5c 	.word	0x0800ea5c

08003b44 <AutoComplete>:

static void AutoComplete(p_shell_context_t context)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
    int32_t len;
    int32_t minLen;
    uint8_t i = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75fb      	strb	r3, [r7, #23]
    const shell_command_context_t *tmpCommand = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
    const char *namePtr;
    const char *cmdName;

    minLen = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
    namePtr = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]

    if (!StrLen(context->line))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3305      	adds	r3, #5
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f89b 	bl	8003c9c <StrLen>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d069      	beq.n	8003c40 <AutoComplete+0xfc>
    {
        return;
    }
    context->printf_data_func("\r\n");
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	4835      	ldr	r0, [pc, #212]	; (8003c48 <AutoComplete+0x104>)
 8003b72:	4798      	blx	r3
    /* Empty tab, list all commands */
    if (context->line[0] == '\0')
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	795b      	ldrb	r3, [r3, #5]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <AutoComplete+0x44>
    {
        HelpCommand(context, 0, NULL);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2100      	movs	r1, #0
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff fe1b 	bl	80037bc <HelpCommand>
        return;
 8003b86:	e05c      	b.n	8003c42 <AutoComplete+0xfe>
    }
    /* Do auto complete */
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]
 8003b8c:	e03f      	b.n	8003c0e <AutoComplete+0xca>
    {
        tmpCommand = g_RegisteredCommands.CommandList[i];
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	4a2e      	ldr	r2, [pc, #184]	; (8003c4c <AutoComplete+0x108>)
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	60fb      	str	r3, [r7, #12]
        cmdName = tmpCommand->pcCommand;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60bb      	str	r3, [r7, #8]
        if (StrCompare(context->line, cmdName, StrLen(context->line)) == 0)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	1d5c      	adds	r4, r3, #5
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3305      	adds	r3, #5
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f878 	bl	8003c9c <StrLen>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 f889 	bl	8003cca <StrCompare>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d124      	bne.n	8003c08 <AutoComplete+0xc4>
        {
            if (minLen == 0)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <AutoComplete+0x98>
            {
                namePtr = cmdName;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	613b      	str	r3, [r7, #16]
                minLen = StrLen(namePtr);
 8003bc8:	6938      	ldr	r0, [r7, #16]
 8003bca:	f000 f867 	bl	8003c9c <StrLen>
 8003bce:	61b8      	str	r0, [r7, #24]
                /* Show possible matches */
                context->printf_data_func("%s\r\n", cmdName);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	481e      	ldr	r0, [pc, #120]	; (8003c50 <AutoComplete+0x10c>)
 8003bd8:	4798      	blx	r3
                continue;
 8003bda:	e015      	b.n	8003c08 <AutoComplete+0xc4>
            }
            len = StrCompare(namePtr, cmdName, StrLen(namePtr));
 8003bdc:	6938      	ldr	r0, [r7, #16]
 8003bde:	f000 f85d 	bl	8003c9c <StrLen>
 8003be2:	4603      	mov	r3, r0
 8003be4:	461a      	mov	r2, r3
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	6938      	ldr	r0, [r7, #16]
 8003bea:	f000 f86e 	bl	8003cca <StrCompare>
 8003bee:	61f8      	str	r0, [r7, #28]
            if (len < 0)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da02      	bge.n	8003bfc <AutoComplete+0xb8>
            {
                len = len * (-1);
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	425b      	negs	r3, r3
 8003bfa:	61fb      	str	r3, [r7, #28]
            }
            if (len < minLen)
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	da01      	bge.n	8003c08 <AutoComplete+0xc4>
            {
                minLen = len;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++)
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <AutoComplete+0x108>)
 8003c10:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003c14:	7dfa      	ldrb	r2, [r7, #23]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d3b9      	bcc.n	8003b8e <AutoComplete+0x4a>
            }
        }
    }
    /* Auto complete string */
    if (namePtr)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <AutoComplete+0xea>
    {
        StrCopy(context->line, namePtr, minLen);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3305      	adds	r3, #5
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	6939      	ldr	r1, [r7, #16]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f815 	bl	8003c58 <StrCopy>
    }
    context->printf_data_func("%s%s", context->prompt, context->line);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	3205      	adds	r2, #5
 8003c3a:	4806      	ldr	r0, [pc, #24]	; (8003c54 <AutoComplete+0x110>)
 8003c3c:	4798      	blx	r3
    return;
 8003c3e:	e000      	b.n	8003c42 <AutoComplete+0xfe>
        return;
 8003c40:	bf00      	nop
}
 8003c42:	3724      	adds	r7, #36	; 0x24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}
 8003c48:	0800ea60 	.word	0x0800ea60
 8003c4c:	200004bc 	.word	0x200004bc
 8003c50:	0800eac4 	.word	0x0800eac4
 8003c54:	0800eacc 	.word	0x0800eacc

08003c58 <StrCopy>:

static char *StrCopy(char *dest, const char *src, int32_t count)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
    char *ret = dest;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	613b      	str	r3, [r7, #16]
    int32_t i = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]

    for (i = 0; i < count; i++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e00a      	b.n	8003c88 <StrCopy+0x30>
    {
        dest[i] = src[i];
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	441a      	add	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	440b      	add	r3, r1
 8003c7e:	7812      	ldrb	r2, [r2, #0]
 8003c80:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	3301      	adds	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	dbf0      	blt.n	8003c72 <StrCopy+0x1a>
    }

    return ret;
 8003c90:	693b      	ldr	r3, [r7, #16]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <StrLen>:

static int32_t StrLen(const char *str)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
    int32_t i = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]

    while (*str)
 8003ca8:	e005      	b.n	8003cb6 <StrLen+0x1a>
    {
        str++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3301      	adds	r3, #1
 8003cae:	607b      	str	r3, [r7, #4]
        i++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
    while (*str)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f5      	bne.n	8003caa <StrLen+0xe>
    }
    return i;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <StrCompare>:

static int32_t StrCompare(const char *str1, const char *str2, int32_t count)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
    while (count--)
 8003cd6:	e012      	b.n	8003cfe <StrCompare+0x34>
    {
        if (*str1++ != *str2++)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	60fa      	str	r2, [r7, #12]
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1c59      	adds	r1, r3, #1
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d008      	beq.n	8003cfe <StrCompare+0x34>
        {
            return *(unsigned char *)(str1 - 1) - *(unsigned char *)(str2 - 1);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	e005      	b.n	8003d0a <StrCompare+0x40>
    while (count--)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	1e5a      	subs	r2, r3, #1
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e7      	bne.n	8003cd8 <StrCompare+0xe>
        }
    }
    return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <ParseLine>:

static int32_t ParseLine(const char *cmd, uint32_t len, char *argv[SHELL_MAX_ARGS])
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
    uint32_t argc;
    char *p;
    uint32_t position;

    /* Init params */
    memset(g_paramBuffer, '\0', len + 1);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	3301      	adds	r3, #1
 8003d24:	461a      	mov	r2, r3
 8003d26:	2100      	movs	r1, #0
 8003d28:	4838      	ldr	r0, [pc, #224]	; (8003e0c <ParseLine+0xf8>)
 8003d2a:	f006 f8d7 	bl	8009edc <memset>
    StrCopy(g_paramBuffer, cmd, len);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	461a      	mov	r2, r3
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	4835      	ldr	r0, [pc, #212]	; (8003e0c <ParseLine+0xf8>)
 8003d36:	f7ff ff8f 	bl	8003c58 <StrCopy>

    p = g_paramBuffer;
 8003d3a:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <ParseLine+0xf8>)
 8003d3c:	61bb      	str	r3, [r7, #24]
    position = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
    argc = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]

    while (position < len)
 8003d46:	e058      	b.n	8003dfa <ParseLine+0xe6>
    {
        /* Skip all blanks */
        while (((char)(*p) == ' ') && (position < len))
        {
            *p = '\0';
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
            p++;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	3301      	adds	r3, #1
 8003d52:	61bb      	str	r3, [r7, #24]
            position++;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	3301      	adds	r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
        while (((char)(*p) == ' ') && (position < len))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d103      	bne.n	8003d6a <ParseLine+0x56>
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d3ee      	bcc.n	8003d48 <ParseLine+0x34>
        }
        /* Process begin of a string */
        if (*p == '"')
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b22      	cmp	r3, #34	; 0x22
 8003d70:	d127      	bne.n	8003dc2 <ParseLine+0xae>
        {
            p++;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61bb      	str	r3, [r7, #24]
            position++;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
            argv[argc] = p;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	601a      	str	r2, [r3, #0]
            argc++;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
            /* Skip this string */
            while ((*p != '"') && (position < len))
 8003d90:	e005      	b.n	8003d9e <ParseLine+0x8a>
            {
                p++;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61bb      	str	r3, [r7, #24]
                position++;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
            while ((*p != '"') && (position < len))
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b22      	cmp	r3, #34	; 0x22
 8003da4:	d003      	beq.n	8003dae <ParseLine+0x9a>
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d3f1      	bcc.n	8003d92 <ParseLine+0x7e>
            }
            /* Skip '"' */
            *p = '\0';
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
            p++;
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
            position++;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e01b      	b.n	8003dfa <ParseLine+0xe6>
        }
        else /* Normal char */
        {
            argv[argc] = p;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	601a      	str	r2, [r3, #0]
            argc++;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len))
 8003dd4:	e005      	b.n	8003de2 <ParseLine+0xce>
            {
                p++;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
                position++;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3301      	adds	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len))
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d007      	beq.n	8003dfa <ParseLine+0xe6>
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b09      	cmp	r3, #9
 8003df0:	d003      	beq.n	8003dfa <ParseLine+0xe6>
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d3ed      	bcc.n	8003dd6 <ParseLine+0xc2>
    while (position < len)
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d3ab      	bcc.n	8003d5a <ParseLine+0x46>
            }
        }
    }
    return argc;
 8003e02:	69fb      	ldr	r3, [r7, #28]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000560 	.word	0x20000560

08003e10 <SHELL_RegisterCommand>:

int32_t SHELL_RegisterCommand(const shell_command_context_t *command_context)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
    int32_t result = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]

    /* If have room  in command list */
    if (g_RegisteredCommands.numberOfCommandInList < SHELL_MAX_CMD)
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <SHELL_RegisterCommand+0x44>)
 8003e1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003e22:	2b27      	cmp	r3, #39	; 0x27
 8003e24:	d80d      	bhi.n	8003e42 <SHELL_RegisterCommand+0x32>
    {
        g_RegisteredCommands.CommandList[g_RegisteredCommands.numberOfCommandInList++] = command_context;
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <SHELL_RegisterCommand+0x44>)
 8003e28:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	b2d1      	uxtb	r1, r2
 8003e30:	4a08      	ldr	r2, [pc, #32]	; (8003e54 <SHELL_RegisterCommand+0x44>)
 8003e32:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
 8003e36:	4619      	mov	r1, r3
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <SHELL_RegisterCommand+0x44>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003e40:	e002      	b.n	8003e48 <SHELL_RegisterCommand+0x38>
    }
    else
    {
        result = -1;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	60fb      	str	r3, [r7, #12]
    }
    return result;
 8003e48:	68fb      	ldr	r3, [r7, #12]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	200004bc 	.word	0x200004bc

08003e58 <GetChar>:

static uint8_t GetChar(p_shell_context_t context)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    uint8_t ch;

#if SHELL_USE_FILE_STREAM
    ch = fgetc(context->STDIN);
#else
    context->recv_data_func(&ch, 1U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e64:	f107 020f 	add.w	r2, r7, #15
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4798      	blx	r3
#endif
    return ch;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <vsm_rise_compute>:
int32_t vsm_rise_compute(int32_t x,
                        int32_t x1,
                        int32_t y1,
                        int32_t x2,
                        int32_t y2)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]

   int32_t compute_value = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
/*%C y = (x - x1) * (y2 -y1) / (x2-x1) + y1     */
/*%C Rise compute       */
   compute_value = (x - x1) * (y2 - y1);
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	6a39      	ldr	r1, [r7, #32]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	1a8a      	subs	r2, r1, r2
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	617b      	str	r3, [r7, #20]
   compute_value = compute_value  / (x2 - x1);
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
   compute_value = compute_value + y1;
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

/*%C Saturation       */
   if (y2 < y1)
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	da06      	bge.n	8003ec8 <vsm_rise_compute+0x50>
   {
      compute_value = saturation(compute_value,
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a39      	ldr	r1, [r7, #32]
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f000 f80d 	bl	8003ede <saturation>
 8003ec4:	6178      	str	r0, [r7, #20]
 8003ec6:	e005      	b.n	8003ed4 <vsm_rise_compute+0x5c>
                           y2,
                           y1);
   }
   else
   {
      compute_value = saturation(compute_value,
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	6978      	ldr	r0, [r7, #20]
 8003ece:	f000 f806 	bl	8003ede <saturation>
 8003ed2:	6178      	str	r0, [r7, #20]
                           y1,
                           y2);
   }

   return(compute_value);
 8003ed4:	697b      	ldr	r3, [r7, #20]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <saturation>:
 * @return     The limited value
 */
int32_t saturation(int32_t value,
                   int32_t min_value,
                   int32_t max_value)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b087      	sub	sp, #28
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]

   int32_t ret = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]

   if (value > max_value)
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	dd02      	ble.n	8003efc <saturation+0x1e>
    {
       ret = max_value;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e008      	b.n	8003f0e <saturation+0x30>
    }
   else if (value < min_value)
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	da02      	bge.n	8003f0a <saturation+0x2c>
    {
       ret = min_value;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e001      	b.n	8003f0e <saturation+0x30>
    }
   else
    {
       ret = value;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	617b      	str	r3, [r7, #20]
    }

   return(ret);
 8003f0e:	697b      	ldr	r3, [r7, #20]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f24:	2003      	movs	r0, #3
 8003f26:	f000 fd3b 	bl	80049a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f2a:	200f      	movs	r0, #15
 8003f2c:	f000 f80e 	bl	8003f4c <HAL_InitTick>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	71fb      	strb	r3, [r7, #7]
 8003f3a:	e001      	b.n	8003f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f3c:	f7fd fe0c 	bl	8001b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f40:	79fb      	ldrb	r3, [r7, #7]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f58:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_InitTick+0x68>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d022      	beq.n	8003fa6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f60:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <HAL_InitTick+0x6c>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_InitTick+0x68>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fd48 	bl	8004a0a <HAL_SYSTICK_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b0f      	cmp	r3, #15
 8003f84:	d809      	bhi.n	8003f9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f86:	2200      	movs	r2, #0
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8e:	f000 fd12 	bl	80049b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <HAL_InitTick+0x70>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	e007      	b.n	8003faa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	e004      	b.n	8003faa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	e001      	b.n	8003faa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	2000000c 	.word	0x2000000c
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	20000008 	.word	0x20000008

08003fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_IncTick+0x1c>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_IncTick+0x20>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4413      	add	r3, r2
 8003fce:	4a03      	ldr	r2, [pc, #12]	; (8003fdc <HAL_IncTick+0x1c>)
 8003fd0:	6013      	str	r3, [r2, #0]
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20002294 	.word	0x20002294
 8003fe0:	2000000c 	.word	0x2000000c

08003fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fe8:	4b02      	ldr	r3, [pc, #8]	; (8003ff4 <HAL_GetTick+0x10>)
 8003fea:	681b      	ldr	r3, [r3, #0]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr
 8003ff4:	20002294 	.word	0x20002294

08003ff8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08e      	sub	sp, #56	; 0x38
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e127      	b.n	8004268 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d115      	bne.n	8004052 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004034:	4b8e      	ldr	r3, [pc, #568]	; (8004270 <HAL_ADC_Init+0x278>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4a8d      	ldr	r2, [pc, #564]	; (8004270 <HAL_ADC_Init+0x278>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6213      	str	r3, [r2, #32]
 8004040:	4b8b      	ldr	r3, [pc, #556]	; (8004270 <HAL_ADC_Init+0x278>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7fd fdb7 	bl	8001bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 80ff 	bne.w	800425e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004068:	f023 0302 	bic.w	r3, r3, #2
 800406c:	f043 0202 	orr.w	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8004074:	4b7f      	ldr	r3, [pc, #508]	; (8004274 <HAL_ADC_Init+0x27c>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	497c      	ldr	r1, [pc, #496]	; (8004274 <HAL_ADC_Init+0x27c>)
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800408e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004096:	4619      	mov	r1, r3
 8004098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800409c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80040b2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80040b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040c0:	4619      	mov	r1, r3
 80040c2:	2302      	movs	r3, #2
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80040da:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80040dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040de:	4313      	orrs	r3, r2
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d007      	beq.n	80040fa <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80040f2:	4313      	orrs	r3, r2
 80040f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f6:	4313      	orrs	r3, r2
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d04f      	beq.n	80041a8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410e:	4313      	orrs	r3, r2
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800411a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6912      	ldr	r2, [r2, #16]
 8004120:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004124:	d003      	beq.n	800412e <HAL_ADC_Init+0x136>
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6912      	ldr	r2, [r2, #16]
 800412a:	2a01      	cmp	r2, #1
 800412c:	d102      	bne.n	8004134 <HAL_ADC_Init+0x13c>
 800412e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004132:	e000      	b.n	8004136 <HAL_ADC_Init+0x13e>
 8004134:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8004136:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413a:	4313      	orrs	r3, r2
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d125      	bne.n	8004194 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d114      	bne.n	800417c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	3b01      	subs	r3, #1
 8004158:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800415c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	fa92 f2a2 	rbit	r2, r2
 8004164:	617a      	str	r2, [r7, #20]
  return result;
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	fab2 f282 	clz	r2, r2
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	4093      	lsls	r3, r2
 8004170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004176:	4313      	orrs	r3, r2
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
 800417a:	e00b      	b.n	8004194 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	f043 0201 	orr.w	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	4b37      	ldr	r3, [pc, #220]	; (8004278 <HAL_ADC_Init+0x280>)
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	4b33      	ldr	r3, [pc, #204]	; (800427c <HAL_ADC_Init+0x284>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c4:	d003      	beq.n	80041ce <HAL_ADC_Init+0x1d6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d119      	bne.n	8004202 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	3b01      	subs	r3, #1
 80041de:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80041e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	fa92 f2a2 	rbit	r2, r2
 80041ea:	60fa      	str	r2, [r7, #12]
  return result;
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	fab2 f282 	clz	r2, r2
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	fa03 f202 	lsl.w	r2, r3, r2
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004200:	e007      	b.n	8004212 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_ADC_Init+0x288>)
 800421a:	4013      	ands	r3, r2
 800421c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421e:	429a      	cmp	r2, r3
 8004220:	d10b      	bne.n	800423a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	f023 0303 	bic.w	r3, r3, #3
 8004230:	f043 0201 	orr.w	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	64da      	str	r2, [r3, #76]	; 0x4c
 8004238:	e014      	b.n	8004264 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	f023 0312 	bic.w	r3, r3, #18
 8004242:	f043 0210 	orr.w	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424e:	f043 0201 	orr.w	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800425c:	e002      	b.n	8004264 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004268:	4618      	mov	r0, r3
 800426a:	3738      	adds	r7, #56	; 0x38
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40023800 	.word	0x40023800
 8004274:	40012700 	.word	0x40012700
 8004278:	fcfc16ff 	.word	0xfcfc16ff
 800427c:	c0fff18d 	.word	0xc0fff18d
 8004280:	bf80fffe 	.word	0xbf80fffe

08004284 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_Start_DMA+0x1e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e074      	b.n	800438c <HAL_ADC_Start_DMA+0x108>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f9da 	bl	8004664 <ADC_Enable>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d167      	bne.n	800438a <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d106      	bne.n	8004308 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	f023 0206 	bic.w	r2, r3, #6
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	651a      	str	r2, [r3, #80]	; 0x50
 8004306:	e002      	b.n	800430e <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <HAL_ADC_Start_DMA+0x110>)
 800431c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <HAL_ADC_Start_DMA+0x114>)
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	4a1c      	ldr	r2, [pc, #112]	; (800439c <HAL_ADC_Start_DMA+0x118>)
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004336:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004346:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004356:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3358      	adds	r3, #88	; 0x58
 8004362:	4619      	mov	r1, r3
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f000 fbb4 	bl	8004ad4 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d107      	bne.n	800438a <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004388:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800438a:	7dfb      	ldrb	r3, [r7, #23]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	08004711 	.word	0x08004711
 8004398:	080047b9 	.word	0x080047b9
 800439c:	080047d5 	.word	0x080047d5

080043a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr

080043b2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x20>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e134      	b.n	800464e <HAL_ADC_ConfigChannel+0x28a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b06      	cmp	r3, #6
 80043f2:	d81c      	bhi.n	800442e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	3b05      	subs	r3, #5
 8004406:	221f      	movs	r2, #31
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	4019      	ands	r1, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	3b05      	subs	r3, #5
 8004420:	fa00 f203 	lsl.w	r2, r0, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	641a      	str	r2, [r3, #64]	; 0x40
 800442c:	e07e      	b.n	800452c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d81c      	bhi.n	8004470 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	3b23      	subs	r3, #35	; 0x23
 8004448:	221f      	movs	r2, #31
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	4019      	ands	r1, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	3b23      	subs	r3, #35	; 0x23
 8004462:	fa00 f203 	lsl.w	r2, r0, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	63da      	str	r2, [r3, #60]	; 0x3c
 800446e:	e05d      	b.n	800452c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b12      	cmp	r3, #18
 8004476:	d81c      	bhi.n	80044b2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	3b41      	subs	r3, #65	; 0x41
 800448a:	221f      	movs	r2, #31
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	4019      	ands	r1, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	3b41      	subs	r3, #65	; 0x41
 80044a4:	fa00 f203 	lsl.w	r2, r0, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
 80044b0:	e03c      	b.n	800452c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b18      	cmp	r3, #24
 80044b8:	d81c      	bhi.n	80044f4 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	3b5f      	subs	r3, #95	; 0x5f
 80044cc:	221f      	movs	r2, #31
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	4019      	ands	r1, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	3b5f      	subs	r3, #95	; 0x5f
 80044e6:	fa00 f203 	lsl.w	r2, r0, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34
 80044f2:	e01b      	b.n	800452c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	3b7d      	subs	r3, #125	; 0x7d
 8004506:	221f      	movs	r2, #31
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	4019      	ands	r1, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	3b7d      	subs	r3, #125	; 0x7d
 8004520:	fa00 f203 	lsl.w	r2, r0, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b09      	cmp	r3, #9
 8004532:	d81a      	bhi.n	800456a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6959      	ldr	r1, [r3, #20]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	2207      	movs	r2, #7
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	4019      	ands	r1, r3
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6898      	ldr	r0, [r3, #8]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	fa00 f203 	lsl.w	r2, r0, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	615a      	str	r2, [r3, #20]
 8004568:	e042      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b13      	cmp	r3, #19
 8004570:	d81c      	bhi.n	80045ac <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6919      	ldr	r1, [r3, #16]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	3b1e      	subs	r3, #30
 8004584:	2207      	movs	r2, #7
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	4019      	ands	r1, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6898      	ldr	r0, [r3, #8]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4413      	add	r3, r2
 800459c:	3b1e      	subs	r3, #30
 800459e:	fa00 f203 	lsl.w	r2, r0, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	611a      	str	r2, [r3, #16]
 80045aa:	e021      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b1a      	cmp	r3, #26
 80045b2:	d81c      	bhi.n	80045ee <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68d9      	ldr	r1, [r3, #12]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	3b3c      	subs	r3, #60	; 0x3c
 80045c6:	2207      	movs	r2, #7
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	4019      	ands	r1, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6898      	ldr	r0, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	3b3c      	subs	r3, #60	; 0x3c
 80045e0:	fa00 f203 	lsl.w	r2, r0, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	60da      	str	r2, [r3, #12]
 80045ec:	e000      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80045ee:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d003      	beq.n	8004600 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045fc:	2b11      	cmp	r3, #17
 80045fe:	d121      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8004600:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_ADC_ConfigChannel+0x294>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11b      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_ADC_ConfigChannel+0x294>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a11      	ldr	r2, [pc, #68]	; (8004658 <HAL_ADC_ConfigChannel+0x294>)
 8004612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004616:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b10      	cmp	r3, #16
 800461e:	d111      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004620:	4b0e      	ldr	r3, [pc, #56]	; (800465c <HAL_ADC_ConfigChannel+0x298>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0e      	ldr	r2, [pc, #56]	; (8004660 <HAL_ADC_ConfigChannel+0x29c>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	0c9a      	lsrs	r2, r3, #18
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8004636:	e002      	b.n	800463e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3b01      	subs	r3, #1
 800463c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f9      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800464c:	7bfb      	ldrb	r3, [r7, #15]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	40012700 	.word	0x40012700
 800465c:	20000000 	.word	0x20000000
 8004660:	431bde83 	.word	0x431bde83

08004664 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d03c      	beq.n	80046fc <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <ADC_Enable+0xa4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1d      	ldr	r2, [pc, #116]	; (800470c <ADC_Enable+0xa8>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	0c9a      	lsrs	r2, r3, #18
 800469e:	4613      	mov	r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	4413      	add	r3, r2
 80046a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80046a6:	e002      	b.n	80046ae <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f9      	bne.n	80046a8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80046b4:	f7ff fc96 	bl	8003fe4 <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046ba:	e018      	b.n	80046ee <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80046bc:	f7ff fc92 	bl	8003fe4 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d911      	bls.n	80046ee <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	f043 0210 	orr.w	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e007      	b.n	80046fe <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d1df      	bne.n	80046bc <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000000 	.word	0x20000000
 800470c:	431bde83 	.word	0x431bde83

08004710 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004726:	2b00      	cmp	r3, #0
 8004728:	d13d      	bne.n	80047a6 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d12c      	bne.n	800479e <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800474a:	2b00      	cmp	r3, #0
 800474c:	d127      	bne.n	800479e <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004758:	2b00      	cmp	r3, #0
 800475a:	d006      	beq.n	800476a <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004766:	2b00      	cmp	r3, #0
 8004768:	d119      	bne.n	800479e <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0220 	bic.w	r2, r2, #32
 8004778:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d105      	bne.n	800479e <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7fd fde4 	bl	800236c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80047a4:	e004      	b.n	80047b0 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4798      	blx	r3
}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff fdea 	bl	80043a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	f043 0204 	orr.w	r2, r3, #4
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fdd9 	bl	80043b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <__NVIC_SetPriorityGrouping+0x44>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004824:	4013      	ands	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483a:	4a04      	ldr	r2, [pc, #16]	; (800484c <__NVIC_SetPriorityGrouping+0x44>)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	60d3      	str	r3, [r2, #12]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <__NVIC_GetPriorityGrouping+0x18>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f003 0307 	and.w	r3, r3, #7
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db0b      	blt.n	8004896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	f003 021f 	and.w	r2, r3, #31
 8004884:	4906      	ldr	r1, [pc, #24]	; (80048a0 <__NVIC_EnableIRQ+0x34>)
 8004886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2001      	movs	r0, #1
 800488e:	fa00 f202 	lsl.w	r2, r0, r2
 8004892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	e000e100 	.word	0xe000e100

080048a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	6039      	str	r1, [r7, #0]
 80048ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	db0a      	blt.n	80048ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	490c      	ldr	r1, [pc, #48]	; (80048f0 <__NVIC_SetPriority+0x4c>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	0112      	lsls	r2, r2, #4
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	440b      	add	r3, r1
 80048c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048cc:	e00a      	b.n	80048e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	4908      	ldr	r1, [pc, #32]	; (80048f4 <__NVIC_SetPriority+0x50>)
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	3b04      	subs	r3, #4
 80048dc:	0112      	lsls	r2, r2, #4
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	440b      	add	r3, r1
 80048e2:	761a      	strb	r2, [r3, #24]
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000e100 	.word	0xe000e100
 80048f4:	e000ed00 	.word	0xe000ed00

080048f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f1c3 0307 	rsb	r3, r3, #7
 8004912:	2b04      	cmp	r3, #4
 8004914:	bf28      	it	cs
 8004916:	2304      	movcs	r3, #4
 8004918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3304      	adds	r3, #4
 800491e:	2b06      	cmp	r3, #6
 8004920:	d902      	bls.n	8004928 <NVIC_EncodePriority+0x30>
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3b03      	subs	r3, #3
 8004926:	e000      	b.n	800492a <NVIC_EncodePriority+0x32>
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43da      	mvns	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	401a      	ands	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004940:	f04f 31ff 	mov.w	r1, #4294967295
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	43d9      	mvns	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004950:	4313      	orrs	r3, r2
         );
}
 8004952:	4618      	mov	r0, r3
 8004954:	3724      	adds	r7, #36	; 0x24
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496c:	d301      	bcc.n	8004972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800496e:	2301      	movs	r3, #1
 8004970:	e00f      	b.n	8004992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004972:	4a0a      	ldr	r2, [pc, #40]	; (800499c <SysTick_Config+0x40>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800497a:	210f      	movs	r1, #15
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	f7ff ff90 	bl	80048a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <SysTick_Config+0x40>)
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800498a:	4b04      	ldr	r3, [pc, #16]	; (800499c <SysTick_Config+0x40>)
 800498c:	2207      	movs	r2, #7
 800498e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	e000e010 	.word	0xe000e010

080049a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff2d 	bl	8004808 <__NVIC_SetPriorityGrouping>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	4603      	mov	r3, r0
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049c8:	f7ff ff42 	bl	8004850 <__NVIC_GetPriorityGrouping>
 80049cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	6978      	ldr	r0, [r7, #20]
 80049d4:	f7ff ff90 	bl	80048f8 <NVIC_EncodePriority>
 80049d8:	4602      	mov	r2, r0
 80049da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff5f 	bl	80048a4 <__NVIC_SetPriority>
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	4603      	mov	r3, r0
 80049f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff35 	bl	800486c <__NVIC_EnableIRQ>
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffa2 	bl	800495c <SysTick_Config>
 8004a18:	4603      	mov	r3, r0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e043      	b.n	8004abe <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <HAL_DMA_Init+0xa4>)
 8004a3e:	4413      	add	r3, r2
 8004a40:	4a22      	ldr	r2, [pc, #136]	; (8004acc <HAL_DMA_Init+0xa8>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_DMA_Init+0xac>)
 8004a52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	bffd9ff8 	.word	0xbffd9ff8
 8004acc:	cccccccd 	.word	0xcccccccd
 8004ad0:	40026000 	.word	0x40026000

08004ad4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_DMA_Start_IT+0x20>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e04b      	b.n	8004b8c <HAL_DMA_Start_IT+0xb8>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d13a      	bne.n	8004b7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f921 	bl	8004d74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 020e 	orr.w	r2, r2, #14
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e00f      	b.n	8004b6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0204 	bic.w	r2, r2, #4
 8004b5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 020a 	orr.w	r2, r2, #10
 8004b6a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e005      	b.n	8004b8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
 8004b88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d005      	beq.n	8004bb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	e029      	b.n	8004c0c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 020e 	bic.w	r2, r2, #14
 8004bc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	f003 021c 	and.w	r2, r3, #28
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bea:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4798      	blx	r3
    }
  }
  return status;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f003 031c 	and.w	r3, r3, #28
 8004c36:	2204      	movs	r2, #4
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d026      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x7a>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d021      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d107      	bne.n	8004c6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0204 	bic.w	r2, r2, #4
 8004c68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f003 021c 	and.w	r2, r3, #28
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	2104      	movs	r1, #4
 8004c78:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d071      	beq.n	8004d6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004c8e:	e06c      	b.n	8004d6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f003 031c 	and.w	r3, r3, #28
 8004c98:	2202      	movs	r2, #2
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d02e      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xec>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d029      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 020a 	bic.w	r2, r2, #10
 8004cca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	f003 021c 	and.w	r2, r3, #28
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	2102      	movs	r1, #2
 8004ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d038      	beq.n	8004d6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d00:	e033      	b.n	8004d6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f003 031c 	and.w	r3, r3, #28
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d02a      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x156>
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d025      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 020e 	bic.w	r2, r2, #14
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	f003 021c 	and.w	r2, r3, #28
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
}
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f003 021c 	and.w	r2, r3, #28
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	2101      	movs	r1, #1
 8004d90:	fa01 f202 	lsl.w	r2, r1, r2
 8004d94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d108      	bne.n	8004db8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004db6:	e007      	b.n	8004dc8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]
}
 8004dc8:	bf00      	nop
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
	...

08004dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004dea:	e154      	b.n	8005096 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	2101      	movs	r1, #1
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	fa01 f303 	lsl.w	r3, r1, r3
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8146 	beq.w	8005090 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d00b      	beq.n	8004e24 <HAL_GPIO_Init+0x50>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d007      	beq.n	8004e24 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e18:	2b11      	cmp	r3, #17
 8004e1a:	d003      	beq.n	8004e24 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b12      	cmp	r3, #18
 8004e22:	d130      	bne.n	8004e86 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	2203      	movs	r2, #3
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43db      	mvns	r3, r3
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4013      	ands	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	f003 0201 	and.w	r2, r3, #1
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	2203      	movs	r2, #3
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_Init+0xf2>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b12      	cmp	r3, #18
 8004ec4:	d123      	bne.n	8004f0e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	08da      	lsrs	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3208      	adds	r2, #8
 8004ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	220f      	movs	r2, #15
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	08da      	lsrs	r2, r3, #3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3208      	adds	r2, #8
 8004f08:	6939      	ldr	r1, [r7, #16]
 8004f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	2203      	movs	r2, #3
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 0203 	and.w	r2, r3, #3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80a0 	beq.w	8005090 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f50:	4b58      	ldr	r3, [pc, #352]	; (80050b4 <HAL_GPIO_Init+0x2e0>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4a57      	ldr	r2, [pc, #348]	; (80050b4 <HAL_GPIO_Init+0x2e0>)
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	6213      	str	r3, [r2, #32]
 8004f5c:	4b55      	ldr	r3, [pc, #340]	; (80050b4 <HAL_GPIO_Init+0x2e0>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f68:	4a53      	ldr	r2, [pc, #332]	; (80050b8 <HAL_GPIO_Init+0x2e4>)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	089b      	lsrs	r3, r3, #2
 8004f6e:	3302      	adds	r3, #2
 8004f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	220f      	movs	r2, #15
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a4b      	ldr	r2, [pc, #300]	; (80050bc <HAL_GPIO_Init+0x2e8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d019      	beq.n	8004fc8 <HAL_GPIO_Init+0x1f4>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a4a      	ldr	r2, [pc, #296]	; (80050c0 <HAL_GPIO_Init+0x2ec>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <HAL_GPIO_Init+0x1f0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a49      	ldr	r2, [pc, #292]	; (80050c4 <HAL_GPIO_Init+0x2f0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00d      	beq.n	8004fc0 <HAL_GPIO_Init+0x1ec>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a48      	ldr	r2, [pc, #288]	; (80050c8 <HAL_GPIO_Init+0x2f4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d007      	beq.n	8004fbc <HAL_GPIO_Init+0x1e8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a47      	ldr	r2, [pc, #284]	; (80050cc <HAL_GPIO_Init+0x2f8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <HAL_GPIO_Init+0x1e4>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	e008      	b.n	8004fca <HAL_GPIO_Init+0x1f6>
 8004fb8:	2305      	movs	r3, #5
 8004fba:	e006      	b.n	8004fca <HAL_GPIO_Init+0x1f6>
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e004      	b.n	8004fca <HAL_GPIO_Init+0x1f6>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e002      	b.n	8004fca <HAL_GPIO_Init+0x1f6>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_GPIO_Init+0x1f6>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	f002 0203 	and.w	r2, r2, #3
 8004fd0:	0092      	lsls	r2, r2, #2
 8004fd2:	4093      	lsls	r3, r2
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004fda:	4937      	ldr	r1, [pc, #220]	; (80050b8 <HAL_GPIO_Init+0x2e4>)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fe8:	4b39      	ldr	r3, [pc, #228]	; (80050d0 <HAL_GPIO_Init+0x2fc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800500c:	4a30      	ldr	r2, [pc, #192]	; (80050d0 <HAL_GPIO_Init+0x2fc>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005012:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <HAL_GPIO_Init+0x2fc>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	43db      	mvns	r3, r3
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4013      	ands	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005036:	4a26      	ldr	r2, [pc, #152]	; (80050d0 <HAL_GPIO_Init+0x2fc>)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800503c:	4b24      	ldr	r3, [pc, #144]	; (80050d0 <HAL_GPIO_Init+0x2fc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	43db      	mvns	r3, r3
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4013      	ands	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_GPIO_Init+0x2fc>)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <HAL_GPIO_Init+0x2fc>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	43db      	mvns	r3, r3
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4013      	ands	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800508a:	4a11      	ldr	r2, [pc, #68]	; (80050d0 <HAL_GPIO_Init+0x2fc>)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3301      	adds	r3, #1
 8005094:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f47f aea3 	bne.w	8004dec <HAL_GPIO_Init+0x18>
  }
}
 80050a6:	bf00      	nop
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40020000 	.word	0x40020000
 80050c0:	40020400 	.word	0x40020400
 80050c4:	40020800 	.word	0x40020800
 80050c8:	40020c00 	.word	0x40020c00
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40010400 	.word	0x40010400

080050d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	887b      	ldrh	r3, [r7, #2]
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e001      	b.n	80050f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	807b      	strh	r3, [r7, #2]
 800510e:	4613      	mov	r3, r2
 8005110:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005112:	787b      	ldrb	r3, [r7, #1]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005118:	887a      	ldrh	r2, [r7, #2]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800511e:	e003      	b.n	8005128 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005120:	887b      	ldrh	r3, [r7, #2]
 8005122:	041a      	lsls	r2, r3, #16
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	619a      	str	r2, [r3, #24]
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
	...

08005134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d006      	beq.n	8005158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800514a:	4a05      	ldr	r2, [pc, #20]	; (8005160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fdb8 	bl	8002cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40010400 	.word	0x40010400

08005164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e31d      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005176:	4b94      	ldr	r3, [pc, #592]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005180:	4b91      	ldr	r3, [pc, #580]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005188:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d07b      	beq.n	800528e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d006      	beq.n	80051aa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d10f      	bne.n	80051c2 <HAL_RCC_OscConfig+0x5e>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a8:	d10b      	bne.n	80051c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051aa:	4b87      	ldr	r3, [pc, #540]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d06a      	beq.n	800528c <HAL_RCC_OscConfig+0x128>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d166      	bne.n	800528c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e2f7      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d106      	bne.n	80051d8 <HAL_RCC_OscConfig+0x74>
 80051ca:	4b7f      	ldr	r3, [pc, #508]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a7e      	ldr	r2, [pc, #504]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80051d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e02d      	b.n	8005234 <HAL_RCC_OscConfig+0xd0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10c      	bne.n	80051fa <HAL_RCC_OscConfig+0x96>
 80051e0:	4b79      	ldr	r3, [pc, #484]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a78      	ldr	r2, [pc, #480]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80051e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4b76      	ldr	r3, [pc, #472]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a75      	ldr	r2, [pc, #468]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80051f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e01c      	b.n	8005234 <HAL_RCC_OscConfig+0xd0>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0xb8>
 8005202:	4b71      	ldr	r3, [pc, #452]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a70      	ldr	r2, [pc, #448]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b6e      	ldr	r3, [pc, #440]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a6d      	ldr	r2, [pc, #436]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0xd0>
 800521c:	4b6a      	ldr	r3, [pc, #424]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a69      	ldr	r2, [pc, #420]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4b67      	ldr	r3, [pc, #412]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a66      	ldr	r2, [pc, #408]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 800522e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d013      	beq.n	8005264 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fe fed2 	bl	8003fe4 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005244:	f7fe fece 	bl	8003fe4 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	; 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e2ad      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005256:	4b5c      	ldr	r3, [pc, #368]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0xe0>
 8005262:	e014      	b.n	800528e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005264:	f7fe febe 	bl	8003fe4 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800526c:	f7fe feba 	bl	8003fe4 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	; 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e299      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800527e:	4b52      	ldr	r3, [pc, #328]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x108>
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d05a      	beq.n	8005350 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b04      	cmp	r3, #4
 800529e:	d005      	beq.n	80052ac <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d119      	bne.n	80052da <HAL_RCC_OscConfig+0x176>
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d116      	bne.n	80052da <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ac:	4b46      	ldr	r3, [pc, #280]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_OscConfig+0x160>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e276      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c4:	4b40      	ldr	r3, [pc, #256]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	493d      	ldr	r1, [pc, #244]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d8:	e03a      	b.n	8005350 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e2:	4b3a      	ldr	r3, [pc, #232]	; (80053cc <HAL_RCC_OscConfig+0x268>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fe fe7c 	bl	8003fe4 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f0:	f7fe fe78 	bl	8003fe4 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e257      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005302:	4b31      	ldr	r3, [pc, #196]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530e:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	492a      	ldr	r1, [pc, #168]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 800531e:	4313      	orrs	r3, r2
 8005320:	604b      	str	r3, [r1, #4]
 8005322:	e015      	b.n	8005350 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005324:	4b29      	ldr	r3, [pc, #164]	; (80053cc <HAL_RCC_OscConfig+0x268>)
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532a:	f7fe fe5b 	bl	8003fe4 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005332:	f7fe fe57 	bl	8003fe4 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e236      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005344:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f0      	bne.n	8005332 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80b8 	beq.w	80054ce <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d170      	bne.n	8005446 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005364:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_RCC_OscConfig+0x218>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e21a      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005388:	429a      	cmp	r2, r3
 800538a:	d921      	bls.n	80053d0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fc49 	bl	8005c28 <RCC_SetFlashLatencyFromMSIRange>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e208      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	4906      	ldr	r1, [pc, #24]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053b2:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	061b      	lsls	r3, r3, #24
 80053c0:	4901      	ldr	r1, [pc, #4]	; (80053c8 <HAL_RCC_OscConfig+0x264>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	604b      	str	r3, [r1, #4]
 80053c6:	e020      	b.n	800540a <HAL_RCC_OscConfig+0x2a6>
 80053c8:	40023800 	.word	0x40023800
 80053cc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053d0:	4ba4      	ldr	r3, [pc, #656]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	49a1      	ldr	r1, [pc, #644]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053e2:	4ba0      	ldr	r3, [pc, #640]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	061b      	lsls	r3, r3, #24
 80053f0:	499c      	ldr	r1, [pc, #624]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fc14 	bl	8005c28 <RCC_SetFlashLatencyFromMSIRange>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e1d3      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	0b5b      	lsrs	r3, r3, #13
 8005410:	3301      	adds	r3, #1
 8005412:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800541a:	4a92      	ldr	r2, [pc, #584]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 800541c:	6892      	ldr	r2, [r2, #8]
 800541e:	0912      	lsrs	r2, r2, #4
 8005420:	f002 020f 	and.w	r2, r2, #15
 8005424:	4990      	ldr	r1, [pc, #576]	; (8005668 <HAL_RCC_OscConfig+0x504>)
 8005426:	5c8a      	ldrb	r2, [r1, r2]
 8005428:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800542a:	4a90      	ldr	r2, [pc, #576]	; (800566c <HAL_RCC_OscConfig+0x508>)
 800542c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800542e:	4b90      	ldr	r3, [pc, #576]	; (8005670 <HAL_RCC_OscConfig+0x50c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fd8a 	bl	8003f4c <HAL_InitTick>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d045      	beq.n	80054ce <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	e1b5      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d029      	beq.n	80054a2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800544e:	4b89      	ldr	r3, [pc, #548]	; (8005674 <HAL_RCC_OscConfig+0x510>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fe fdc6 	bl	8003fe4 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800545c:	f7fe fdc2 	bl	8003fe4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e1a1      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800546e:	4b7d      	ldr	r3, [pc, #500]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800547a:	4b7a      	ldr	r3, [pc, #488]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	4977      	ldr	r1, [pc, #476]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800548c:	4b75      	ldr	r3, [pc, #468]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	061b      	lsls	r3, r3, #24
 800549a:	4972      	ldr	r1, [pc, #456]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 800549c:	4313      	orrs	r3, r2
 800549e:	604b      	str	r3, [r1, #4]
 80054a0:	e015      	b.n	80054ce <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054a2:	4b74      	ldr	r3, [pc, #464]	; (8005674 <HAL_RCC_OscConfig+0x510>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fe fd9c 	bl	8003fe4 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054b0:	f7fe fd98 	bl	8003fe4 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e177      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80054c2:	4b68      	ldr	r3, [pc, #416]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d030      	beq.n	800553c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e2:	4b65      	ldr	r3, [pc, #404]	; (8005678 <HAL_RCC_OscConfig+0x514>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e8:	f7fe fd7c 	bl	8003fe4 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f0:	f7fe fd78 	bl	8003fe4 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e157      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005502:	4b58      	ldr	r3, [pc, #352]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x38c>
 800550e:	e015      	b.n	800553c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005510:	4b59      	ldr	r3, [pc, #356]	; (8005678 <HAL_RCC_OscConfig+0x514>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005516:	f7fe fd65 	bl	8003fe4 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551e:	f7fe fd61 	bl	8003fe4 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e140      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005530:	4b4c      	ldr	r3, [pc, #304]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f0      	bne.n	800551e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80b5 	beq.w	80056b4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554e:	4b45      	ldr	r3, [pc, #276]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	4b42      	ldr	r3, [pc, #264]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	4a41      	ldr	r2, [pc, #260]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6253      	str	r3, [r2, #36]	; 0x24
 8005566:	4b3f      	ldr	r3, [pc, #252]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005572:	2301      	movs	r3, #1
 8005574:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005576:	4b41      	ldr	r3, [pc, #260]	; (800567c <HAL_RCC_OscConfig+0x518>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d118      	bne.n	80055b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005582:	4b3e      	ldr	r3, [pc, #248]	; (800567c <HAL_RCC_OscConfig+0x518>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3d      	ldr	r2, [pc, #244]	; (800567c <HAL_RCC_OscConfig+0x518>)
 8005588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558e:	f7fe fd29 	bl	8003fe4 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005596:	f7fe fd25 	bl	8003fe4 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b64      	cmp	r3, #100	; 0x64
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e104      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a8:	4b34      	ldr	r3, [pc, #208]	; (800567c <HAL_RCC_OscConfig+0x518>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d106      	bne.n	80055ca <HAL_RCC_OscConfig+0x466>
 80055bc:	4b29      	ldr	r3, [pc, #164]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c0:	4a28      	ldr	r2, [pc, #160]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80055c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c6:	6353      	str	r3, [r2, #52]	; 0x34
 80055c8:	e02d      	b.n	8005626 <HAL_RCC_OscConfig+0x4c2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10c      	bne.n	80055ec <HAL_RCC_OscConfig+0x488>
 80055d2:	4b24      	ldr	r3, [pc, #144]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	4a23      	ldr	r2, [pc, #140]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80055d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055dc:	6353      	str	r3, [r2, #52]	; 0x34
 80055de:	4b21      	ldr	r3, [pc, #132]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80055e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e2:	4a20      	ldr	r2, [pc, #128]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80055e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e8:	6353      	str	r3, [r2, #52]	; 0x34
 80055ea:	e01c      	b.n	8005626 <HAL_RCC_OscConfig+0x4c2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	d10c      	bne.n	800560e <HAL_RCC_OscConfig+0x4aa>
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80055f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f8:	4a1a      	ldr	r2, [pc, #104]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 80055fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055fe:	6353      	str	r3, [r2, #52]	; 0x34
 8005600:	4b18      	ldr	r3, [pc, #96]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	4a17      	ldr	r2, [pc, #92]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800560a:	6353      	str	r3, [r2, #52]	; 0x34
 800560c:	e00b      	b.n	8005626 <HAL_RCC_OscConfig+0x4c2>
 800560e:	4b15      	ldr	r3, [pc, #84]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	4a14      	ldr	r2, [pc, #80]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	6353      	str	r3, [r2, #52]	; 0x34
 800561a:	4b12      	ldr	r3, [pc, #72]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	4a11      	ldr	r2, [pc, #68]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005624:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d015      	beq.n	800565a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562e:	f7fe fcd9 	bl	8003fe4 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005634:	e00a      	b.n	800564c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fe fcd5 	bl	8003fe4 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	4293      	cmp	r3, r2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0b2      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ee      	beq.n	8005636 <HAL_RCC_OscConfig+0x4d2>
 8005658:	e023      	b.n	80056a2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565a:	f7fe fcc3 	bl	8003fe4 <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005660:	e019      	b.n	8005696 <HAL_RCC_OscConfig+0x532>
 8005662:	bf00      	nop
 8005664:	40023800 	.word	0x40023800
 8005668:	0800eb1c 	.word	0x0800eb1c
 800566c:	20000000 	.word	0x20000000
 8005670:	20000008 	.word	0x20000008
 8005674:	42470020 	.word	0x42470020
 8005678:	42470680 	.word	0x42470680
 800567c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005680:	f7fe fcb0 	bl	8003fe4 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e08d      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005696:	4b49      	ldr	r3, [pc, #292]	; (80057bc <HAL_RCC_OscConfig+0x658>)
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ee      	bne.n	8005680 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056a2:	7ffb      	ldrb	r3, [r7, #31]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d105      	bne.n	80056b4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a8:	4b44      	ldr	r3, [pc, #272]	; (80057bc <HAL_RCC_OscConfig+0x658>)
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	4a43      	ldr	r2, [pc, #268]	; (80057bc <HAL_RCC_OscConfig+0x658>)
 80056ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d079      	beq.n	80057b0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b0c      	cmp	r3, #12
 80056c0:	d056      	beq.n	8005770 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d13b      	bne.n	8005742 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ca:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <HAL_RCC_OscConfig+0x65c>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fe fc88 	bl	8003fe4 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d8:	f7fe fc84 	bl	8003fe4 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e063      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056ea:	4b34      	ldr	r3, [pc, #208]	; (80057bc <HAL_RCC_OscConfig+0x658>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <HAL_RCC_OscConfig+0x658>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	4319      	orrs	r1, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	430b      	orrs	r3, r1
 800570e:	492b      	ldr	r1, [pc, #172]	; (80057bc <HAL_RCC_OscConfig+0x658>)
 8005710:	4313      	orrs	r3, r2
 8005712:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005714:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <HAL_RCC_OscConfig+0x65c>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571a:	f7fe fc63 	bl	8003fe4 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005722:	f7fe fc5f 	bl	8003fe4 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e03e      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005734:	4b21      	ldr	r3, [pc, #132]	; (80057bc <HAL_RCC_OscConfig+0x658>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x5be>
 8005740:	e036      	b.n	80057b0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005742:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <HAL_RCC_OscConfig+0x65c>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005748:	f7fe fc4c 	bl	8003fe4 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005750:	f7fe fc48 	bl	8003fe4 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e027      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005762:	4b16      	ldr	r3, [pc, #88]	; (80057bc <HAL_RCC_OscConfig+0x658>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x5ec>
 800576e:	e01f      	b.n	80057b0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e01a      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800577c:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <HAL_RCC_OscConfig+0x658>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	429a      	cmp	r2, r3
 800578e:	d10d      	bne.n	80057ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579a:	429a      	cmp	r2, r3
 800579c:	d106      	bne.n	80057ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d001      	beq.n	80057b0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800
 80057c0:	42470060 	.word	0x42470060

080057c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e11a      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057d8:	4b8f      	ldr	r3, [pc, #572]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d919      	bls.n	800581a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d105      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x34>
 80057ec:	4b8a      	ldr	r3, [pc, #552]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a89      	ldr	r2, [pc, #548]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 80057f2:	f043 0304 	orr.w	r3, r3, #4
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	4b87      	ldr	r3, [pc, #540]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f023 0201 	bic.w	r2, r3, #1
 8005800:	4985      	ldr	r1, [pc, #532]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	4313      	orrs	r3, r2
 8005806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005808:	4b83      	ldr	r3, [pc, #524]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d001      	beq.n	800581a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e0f9      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005826:	4b7d      	ldr	r3, [pc, #500]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	497a      	ldr	r1, [pc, #488]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 8005834:	4313      	orrs	r3, r2
 8005836:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 808e 	beq.w	8005962 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800584e:	4b73      	ldr	r3, [pc, #460]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d121      	bne.n	800589e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e0d7      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d107      	bne.n	8005876 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005866:	4b6d      	ldr	r3, [pc, #436]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d115      	bne.n	800589e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e0cb      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d107      	bne.n	800588e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800587e:	4b67      	ldr	r3, [pc, #412]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0bf      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e0b7      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800589e:	4b5f      	ldr	r3, [pc, #380]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 0203 	bic.w	r2, r3, #3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	495c      	ldr	r1, [pc, #368]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b0:	f7fe fb98 	bl	8003fe4 <HAL_GetTick>
 80058b4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d112      	bne.n	80058e4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058be:	e00a      	b.n	80058d6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c0:	f7fe fb90 	bl	8003fe4 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e09b      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058d6:	4b51      	ldr	r3, [pc, #324]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d1ee      	bne.n	80058c0 <HAL_RCC_ClockConfig+0xfc>
 80058e2:	e03e      	b.n	8005962 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d112      	bne.n	8005912 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ec:	e00a      	b.n	8005904 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ee:	f7fe fb79 	bl	8003fe4 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e084      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005904:	4b45      	ldr	r3, [pc, #276]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 030c 	and.w	r3, r3, #12
 800590c:	2b0c      	cmp	r3, #12
 800590e:	d1ee      	bne.n	80058ee <HAL_RCC_ClockConfig+0x12a>
 8005910:	e027      	b.n	8005962 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d11d      	bne.n	8005956 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800591a:	e00a      	b.n	8005932 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800591c:	f7fe fb62 	bl	8003fe4 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e06d      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005932:	4b3a      	ldr	r3, [pc, #232]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b04      	cmp	r3, #4
 800593c:	d1ee      	bne.n	800591c <HAL_RCC_ClockConfig+0x158>
 800593e:	e010      	b.n	8005962 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005940:	f7fe fb50 	bl	8003fe4 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f241 3288 	movw	r2, #5000	; 0x1388
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e05b      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005956:	4b31      	ldr	r3, [pc, #196]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1ee      	bne.n	8005940 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005962:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d219      	bcs.n	80059a4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d105      	bne.n	8005982 <HAL_RCC_ClockConfig+0x1be>
 8005976:	4b28      	ldr	r3, [pc, #160]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a27      	ldr	r2, [pc, #156]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 800597c:	f043 0304 	orr.w	r3, r3, #4
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 0201 	bic.w	r2, r3, #1
 800598a:	4923      	ldr	r1, [pc, #140]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <HAL_RCC_ClockConfig+0x254>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e034      	b.n	8005a0e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b0:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4917      	ldr	r1, [pc, #92]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	490f      	ldr	r1, [pc, #60]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059e2:	f000 f823 	bl	8005a2c <HAL_RCC_GetSysClockFreq>
 80059e6:	4602      	mov	r2, r0
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <HAL_RCC_ClockConfig+0x258>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	490b      	ldr	r1, [pc, #44]	; (8005a20 <HAL_RCC_ClockConfig+0x25c>)
 80059f4:	5ccb      	ldrb	r3, [r1, r3]
 80059f6:	fa22 f303 	lsr.w	r3, r2, r3
 80059fa:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <HAL_RCC_ClockConfig+0x260>)
 80059fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <HAL_RCC_ClockConfig+0x264>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe faa2 	bl	8003f4c <HAL_InitTick>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40023c00 	.word	0x40023c00
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	0800eb1c 	.word	0x0800eb1c
 8005a24:	20000000 	.word	0x20000000
 8005a28:	20000008 	.word	0x20000008

08005a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a2c:	b5b0      	push	{r4, r5, r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005a32:	4b61      	ldr	r3, [pc, #388]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d00d      	beq.n	8005a5e <HAL_RCC_GetSysClockFreq+0x32>
 8005a42:	2b0c      	cmp	r3, #12
 8005a44:	f200 80a4 	bhi.w	8005b90 <HAL_RCC_GetSysClockFreq+0x164>
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d002      	beq.n	8005a52 <HAL_RCC_GetSysClockFreq+0x26>
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCC_GetSysClockFreq+0x2c>
 8005a50:	e09e      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a52:	4b5a      	ldr	r3, [pc, #360]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x190>)
 8005a54:	613b      	str	r3, [r7, #16]
      break;
 8005a56:	e0a9      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a58:	4b58      	ldr	r3, [pc, #352]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x190>)
 8005a5a:	613b      	str	r3, [r7, #16]
      break;
 8005a5c:	e0a6      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	0c9b      	lsrs	r3, r3, #18
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	4a56      	ldr	r2, [pc, #344]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x194>)
 8005a68:	5cd3      	ldrb	r3, [r2, r3]
 8005a6a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	0d9b      	lsrs	r3, r3, #22
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	3301      	adds	r3, #1
 8005a76:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a78:	4b4f      	ldr	r3, [pc, #316]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d041      	beq.n	8005b08 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	461c      	mov	r4, r3
 8005a88:	f04f 0500 	mov.w	r5, #0
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	014b      	lsls	r3, r1, #5
 8005a9a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a9e:	0142      	lsls	r2, r0, #5
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	1b00      	subs	r0, r0, r4
 8005aa6:	eb61 0105 	sbc.w	r1, r1, r5
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	018b      	lsls	r3, r1, #6
 8005ab4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ab8:	0182      	lsls	r2, r0, #6
 8005aba:	1a12      	subs	r2, r2, r0
 8005abc:	eb63 0301 	sbc.w	r3, r3, r1
 8005ac0:	f04f 0000 	mov.w	r0, #0
 8005ac4:	f04f 0100 	mov.w	r1, #0
 8005ac8:	00d9      	lsls	r1, r3, #3
 8005aca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ace:	00d0      	lsls	r0, r2, #3
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	1912      	adds	r2, r2, r4
 8005ad6:	eb45 0303 	adc.w	r3, r5, r3
 8005ada:	f04f 0000 	mov.w	r0, #0
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	0299      	lsls	r1, r3, #10
 8005ae4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ae8:	0290      	lsls	r0, r2, #10
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4610      	mov	r0, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	461a      	mov	r2, r3
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	f7fb fb67 	bl	80011cc <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4613      	mov	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e040      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	461c      	mov	r4, r3
 8005b0c:	f04f 0500 	mov.w	r5, #0
 8005b10:	4620      	mov	r0, r4
 8005b12:	4629      	mov	r1, r5
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	014b      	lsls	r3, r1, #5
 8005b1e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b22:	0142      	lsls	r2, r0, #5
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	1b00      	subs	r0, r0, r4
 8005b2a:	eb61 0105 	sbc.w	r1, r1, r5
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	018b      	lsls	r3, r1, #6
 8005b38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b3c:	0182      	lsls	r2, r0, #6
 8005b3e:	1a12      	subs	r2, r2, r0
 8005b40:	eb63 0301 	sbc.w	r3, r3, r1
 8005b44:	f04f 0000 	mov.w	r0, #0
 8005b48:	f04f 0100 	mov.w	r1, #0
 8005b4c:	00d9      	lsls	r1, r3, #3
 8005b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b52:	00d0      	lsls	r0, r2, #3
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	1912      	adds	r2, r2, r4
 8005b5a:	eb45 0303 	adc.w	r3, r5, r3
 8005b5e:	f04f 0000 	mov.w	r0, #0
 8005b62:	f04f 0100 	mov.w	r1, #0
 8005b66:	0299      	lsls	r1, r3, #10
 8005b68:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b6c:	0290      	lsls	r0, r2, #10
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	f7fb fb25 	bl	80011cc <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4613      	mov	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	613b      	str	r3, [r7, #16]
      break;
 8005b8e:	e00d      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b90:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	0b5b      	lsrs	r3, r3, #13
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	613b      	str	r3, [r7, #16]
      break;
 8005baa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bac:	693b      	ldr	r3, [r7, #16]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	0800eb10 	.word	0x0800eb10

08005bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc8:	4b02      	ldr	r3, [pc, #8]	; (8005bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bca:	681b      	ldr	r3, [r3, #0]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr
 8005bd4:	20000000 	.word	0x20000000

08005bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bdc:	f7ff fff2 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005be0:	4602      	mov	r2, r0
 8005be2:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	4903      	ldr	r1, [pc, #12]	; (8005bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bee:	5ccb      	ldrb	r3, [r1, r3]
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	0800eb2c 	.word	0x0800eb2c

08005c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c04:	f7ff ffde 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	0adb      	lsrs	r3, r3, #11
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	4903      	ldr	r1, [pc, #12]	; (8005c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c16:	5ccb      	ldrb	r3, [r1, r3]
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40023800 	.word	0x40023800
 8005c24:	0800eb2c 	.word	0x0800eb2c

08005c28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c30:	2300      	movs	r3, #0
 8005c32:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c34:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d12c      	bne.n	8005c9a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c40:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005c4c:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e016      	b.n	8005c86 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c58:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	4a1f      	ldr	r2, [pc, #124]	; (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c62:	6253      	str	r3, [r2, #36]	; 0x24
 8005c64:	4b1d      	ldr	r3, [pc, #116]	; (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005c70:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005c78:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c7a:	4b18      	ldr	r3, [pc, #96]	; (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005c8c:	d105      	bne.n	8005c9a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c94:	d101      	bne.n	8005c9a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005c96:	2301      	movs	r3, #1
 8005c98:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d105      	bne.n	8005cac <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005ca0:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a0f      	ldr	r2, [pc, #60]	; (8005ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ca6:	f043 0304 	orr.w	r3, r3, #4
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f023 0201 	bic.w	r2, r3, #1
 8005cb4:	490b      	ldr	r1, [pc, #44]	; (8005ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d001      	beq.n	8005cce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40007000 	.word	0x40007000
 8005ce4:	40023c00 	.word	0x40023c00

08005ce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e06e      	b.n	8005dd8 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d108      	bne.n	8005d14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d0a:	d009      	beq.n	8005d20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	61da      	str	r2, [r3, #28]
 8005d12:	e005      	b.n	8005d20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fb ffc6 	bl	8001ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da4:	ea42 0103 	orr.w	r1, r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	0c1a      	lsrs	r2, r3, #16
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f002 0204 	and.w	r2, r2, #4
 8005dc6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	; 0x30
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dee:	2301      	movs	r3, #1
 8005df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x26>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e18a      	b.n	800611c <HAL_SPI_TransmitReceive+0x33c>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e0e:	f7fe f8e9 	bl	8003fe4 <HAL_GetTick>
 8005e12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e24:	887b      	ldrh	r3, [r7, #2]
 8005e26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d00f      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x70>
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e36:	d107      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x68>
 8005e40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d003      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e4e:	e15b      	b.n	8006108 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x82>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x82>
 8005e5c:	887b      	ldrh	r3, [r7, #2]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e68:	e14e      	b.n	8006108 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d003      	beq.n	8005e7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2205      	movs	r2, #5
 8005e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	887a      	ldrh	r2, [r7, #2]
 8005e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	887a      	ldrh	r2, [r7, #2]
 8005e94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	887a      	ldrh	r2, [r7, #2]
 8005ea0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	887a      	ldrh	r2, [r7, #2]
 8005ea6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b40      	cmp	r3, #64	; 0x40
 8005ec0:	d007      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ed0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eda:	d178      	bne.n	8005fce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x10a>
 8005ee4:	8b7b      	ldrh	r3, [r7, #26]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d166      	bne.n	8005fb8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	881a      	ldrh	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	1c9a      	adds	r2, r3, #2
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f0e:	e053      	b.n	8005fb8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d11b      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x176>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d016      	beq.n	8005f56 <HAL_SPI_TransmitReceive+0x176>
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d113      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	881a      	ldrh	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	1c9a      	adds	r2, r3, #2
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d119      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x1b8>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d014      	beq.n	8005f98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	b292      	uxth	r2, r2
 8005f7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	1c9a      	adds	r2, r3, #2
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f94:	2301      	movs	r3, #1
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f98:	f7fe f824 	bl	8003fe4 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d807      	bhi.n	8005fb8 <HAL_SPI_TransmitReceive+0x1d8>
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d003      	beq.n	8005fb8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fb6:	e0a7      	b.n	8006108 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1a6      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x130>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1a1      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x130>
 8005fcc:	e07c      	b.n	80060c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_TransmitReceive+0x1fc>
 8005fd6:	8b7b      	ldrh	r3, [r7, #26]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d16b      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	330c      	adds	r3, #12
 8005fe6:	7812      	ldrb	r2, [r2, #0]
 8005fe8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006002:	e057      	b.n	80060b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	d11c      	bne.n	800604c <HAL_SPI_TransmitReceive+0x26c>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d017      	beq.n	800604c <HAL_SPI_TransmitReceive+0x26c>
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2b01      	cmp	r3, #1
 8006020:	d114      	bne.n	800604c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	330c      	adds	r3, #12
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b01      	cmp	r3, #1
 8006058:	d119      	bne.n	800608e <HAL_SPI_TransmitReceive+0x2ae>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d014      	beq.n	800608e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800608a:	2301      	movs	r3, #1
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800608e:	f7fd ffa9 	bl	8003fe4 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609a:	429a      	cmp	r2, r3
 800609c:	d803      	bhi.n	80060a6 <HAL_SPI_TransmitReceive+0x2c6>
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d102      	bne.n	80060ac <HAL_SPI_TransmitReceive+0x2cc>
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d103      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060b2:	e029      	b.n	8006108 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1a2      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x224>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d19d      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f8b1 	bl	8006234 <SPI_EndRxTxTransaction>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d006      	beq.n	80060e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060e4:	e010      	b.n	8006108 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	e000      	b.n	8006108 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006106:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006118:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800611c:	4618      	mov	r0, r3
 800611e:	3730      	adds	r7, #48	; 0x30
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	4613      	mov	r3, r2
 8006132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006134:	f7fd ff56 	bl	8003fe4 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	4413      	add	r3, r2
 8006142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006144:	f7fd ff4e 	bl	8003fe4 <HAL_GetTick>
 8006148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800614a:	4b39      	ldr	r3, [pc, #228]	; (8006230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	015b      	lsls	r3, r3, #5
 8006150:	0d1b      	lsrs	r3, r3, #20
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	fb02 f303 	mul.w	r3, r2, r3
 8006158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800615a:	e054      	b.n	8006206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d050      	beq.n	8006206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006164:	f7fd ff3e 	bl	8003fe4 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	429a      	cmp	r2, r3
 8006172:	d902      	bls.n	800617a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d13d      	bne.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006192:	d111      	bne.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619c:	d004      	beq.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a6:	d107      	bne.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c0:	d10f      	bne.n	80061e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e017      	b.n	8006226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	3b01      	subs	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4013      	ands	r3, r2
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	bf0c      	ite	eq
 8006216:	2301      	moveq	r3, #1
 8006218:	2300      	movne	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	429a      	cmp	r2, r3
 8006222:	d19b      	bne.n	800615c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000000 	.word	0x20000000

08006234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006240:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <SPI_EndRxTxTransaction+0x7c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1b      	ldr	r2, [pc, #108]	; (80062b4 <SPI_EndRxTxTransaction+0x80>)
 8006246:	fba2 2303 	umull	r2, r3, r2, r3
 800624a:	0d5b      	lsrs	r3, r3, #21
 800624c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800625e:	d112      	bne.n	8006286 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	2180      	movs	r1, #128	; 0x80
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff ff5a 	bl	8006124 <SPI_WaitFlagStateUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d016      	beq.n	80062a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	f043 0220 	orr.w	r2, r3, #32
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e00f      	b.n	80062a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	3b01      	subs	r3, #1
 8006290:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629c:	2b80      	cmp	r3, #128	; 0x80
 800629e:	d0f2      	beq.n	8006286 <SPI_EndRxTxTransaction+0x52>
 80062a0:	e000      	b.n	80062a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80062a2:	bf00      	nop
  }

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000000 	.word	0x20000000
 80062b4:	165e9f81 	.word	0x165e9f81

080062b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e031      	b.n	800632e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fb fd88 	bl	8001df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f000 fa7a 	bl	80067f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d001      	beq.n	8006350 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e032      	b.n	80063b6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006360:	d00e      	beq.n	8006380 <HAL_TIM_Base_Start+0x48>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <HAL_TIM_Base_Start+0x88>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_TIM_Base_Start+0x48>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <HAL_TIM_Base_Start+0x8c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_TIM_Base_Start+0x48>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <HAL_TIM_Base_Start+0x90>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d111      	bne.n	80063a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d010      	beq.n	80063b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a2:	e007      	b.n	80063b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	40000400 	.word	0x40000400
 80063c4:	40000800 	.word	0x40000800
 80063c8:	40010800 	.word	0x40010800

080063cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6a1a      	ldr	r2, [r3, #32]
 80063da:	f241 1311 	movw	r3, #4369	; 0x1111
 80063de:	4013      	ands	r3, r2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d107      	bne.n	80063f4 <HAL_TIM_Base_Stop+0x28>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0201 	bic.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	bc80      	pop	{r7}
 8006406:	4770      	bx	lr

08006408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d001      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e03a      	b.n	8006496 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006440:	d00e      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x58>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <HAL_TIM_Base_Start_IT+0x98>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x58>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x58>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d111      	bne.n	8006484 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b06      	cmp	r3, #6
 8006470:	d010      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006482:	e007      	b.n	8006494 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40010800 	.word	0x40010800

080064ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e031      	b.n	8006522 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fb fc70 	bl	8001db8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f000 f980 	bl	80067f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b02      	cmp	r3, #2
 800653e:	d122      	bne.n	8006586 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b02      	cmp	r3, #2
 800654c:	d11b      	bne.n	8006586 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f06f 0202 	mvn.w	r2, #2
 8006556:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f923 	bl	80067b8 <HAL_TIM_IC_CaptureCallback>
 8006572:	e005      	b.n	8006580 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f916 	bl	80067a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f925 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d122      	bne.n	80065da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d11b      	bne.n	80065da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f06f 0204 	mvn.w	r2, #4
 80065aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f8f9 	bl	80067b8 <HAL_TIM_IC_CaptureCallback>
 80065c6:	e005      	b.n	80065d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8ec 	bl	80067a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f8fb 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d122      	bne.n	800662e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d11b      	bne.n	800662e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f06f 0208 	mvn.w	r2, #8
 80065fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2204      	movs	r2, #4
 8006604:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f8cf 	bl	80067b8 <HAL_TIM_IC_CaptureCallback>
 800661a:	e005      	b.n	8006628 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f8c2 	bl	80067a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f8d1 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b10      	cmp	r3, #16
 800663a:	d122      	bne.n	8006682 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0310 	and.w	r3, r3, #16
 8006646:	2b10      	cmp	r3, #16
 8006648:	d11b      	bne.n	8006682 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f06f 0210 	mvn.w	r2, #16
 8006652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2208      	movs	r2, #8
 8006658:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f8a5 	bl	80067b8 <HAL_TIM_IC_CaptureCallback>
 800666e:	e005      	b.n	800667c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f898 	bl	80067a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f8a7 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10e      	bne.n	80066ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b01      	cmp	r3, #1
 800669c:	d107      	bne.n	80066ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f06f 0201 	mvn.w	r2, #1
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f873 	bl	8006794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d10e      	bne.n	80066da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d107      	bne.n	80066da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f881 	bl	80067dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_TIM_OC_ConfigChannel+0x1a>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e046      	b.n	800678c <HAL_TIM_OC_ConfigChannel+0xa8>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b0c      	cmp	r3, #12
 800670a:	d839      	bhi.n	8006780 <HAL_TIM_OC_ConfigChannel+0x9c>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <HAL_TIM_OC_ConfigChannel+0x30>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006749 	.word	0x08006749
 8006718:	08006781 	.word	0x08006781
 800671c:	08006781 	.word	0x08006781
 8006720:	08006781 	.word	0x08006781
 8006724:	08006757 	.word	0x08006757
 8006728:	08006781 	.word	0x08006781
 800672c:	08006781 	.word	0x08006781
 8006730:	08006781 	.word	0x08006781
 8006734:	08006765 	.word	0x08006765
 8006738:	08006781 	.word	0x08006781
 800673c:	08006781 	.word	0x08006781
 8006740:	08006781 	.word	0x08006781
 8006744:	08006773 	.word	0x08006773
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f8b0 	bl	80068b4 <TIM_OC1_SetConfig>
      break;
 8006754:	e015      	b.n	8006782 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	4618      	mov	r0, r3
 800675e:	f000 f8e5 	bl	800692c <TIM_OC2_SetConfig>
      break;
 8006762:	e00e      	b.n	8006782 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f91c 	bl	80069a8 <TIM_OC3_SetConfig>
      break;
 8006770:	e007      	b.n	8006782 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	4618      	mov	r0, r3
 800677a:	f000 f952 	bl	8006a22 <TIM_OC4_SetConfig>
      break;
 800677e:	e000      	b.n	8006782 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8006780:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr

080067a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
	...

080067f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006806:	d007      	beq.n	8006818 <TIM_Base_SetConfig+0x28>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a25      	ldr	r2, [pc, #148]	; (80068a0 <TIM_Base_SetConfig+0xb0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_Base_SetConfig+0x28>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a24      	ldr	r2, [pc, #144]	; (80068a4 <TIM_Base_SetConfig+0xb4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d108      	bne.n	800682a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006830:	d013      	beq.n	800685a <TIM_Base_SetConfig+0x6a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <TIM_Base_SetConfig+0xb0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00f      	beq.n	800685a <TIM_Base_SetConfig+0x6a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a19      	ldr	r2, [pc, #100]	; (80068a4 <TIM_Base_SetConfig+0xb4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00b      	beq.n	800685a <TIM_Base_SetConfig+0x6a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <TIM_Base_SetConfig+0xb8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d007      	beq.n	800685a <TIM_Base_SetConfig+0x6a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a17      	ldr	r2, [pc, #92]	; (80068ac <TIM_Base_SetConfig+0xbc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d003      	beq.n	800685a <TIM_Base_SetConfig+0x6a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <TIM_Base_SetConfig+0xc0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d108      	bne.n	800686c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	615a      	str	r2, [r3, #20]
}
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40000800 	.word	0x40000800
 80068a8:	40010800 	.word	0x40010800
 80068ac:	40010c00 	.word	0x40010c00
 80068b0:	40011000 	.word	0x40011000

080068b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0201 	bic.w	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0303 	bic.w	r3, r3, #3
 80068ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f023 0302 	bic.w	r3, r3, #2
 80068fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	621a      	str	r2, [r3, #32]
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f023 0210 	bic.w	r2, r3, #16
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0320 	bic.w	r3, r3, #32
 8006976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr

080069a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	621a      	str	r2, [r3, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b087      	sub	sp, #28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a50:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	031b      	lsls	r3, r3, #12
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	621a      	str	r2, [r3, #32]
}
 8006a94:	bf00      	nop
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr
	...

08006aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e046      	b.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006afa:	d00e      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d004      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a10      	ldr	r2, [pc, #64]	; (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d10c      	bne.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40010800 	.word	0x40010800

08006b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e03f      	b.n	8006bee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fb f95c 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2224      	movs	r2, #36	; 0x24
 8006b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fb91 	bl	80072c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695a      	ldr	r2, [r3, #20]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b088      	sub	sp, #32
 8006bfa:	af02      	add	r7, sp, #8
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	f040 8083 	bne.w	8006d1e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_UART_Transmit+0x2e>
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e07b      	b.n	8006d20 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_UART_Transmit+0x40>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e074      	b.n	8006d20 <HAL_UART_Transmit+0x12a>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2221      	movs	r2, #33	; 0x21
 8006c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006c4c:	f7fd f9ca 	bl	8003fe4 <HAL_GetTick>
 8006c50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	88fa      	ldrh	r2, [r7, #6]
 8006c56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006c66:	e042      	b.n	8006cee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7e:	d122      	bne.n	8006cc6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2200      	movs	r2, #0
 8006c88:	2180      	movs	r1, #128	; 0x80
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f9b2 	bl	8006ff4 <UART_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e042      	b.n	8006d20 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	3302      	adds	r3, #2
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	e017      	b.n	8006cee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	e013      	b.n	8006cee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2180      	movs	r1, #128	; 0x80
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f98f 	bl	8006ff4 <UART_WaitOnFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e01f      	b.n	8006d20 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	60ba      	str	r2, [r7, #8]
 8006ce6:	781a      	ldrb	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1b7      	bne.n	8006c68 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2140      	movs	r1, #64	; 0x40
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f976 	bl	8006ff4 <UART_WaitOnFlagUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e006      	b.n	8006d20 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e000      	b.n	8006d20 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006d1e:	2302      	movs	r3, #2
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d140      	bne.n	8006dc4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <HAL_UART_Receive_IT+0x26>
 8006d48:	88fb      	ldrh	r3, [r7, #6]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e039      	b.n	8006dc6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_UART_Receive_IT+0x38>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e032      	b.n	8006dc6 <HAL_UART_Receive_IT+0x9e>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	88fa      	ldrh	r2, [r7, #6]
 8006d72:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	88fa      	ldrh	r2, [r7, #6]
 8006d78:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2222      	movs	r2, #34	; 0x22
 8006d84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d9e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695a      	ldr	r2, [r3, #20]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0220 	orr.w	r2, r2, #32
 8006dbe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e000      	b.n	8006dc6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006dc4:	2302      	movs	r3, #2
  }
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr

08006dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10d      	bne.n	8006e22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d008      	beq.n	8006e22 <HAL_UART_IRQHandler+0x52>
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9d2 	bl	80071c4 <UART_Receive_IT>
      return;
 8006e20:	e0d0      	b.n	8006fc4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 80b0 	beq.w	8006f8a <HAL_UART_IRQHandler+0x1ba>
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d105      	bne.n	8006e40 <HAL_UART_IRQHandler+0x70>
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80a5 	beq.w	8006f8a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <HAL_UART_IRQHandler+0x90>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e58:	f043 0201 	orr.w	r2, r3, #1
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <HAL_UART_IRQHandler+0xb0>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e78:	f043 0202 	orr.w	r2, r3, #2
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xd0>
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e98:	f043 0204 	orr.w	r2, r3, #4
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00f      	beq.n	8006eca <HAL_UART_IRQHandler+0xfa>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d104      	bne.n	8006ebe <HAL_UART_IRQHandler+0xee>
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec2:	f043 0208 	orr.w	r2, r3, #8
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d077      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <HAL_UART_IRQHandler+0x11c>
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f96c 	bl	80071c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	bf0c      	ite	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	2300      	movne	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <HAL_UART_IRQHandler+0x144>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d031      	beq.n	8006f78 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f8b7 	bl	8007088 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d123      	bne.n	8006f70 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695a      	ldr	r2, [r3, #20]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f36:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d013      	beq.n	8006f68 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f44:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <HAL_UART_IRQHandler+0x1fc>)
 8006f46:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fd fe21 	bl	8004b94 <HAL_DMA_Abort_IT>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d016      	beq.n	8006f86 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f62:	4610      	mov	r0, r2
 8006f64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f66:	e00e      	b.n	8006f86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f83a 	bl	8006fe2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f6e:	e00a      	b.n	8006f86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f836 	bl	8006fe2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f76:	e006      	b.n	8006f86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f832 	bl	8006fe2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006f84:	e01d      	b.n	8006fc2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f86:	bf00      	nop
    return;
 8006f88:	e01b      	b.n	8006fc2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x1d6>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f8a3 	bl	80070ea <UART_Transmit_IT>
    return;
 8006fa4:	e00e      	b.n	8006fc4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x1f4>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f8ea 	bl	8007194 <UART_EndTransmit_IT>
    return;
 8006fc0:	e000      	b.n	8006fc4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006fc2:	bf00      	nop
  }
}
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	080070c3 	.word	0x080070c3

08006fd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bc80      	pop	{r7}
 8006ff2:	4770      	bx	lr

08006ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	4613      	mov	r3, r2
 8007002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007004:	e02c      	b.n	8007060 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d028      	beq.n	8007060 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <UART_WaitOnFlagUntilTimeout+0x30>
 8007014:	f7fc ffe6 	bl	8003fe4 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	429a      	cmp	r2, r3
 8007022:	d21d      	bcs.n	8007060 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007032:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e00f      	b.n	8007080 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	4013      	ands	r3, r2
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	429a      	cmp	r2, r3
 800706e:	bf0c      	ite	eq
 8007070:	2301      	moveq	r3, #1
 8007072:	2300      	movne	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	429a      	cmp	r2, r3
 800707c:	d0c3      	beq.n	8007006 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800709e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695a      	ldr	r2, [r3, #20]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0201 	bic.w	r2, r2, #1
 80070ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f7ff ff80 	bl	8006fe2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b21      	cmp	r3, #33	; 0x21
 80070fc:	d144      	bne.n	8007188 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007106:	d11a      	bne.n	800713e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800711c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d105      	bne.n	8007132 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	1c9a      	adds	r2, r3, #2
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	621a      	str	r2, [r3, #32]
 8007130:	e00e      	b.n	8007150 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	621a      	str	r2, [r3, #32]
 800713c:	e008      	b.n	8007150 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6211      	str	r1, [r2, #32]
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29b      	uxth	r3, r3
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	4619      	mov	r1, r3
 800715e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10f      	bne.n	8007184 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	e000      	b.n	800718a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007188:	2302      	movs	r3, #2
  }
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff ff0b 	bl	8006fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b22      	cmp	r3, #34	; 0x22
 80071d6:	d171      	bne.n	80072bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e0:	d123      	bne.n	800722a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10e      	bne.n	800720e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007206:	1c9a      	adds	r2, r3, #2
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	629a      	str	r2, [r3, #40]	; 0x28
 800720c:	e029      	b.n	8007262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	b29b      	uxth	r3, r3
 8007216:	b2db      	uxtb	r3, r3
 8007218:	b29a      	uxth	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	629a      	str	r2, [r3, #40]	; 0x28
 8007228:	e01b      	b.n	8007262 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6858      	ldr	r0, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	1c59      	adds	r1, r3, #1
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6291      	str	r1, [r2, #40]	; 0x28
 8007242:	b2c2      	uxtb	r2, r0
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e00c      	b.n	8007262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	1c58      	adds	r0, r3, #1
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	6288      	str	r0, [r1, #40]	; 0x28
 800725a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29b      	uxth	r3, r3
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4619      	mov	r1, r3
 8007270:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007272:	2b00      	cmp	r3, #0
 8007274:	d120      	bne.n	80072b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0220 	bic.w	r2, r2, #32
 8007284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	695a      	ldr	r2, [r3, #20]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0201 	bic.w	r2, r2, #1
 80072a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fb ffe8 	bl	8003284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	e002      	b.n	80072be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e000      	b.n	80072be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80072bc:	2302      	movs	r3, #2
  }
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007308:	f023 030c 	bic.w	r3, r3, #12
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6812      	ldr	r2, [r2, #0]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	430b      	orrs	r3, r1
 8007314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a55      	ldr	r2, [pc, #340]	; (8007488 <UART_SetConfig+0x1c0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d103      	bne.n	800733e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007336:	f7fe fc63 	bl	8005c00 <HAL_RCC_GetPCLK2Freq>
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	e002      	b.n	8007344 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800733e:	f7fe fc4b 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8007342:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734c:	d14c      	bne.n	80073e8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009a      	lsls	r2, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	fbb2 f3f3 	udiv	r3, r2, r3
 8007364:	4a49      	ldr	r2, [pc, #292]	; (800748c <UART_SetConfig+0x1c4>)
 8007366:	fba2 2303 	umull	r2, r3, r2, r3
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	0119      	lsls	r1, r3, #4
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009a      	lsls	r2, r3, #2
 8007378:	441a      	add	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	fbb2 f2f3 	udiv	r2, r2, r3
 8007384:	4b41      	ldr	r3, [pc, #260]	; (800748c <UART_SetConfig+0x1c4>)
 8007386:	fba3 0302 	umull	r0, r3, r3, r2
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	2064      	movs	r0, #100	; 0x64
 800738e:	fb00 f303 	mul.w	r3, r0, r3
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	3332      	adds	r3, #50	; 0x32
 8007398:	4a3c      	ldr	r2, [pc, #240]	; (800748c <UART_SetConfig+0x1c4>)
 800739a:	fba2 2303 	umull	r2, r3, r2, r3
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073a6:	4419      	add	r1, r3
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	009a      	lsls	r2, r3, #2
 80073b2:	441a      	add	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80073be:	4b33      	ldr	r3, [pc, #204]	; (800748c <UART_SetConfig+0x1c4>)
 80073c0:	fba3 0302 	umull	r0, r3, r3, r2
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	2064      	movs	r0, #100	; 0x64
 80073c8:	fb00 f303 	mul.w	r3, r0, r3
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	3332      	adds	r3, #50	; 0x32
 80073d2:	4a2e      	ldr	r2, [pc, #184]	; (800748c <UART_SetConfig+0x1c4>)
 80073d4:	fba2 2303 	umull	r2, r3, r2, r3
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	f003 0207 	and.w	r2, r3, #7
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	440a      	add	r2, r1
 80073e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073e6:	e04a      	b.n	800747e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	009a      	lsls	r2, r3, #2
 80073f2:	441a      	add	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fe:	4a23      	ldr	r2, [pc, #140]	; (800748c <UART_SetConfig+0x1c4>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	0119      	lsls	r1, r3, #4
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009a      	lsls	r2, r3, #2
 8007412:	441a      	add	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	fbb2 f2f3 	udiv	r2, r2, r3
 800741e:	4b1b      	ldr	r3, [pc, #108]	; (800748c <UART_SetConfig+0x1c4>)
 8007420:	fba3 0302 	umull	r0, r3, r3, r2
 8007424:	095b      	lsrs	r3, r3, #5
 8007426:	2064      	movs	r0, #100	; 0x64
 8007428:	fb00 f303 	mul.w	r3, r0, r3
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	3332      	adds	r3, #50	; 0x32
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <UART_SetConfig+0x1c4>)
 8007434:	fba2 2303 	umull	r2, r3, r2, r3
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800743e:	4419      	add	r1, r3
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009a      	lsls	r2, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	fbb2 f2f3 	udiv	r2, r2, r3
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <UART_SetConfig+0x1c4>)
 8007458:	fba3 0302 	umull	r0, r3, r3, r2
 800745c:	095b      	lsrs	r3, r3, #5
 800745e:	2064      	movs	r0, #100	; 0x64
 8007460:	fb00 f303 	mul.w	r3, r0, r3
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	3332      	adds	r3, #50	; 0x32
 800746a:	4a08      	ldr	r2, [pc, #32]	; (800748c <UART_SetConfig+0x1c4>)
 800746c:	fba2 2303 	umull	r2, r3, r2, r3
 8007470:	095b      	lsrs	r3, r3, #5
 8007472:	f003 020f 	and.w	r2, r3, #15
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	440a      	add	r2, r1
 800747c:	609a      	str	r2, [r3, #8]
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	40013800 	.word	0x40013800
 800748c:	51eb851f 	.word	0x51eb851f

08007490 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007496:	f3ef 8305 	mrs	r3, IPSR
 800749a:	60bb      	str	r3, [r7, #8]
  return(result);
 800749c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10f      	bne.n	80074c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a2:	f3ef 8310 	mrs	r3, PRIMASK
 80074a6:	607b      	str	r3, [r7, #4]
  return(result);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <osKernelInitialize+0x32>
 80074ae:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <osKernelInitialize+0x60>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d109      	bne.n	80074ca <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074b6:	f3ef 8311 	mrs	r3, BASEPRI
 80074ba:	603b      	str	r3, [r7, #0]
  return(result);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80074c2:	f06f 0305 	mvn.w	r3, #5
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	e00c      	b.n	80074e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074ca:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <osKernelInitialize+0x60>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80074d2:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <osKernelInitialize+0x60>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	e002      	b.n	80074e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80074de:	f04f 33ff 	mov.w	r3, #4294967295
 80074e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80074e4:	68fb      	ldr	r3, [r7, #12]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr
 80074f0:	200005ac 	.word	0x200005ac

080074f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fa:	f3ef 8305 	mrs	r3, IPSR
 80074fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007500:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10f      	bne.n	8007526 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007506:	f3ef 8310 	mrs	r3, PRIMASK
 800750a:	607b      	str	r3, [r7, #4]
  return(result);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <osKernelStart+0x32>
 8007512:	4b11      	ldr	r3, [pc, #68]	; (8007558 <osKernelStart+0x64>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d109      	bne.n	800752e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800751a:	f3ef 8311 	mrs	r3, BASEPRI
 800751e:	603b      	str	r3, [r7, #0]
  return(result);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007526:	f06f 0305 	mvn.w	r3, #5
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	e00e      	b.n	800754c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <osKernelStart+0x64>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d107      	bne.n	8007546 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007536:	4b08      	ldr	r3, [pc, #32]	; (8007558 <osKernelStart+0x64>)
 8007538:	2202      	movs	r2, #2
 800753a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800753c:	f001 f878 	bl	8008630 <vTaskStartScheduler>
      stat = osOK;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e002      	b.n	800754c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007546:	f04f 33ff 	mov.w	r3, #4294967295
 800754a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800754c:	68fb      	ldr	r3, [r7, #12]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	200005ac 	.word	0x200005ac

0800755c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800755c:	b580      	push	{r7, lr}
 800755e:	b092      	sub	sp, #72	; 0x48
 8007560:	af04      	add	r7, sp, #16
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007568:	2300      	movs	r3, #0
 800756a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800756c:	f3ef 8305 	mrs	r3, IPSR
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007574:	2b00      	cmp	r3, #0
 8007576:	f040 8094 	bne.w	80076a2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800757a:	f3ef 8310 	mrs	r3, PRIMASK
 800757e:	623b      	str	r3, [r7, #32]
  return(result);
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f040 808d 	bne.w	80076a2 <osThreadNew+0x146>
 8007588:	4b48      	ldr	r3, [pc, #288]	; (80076ac <osThreadNew+0x150>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d106      	bne.n	800759e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007590:	f3ef 8311 	mrs	r3, BASEPRI
 8007594:	61fb      	str	r3, [r7, #28]
  return(result);
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f040 8082 	bne.w	80076a2 <osThreadNew+0x146>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d07e      	beq.n	80076a2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80075a8:	2318      	movs	r3, #24
 80075aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80075ac:	2300      	movs	r3, #0
 80075ae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80075b0:	f107 031b 	add.w	r3, r7, #27
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80075b6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d045      	beq.n	800764e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <osThreadNew+0x74>
        name = attr->name;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d008      	beq.n	80075f6 <osThreadNew+0x9a>
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	2b38      	cmp	r3, #56	; 0x38
 80075e8:	d805      	bhi.n	80075f6 <osThreadNew+0x9a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <osThreadNew+0x9e>
        return (NULL);
 80075f6:	2300      	movs	r3, #0
 80075f8:	e054      	b.n	80076a4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	089b      	lsrs	r3, r3, #2
 8007608:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00e      	beq.n	8007630 <osThreadNew+0xd4>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	2b5b      	cmp	r3, #91	; 0x5b
 8007618:	d90a      	bls.n	8007630 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800761e:	2b00      	cmp	r3, #0
 8007620:	d006      	beq.n	8007630 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <osThreadNew+0xd4>
        mem = 1;
 800762a:	2301      	movs	r3, #1
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28
 800762e:	e010      	b.n	8007652 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10c      	bne.n	8007652 <osThreadNew+0xf6>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d108      	bne.n	8007652 <osThreadNew+0xf6>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <osThreadNew+0xf6>
          mem = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	62bb      	str	r3, [r7, #40]	; 0x28
 800764c:	e001      	b.n	8007652 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	2b01      	cmp	r3, #1
 8007656:	d110      	bne.n	800767a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007660:	9202      	str	r2, [sp, #8]
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 fe12 	bl	8008298 <xTaskCreateStatic>
 8007674:	4603      	mov	r3, r0
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e013      	b.n	80076a2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	2b00      	cmp	r3, #0
 800767e:	d110      	bne.n	80076a2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	b29a      	uxth	r2, r3
 8007684:	f107 0314 	add.w	r3, r7, #20
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fe5c 	bl	8008350 <xTaskCreate>
 8007698:	4603      	mov	r3, r0
 800769a:	2b01      	cmp	r3, #1
 800769c:	d001      	beq.n	80076a2 <osThreadNew+0x146>
          hTask = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076a2:	697b      	ldr	r3, [r7, #20]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3738      	adds	r7, #56	; 0x38
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	200005ac 	.word	0x200005ac

080076b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b8:	f3ef 8305 	mrs	r3, IPSR
 80076bc:	613b      	str	r3, [r7, #16]
  return(result);
 80076be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10f      	bne.n	80076e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c4:	f3ef 8310 	mrs	r3, PRIMASK
 80076c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d109      	bne.n	80076e4 <osDelay+0x34>
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <osDelay+0x58>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d109      	bne.n	80076ec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076d8:	f3ef 8311 	mrs	r3, BASEPRI
 80076dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <osDelay+0x3c>
    stat = osErrorISR;
 80076e4:	f06f 0305 	mvn.w	r3, #5
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e007      	b.n	80076fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 ff66 	bl	80085c8 <vTaskDelay>
    }
  }

  return (stat);
 80076fc:	697b      	ldr	r3, [r7, #20]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	200005ac 	.word	0x200005ac

0800770c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4a06      	ldr	r2, [pc, #24]	; (8007734 <vApplicationGetIdleTaskMemory+0x28>)
 800771c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4a05      	ldr	r2, [pc, #20]	; (8007738 <vApplicationGetIdleTaskMemory+0x2c>)
 8007722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2280      	movs	r2, #128	; 0x80
 8007728:	601a      	str	r2, [r3, #0]
}
 800772a:	bf00      	nop
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	bc80      	pop	{r7}
 8007732:	4770      	bx	lr
 8007734:	200005b0 	.word	0x200005b0
 8007738:	2000060c 	.word	0x2000060c

0800773c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4a07      	ldr	r2, [pc, #28]	; (8007768 <vApplicationGetTimerTaskMemory+0x2c>)
 800774c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	4a06      	ldr	r2, [pc, #24]	; (800776c <vApplicationGetTimerTaskMemory+0x30>)
 8007752:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800775a:	601a      	str	r2, [r3, #0]
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	2000080c 	.word	0x2000080c
 800776c:	20000868 	.word	0x20000868

08007770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f103 0208 	add.w	r2, r3, #8
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f04f 32ff 	mov.w	r2, #4294967295
 8007788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f103 0208 	add.w	r2, r3, #8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f103 0208 	add.w	r2, r3, #8
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr

080077ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr

080077c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	601a      	str	r2, [r3, #0]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr

0800780c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d103      	bne.n	800782c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	e00c      	b.n	8007846 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3308      	adds	r3, #8
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e002      	b.n	800783a <vListInsert+0x2e>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	d2f6      	bcs.n	8007834 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	601a      	str	r2, [r3, #0]
}
 8007872:	bf00      	nop
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6892      	ldr	r2, [r2, #8]
 8007892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6852      	ldr	r2, [r2, #4]
 800789c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d103      	bne.n	80078b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	1e5a      	subs	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr
	...

080078d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078f6:	bf00      	nop
 80078f8:	e7fe      	b.n	80078f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078fa:	f001 ffc7 	bl	800988c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800790a:	fb01 f303 	mul.w	r3, r1, r3
 800790e:	441a      	add	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792a:	3b01      	subs	r3, #1
 800792c:	68f9      	ldr	r1, [r7, #12]
 800792e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007930:	fb01 f303 	mul.w	r3, r1, r3
 8007934:	441a      	add	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	22ff      	movs	r2, #255	; 0xff
 800793e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	22ff      	movs	r2, #255	; 0xff
 8007946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d114      	bne.n	800797a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01a      	beq.n	800798e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3310      	adds	r3, #16
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f8f1 	bl	8008b44 <xTaskRemoveFromEventList>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d012      	beq.n	800798e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <xQueueGenericReset+0xcc>)
 800796a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	e009      	b.n	800798e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3310      	adds	r3, #16
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff fef6 	bl	8007770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3324      	adds	r3, #36	; 0x24
 8007988:	4618      	mov	r0, r3
 800798a:	f7ff fef1 	bl	8007770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800798e:	f001 ffad 	bl	80098ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007992:	2301      	movs	r3, #1
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08e      	sub	sp, #56	; 0x38
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <xQueueGenericCreateStatic+0x52>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <xQueueGenericCreateStatic+0x56>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <xQueueGenericCreateStatic+0x58>
 80079f6:	2300      	movs	r3, #0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	623b      	str	r3, [r7, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d102      	bne.n	8007a1e <xQueueGenericCreateStatic+0x7e>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <xQueueGenericCreateStatic+0x82>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <xQueueGenericCreateStatic+0x84>
 8007a22:	2300      	movs	r3, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	61fb      	str	r3, [r7, #28]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a3e:	2350      	movs	r3, #80	; 0x50
 8007a40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b50      	cmp	r3, #80	; 0x50
 8007a46:	d00a      	beq.n	8007a5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	61bb      	str	r3, [r7, #24]
}
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00d      	beq.n	8007a84 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a70:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f805 	bl	8007a8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3730      	adds	r7, #48	; 0x30
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	607a      	str	r2, [r7, #4]
 8007a9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	e002      	b.n	8007ab0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007abc:	2101      	movs	r1, #1
 8007abe:	69b8      	ldr	r0, [r7, #24]
 8007ac0:	f7ff ff06 	bl	80078d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	78fa      	ldrb	r2, [r7, #3]
 8007ac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007acc:	bf00      	nop
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08e      	sub	sp, #56	; 0x38
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <xQueueGenericSend+0x32>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <xQueueGenericSend+0x40>
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <xQueueGenericSend+0x44>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e000      	b.n	8007b1a <xQueueGenericSend+0x46>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <xQueueGenericSend+0x60>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d103      	bne.n	8007b42 <xQueueGenericSend+0x6e>
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <xQueueGenericSend+0x72>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <xQueueGenericSend+0x74>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <xQueueGenericSend+0x8e>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	623b      	str	r3, [r7, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b62:	f001 f9b1 	bl	8008ec8 <xTaskGetSchedulerState>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <xQueueGenericSend+0x9e>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <xQueueGenericSend+0xa2>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <xQueueGenericSend+0xa4>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <xQueueGenericSend+0xbe>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	61fb      	str	r3, [r7, #28]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b92:	f001 fe7b 	bl	800988c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d302      	bcc.n	8007ba8 <xQueueGenericSend+0xd4>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d129      	bne.n	8007bfc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bae:	f000 fa07 	bl	8007fc0 <prvCopyDataToQueue>
 8007bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d010      	beq.n	8007bde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	3324      	adds	r3, #36	; 0x24
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 ffbf 	bl	8008b44 <xTaskRemoveFromEventList>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d013      	beq.n	8007bf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <xQueueGenericSend+0x1f8>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	e00a      	b.n	8007bf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d007      	beq.n	8007bf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007be4:	4b39      	ldr	r3, [pc, #228]	; (8007ccc <xQueueGenericSend+0x1f8>)
 8007be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bf4:	f001 fe7a 	bl	80098ec <vPortExitCritical>
				return pdPASS;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e063      	b.n	8007cc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c02:	f001 fe73 	bl	80098ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	e05c      	b.n	8007cc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d106      	bne.n	8007c1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c10:	f107 0314 	add.w	r3, r7, #20
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fff9 	bl	8008c0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c1e:	f001 fe65 	bl	80098ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c22:	f000 fd6b 	bl	80086fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c26:	f001 fe31 	bl	800988c <vPortEnterCritical>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c30:	b25b      	sxtb	r3, r3
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c36:	d103      	bne.n	8007c40 <xQueueGenericSend+0x16c>
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c46:	b25b      	sxtb	r3, r3
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d103      	bne.n	8007c56 <xQueueGenericSend+0x182>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c56:	f001 fe49 	bl	80098ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c5a:	1d3a      	adds	r2, r7, #4
 8007c5c:	f107 0314 	add.w	r3, r7, #20
 8007c60:	4611      	mov	r1, r2
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 ffe8 	bl	8008c38 <xTaskCheckForTimeOut>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d124      	bne.n	8007cb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c70:	f000 fa9e 	bl	80081b0 <prvIsQueueFull>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d018      	beq.n	8007cac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	3310      	adds	r3, #16
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 ff0e 	bl	8008aa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c8a:	f000 fa29 	bl	80080e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c8e:	f000 fd43 	bl	8008718 <xTaskResumeAll>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f47f af7c 	bne.w	8007b92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <xQueueGenericSend+0x1f8>)
 8007c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	e772      	b.n	8007b92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cae:	f000 fa17 	bl	80080e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cb2:	f000 fd31 	bl	8008718 <xTaskResumeAll>
 8007cb6:	e76c      	b.n	8007b92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cba:	f000 fa11 	bl	80080e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cbe:	f000 fd2b 	bl	8008718 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cc2:	2300      	movs	r3, #0
		}
	}
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3738      	adds	r7, #56	; 0x38
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08e      	sub	sp, #56	; 0x38
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <xQueueGenericSendFromISR+0x3c>
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <xQueueGenericSendFromISR+0x40>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <xQueueGenericSendFromISR+0x42>
 8007d10:	2300      	movs	r3, #0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	623b      	str	r3, [r7, #32]
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d103      	bne.n	8007d3a <xQueueGenericSendFromISR+0x6a>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <xQueueGenericSendFromISR+0x6e>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueGenericSendFromISR+0x70>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	61fb      	str	r3, [r7, #28]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d5a:	f001 fe59 	bl	8009a10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	61ba      	str	r2, [r7, #24]
 8007d74:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d76:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d302      	bcc.n	8007d8c <xQueueGenericSendFromISR+0xbc>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d12c      	bne.n	8007de6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d9c:	f000 f910 	bl	8007fc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007da0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d112      	bne.n	8007dd0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d016      	beq.n	8007de0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	3324      	adds	r3, #36	; 0x24
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fec4 	bl	8008b44 <xTaskRemoveFromEventList>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00e      	beq.n	8007de0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	e007      	b.n	8007de0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	b25a      	sxtb	r2, r3
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007de0:	2301      	movs	r3, #1
 8007de2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007de4:	e001      	b.n	8007dea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007df4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3738      	adds	r7, #56	; 0x38
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08c      	sub	sp, #48	; 0x30
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <xQueueReceive+0x30>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	623b      	str	r3, [r7, #32]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <xQueueReceive+0x3e>
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <xQueueReceive+0x42>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <xQueueReceive+0x44>
 8007e42:	2300      	movs	r3, #0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xQueueReceive+0x5e>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	61fb      	str	r3, [r7, #28]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e5e:	f001 f833 	bl	8008ec8 <xTaskGetSchedulerState>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <xQueueReceive+0x6e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <xQueueReceive+0x72>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e000      	b.n	8007e74 <xQueueReceive+0x74>
 8007e72:	2300      	movs	r3, #0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <xQueueReceive+0x8e>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	61bb      	str	r3, [r7, #24]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e8e:	f001 fcfd 	bl	800988c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d01f      	beq.n	8007ede <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea2:	f000 f8f7 	bl	8008094 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	1e5a      	subs	r2, r3, #1
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00f      	beq.n	8007ed6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	3310      	adds	r3, #16
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fe42 	bl	8008b44 <xTaskRemoveFromEventList>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d007      	beq.n	8007ed6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ec6:	4b3d      	ldr	r3, [pc, #244]	; (8007fbc <xQueueReceive+0x1bc>)
 8007ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ed6:	f001 fd09 	bl	80098ec <vPortExitCritical>
				return pdPASS;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e069      	b.n	8007fb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d103      	bne.n	8007eec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ee4:	f001 fd02 	bl	80098ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e062      	b.n	8007fb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ef2:	f107 0310 	add.w	r3, r7, #16
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fe88 	bl	8008c0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007efc:	2301      	movs	r3, #1
 8007efe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f00:	f001 fcf4 	bl	80098ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f04:	f000 fbfa 	bl	80086fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f08:	f001 fcc0 	bl	800988c <vPortEnterCritical>
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f12:	b25b      	sxtb	r3, r3
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f18:	d103      	bne.n	8007f22 <xQueueReceive+0x122>
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f28:	b25b      	sxtb	r3, r3
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2e:	d103      	bne.n	8007f38 <xQueueReceive+0x138>
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f38:	f001 fcd8 	bl	80098ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f3c:	1d3a      	adds	r2, r7, #4
 8007f3e:	f107 0310 	add.w	r3, r7, #16
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fe77 	bl	8008c38 <xTaskCheckForTimeOut>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d123      	bne.n	8007f98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f52:	f000 f917 	bl	8008184 <prvIsQueueEmpty>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d017      	beq.n	8007f8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5e:	3324      	adds	r3, #36	; 0x24
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fd9d 	bl	8008aa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f6c:	f000 f8b8 	bl	80080e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f70:	f000 fbd2 	bl	8008718 <xTaskResumeAll>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d189      	bne.n	8007e8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f7a:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <xQueueReceive+0x1bc>)
 8007f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	e780      	b.n	8007e8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f8e:	f000 f8a7 	bl	80080e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f92:	f000 fbc1 	bl	8008718 <xTaskResumeAll>
 8007f96:	e77a      	b.n	8007e8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9a:	f000 f8a1 	bl	80080e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f9e:	f000 fbbb 	bl	8008718 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa4:	f000 f8ee 	bl	8008184 <prvIsQueueEmpty>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f43f af6f 	beq.w	8007e8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3730      	adds	r7, #48	; 0x30
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10d      	bne.n	8007ffa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d14d      	bne.n	8008082 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 ff8a 	bl	8008f04 <xTaskPriorityDisinherit>
 8007ff0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	605a      	str	r2, [r3, #4]
 8007ff8:	e043      	b.n	8008082 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d119      	bne.n	8008034 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6898      	ldr	r0, [r3, #8]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008008:	461a      	mov	r2, r3
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	f001 ff3e 	bl	8009e8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	441a      	add	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d32b      	bcc.n	8008082 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	609a      	str	r2, [r3, #8]
 8008032:	e026      	b.n	8008082 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	68d8      	ldr	r0, [r3, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	461a      	mov	r2, r3
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	f001 ff24 	bl	8009e8c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	425b      	negs	r3, r3
 800804e:	441a      	add	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	429a      	cmp	r2, r3
 800805e:	d207      	bcs.n	8008070 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	425b      	negs	r3, r3
 800806a:	441a      	add	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d105      	bne.n	8008082 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	3b01      	subs	r3, #1
 8008080:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800808a:	697b      	ldr	r3, [r7, #20]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d018      	beq.n	80080d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	441a      	add	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d303      	bcc.n	80080c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68d9      	ldr	r1, [r3, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	461a      	mov	r2, r3
 80080d2:	6838      	ldr	r0, [r7, #0]
 80080d4:	f001 feda 	bl	8009e8c <memcpy>
	}
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080e8:	f001 fbd0 	bl	800988c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080f4:	e011      	b.n	800811a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d012      	beq.n	8008124 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3324      	adds	r3, #36	; 0x24
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fd1e 	bl	8008b44 <xTaskRemoveFromEventList>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800810e:	f000 fdf5 	bl	8008cfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	3b01      	subs	r3, #1
 8008116:	b2db      	uxtb	r3, r3
 8008118:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800811a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800811e:	2b00      	cmp	r3, #0
 8008120:	dce9      	bgt.n	80080f6 <prvUnlockQueue+0x16>
 8008122:	e000      	b.n	8008126 <prvUnlockQueue+0x46>
					break;
 8008124:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	22ff      	movs	r2, #255	; 0xff
 800812a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800812e:	f001 fbdd 	bl	80098ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008132:	f001 fbab 	bl	800988c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800813c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800813e:	e011      	b.n	8008164 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d012      	beq.n	800816e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3310      	adds	r3, #16
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fcf9 	bl	8008b44 <xTaskRemoveFromEventList>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008158:	f000 fdd0 	bl	8008cfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	3b01      	subs	r3, #1
 8008160:	b2db      	uxtb	r3, r3
 8008162:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008168:	2b00      	cmp	r3, #0
 800816a:	dce9      	bgt.n	8008140 <prvUnlockQueue+0x60>
 800816c:	e000      	b.n	8008170 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800816e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	22ff      	movs	r2, #255	; 0xff
 8008174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008178:	f001 fbb8 	bl	80098ec <vPortExitCritical>
}
 800817c:	bf00      	nop
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800818c:	f001 fb7e 	bl	800988c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008198:	2301      	movs	r3, #1
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	e001      	b.n	80081a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081a2:	f001 fba3 	bl	80098ec <vPortExitCritical>

	return xReturn;
 80081a6:	68fb      	ldr	r3, [r7, #12]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081b8:	f001 fb68 	bl	800988c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d102      	bne.n	80081ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80081c8:	2301      	movs	r3, #1
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e001      	b.n	80081d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081d2:	f001 fb8b 	bl	80098ec <vPortExitCritical>

	return xReturn;
 80081d6:	68fb      	ldr	r3, [r7, #12]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	e014      	b.n	800821a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081f0:	4a0e      	ldr	r2, [pc, #56]	; (800822c <vQueueAddToRegistry+0x4c>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081fc:	490b      	ldr	r1, [pc, #44]	; (800822c <vQueueAddToRegistry+0x4c>)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <vQueueAddToRegistry+0x4c>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	4413      	add	r3, r2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008212:	e006      	b.n	8008222 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3301      	adds	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b07      	cmp	r3, #7
 800821e:	d9e7      	bls.n	80081f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	bc80      	pop	{r7}
 800822a:	4770      	bx	lr
 800822c:	20002298 	.word	0x20002298

08008230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008240:	f001 fb24 	bl	800988c <vPortEnterCritical>
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800824a:	b25b      	sxtb	r3, r3
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008250:	d103      	bne.n	800825a <vQueueWaitForMessageRestricted+0x2a>
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008260:	b25b      	sxtb	r3, r3
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008266:	d103      	bne.n	8008270 <vQueueWaitForMessageRestricted+0x40>
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008270:	f001 fb3c 	bl	80098ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	3324      	adds	r3, #36	; 0x24
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	68b9      	ldr	r1, [r7, #8]
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fc31 	bl	8008aec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800828a:	6978      	ldr	r0, [r7, #20]
 800828c:	f7ff ff28 	bl	80080e0 <prvUnlockQueue>
	}
 8008290:	bf00      	nop
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08e      	sub	sp, #56	; 0x38
 800829c:	af04      	add	r7, sp, #16
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	623b      	str	r3, [r7, #32]
}
 80082be:	bf00      	nop
 80082c0:	e7fe      	b.n	80082c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <xTaskCreateStatic+0x46>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	61fb      	str	r3, [r7, #28]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082de:	235c      	movs	r3, #92	; 0x5c
 80082e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	2b5c      	cmp	r3, #92	; 0x5c
 80082e6:	d00a      	beq.n	80082fe <xTaskCreateStatic+0x66>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	61bb      	str	r3, [r7, #24]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	2b00      	cmp	r3, #0
 8008302:	d01e      	beq.n	8008342 <xTaskCreateStatic+0xaa>
 8008304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01b      	beq.n	8008342 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008312:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	2202      	movs	r2, #2
 8008318:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800831c:	2300      	movs	r3, #0
 800831e:	9303      	str	r3, [sp, #12]
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	9302      	str	r3, [sp, #8]
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f850 	bl	80083da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800833a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800833c:	f000 f8d4 	bl	80084e8 <prvAddNewTaskToReadyList>
 8008340:	e001      	b.n	8008346 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008346:	697b      	ldr	r3, [r7, #20]
	}
 8008348:	4618      	mov	r0, r3
 800834a:	3728      	adds	r7, #40	; 0x28
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08c      	sub	sp, #48	; 0x30
 8008354:	af04      	add	r7, sp, #16
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	4613      	mov	r3, r2
 800835e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4618      	mov	r0, r3
 8008366:	f001 fb91 	bl	8009a8c <pvPortMalloc>
 800836a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00e      	beq.n	8008390 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008372:	205c      	movs	r0, #92	; 0x5c
 8008374:	f001 fb8a 	bl	8009a8c <pvPortMalloc>
 8008378:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d003      	beq.n	8008388 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	631a      	str	r2, [r3, #48]	; 0x30
 8008386:	e005      	b.n	8008394 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008388:	6978      	ldr	r0, [r7, #20]
 800838a:	f001 fc43 	bl	8009c14 <vPortFree>
 800838e:	e001      	b.n	8008394 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d017      	beq.n	80083ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083a2:	88fa      	ldrh	r2, [r7, #6]
 80083a4:	2300      	movs	r3, #0
 80083a6:	9303      	str	r3, [sp, #12]
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	9302      	str	r3, [sp, #8]
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 f80e 	bl	80083da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083be:	69f8      	ldr	r0, [r7, #28]
 80083c0:	f000 f892 	bl	80084e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083c4:	2301      	movs	r3, #1
 80083c6:	61bb      	str	r3, [r7, #24]
 80083c8:	e002      	b.n	80083d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083ca:	f04f 33ff 	mov.w	r3, #4294967295
 80083ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083d0:	69bb      	ldr	r3, [r7, #24]
	}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3720      	adds	r7, #32
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b088      	sub	sp, #32
 80083de:	af00      	add	r7, sp, #0
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	60b9      	str	r1, [r7, #8]
 80083e4:	607a      	str	r2, [r7, #4]
 80083e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	461a      	mov	r2, r3
 80083f2:	21a5      	movs	r1, #165	; 0xa5
 80083f4:	f001 fd72 	bl	8009edc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008402:	3b01      	subs	r3, #1
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f023 0307 	bic.w	r3, r3, #7
 8008410:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	f003 0307 	and.w	r3, r3, #7
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <prvInitialiseNewTask+0x58>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	617b      	str	r3, [r7, #20]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008432:	2300      	movs	r3, #0
 8008434:	61fb      	str	r3, [r7, #28]
 8008436:	e012      	b.n	800845e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	7819      	ldrb	r1, [r3, #0]
 8008440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	4413      	add	r3, r2
 8008446:	3334      	adds	r3, #52	; 0x34
 8008448:	460a      	mov	r2, r1
 800844a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d006      	beq.n	8008466 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	3301      	adds	r3, #1
 800845c:	61fb      	str	r3, [r7, #28]
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	2b0f      	cmp	r3, #15
 8008462:	d9e9      	bls.n	8008438 <prvInitialiseNewTask+0x5e>
 8008464:	e000      	b.n	8008468 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008466:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	2b37      	cmp	r3, #55	; 0x37
 8008474:	d901      	bls.n	800847a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008476:	2337      	movs	r3, #55	; 0x37
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800847e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008484:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	2200      	movs	r2, #0
 800848a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	3304      	adds	r3, #4
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff f98c 	bl	80077ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	3318      	adds	r3, #24
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff f987 	bl	80077ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	2200      	movs	r2, #0
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	68f9      	ldr	r1, [r7, #12]
 80084c8:	69b8      	ldr	r0, [r7, #24]
 80084ca:	f001 f8ef 	bl	80096ac <pxPortInitialiseStack>
 80084ce:	4602      	mov	r2, r0
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084e0:	bf00      	nop
 80084e2:	3720      	adds	r7, #32
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084f0:	f001 f9cc 	bl	800988c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084f4:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <prvAddNewTaskToReadyList+0xc4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3301      	adds	r3, #1
 80084fa:	4a2c      	ldr	r2, [pc, #176]	; (80085ac <prvAddNewTaskToReadyList+0xc4>)
 80084fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084fe:	4b2c      	ldr	r3, [pc, #176]	; (80085b0 <prvAddNewTaskToReadyList+0xc8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008506:	4a2a      	ldr	r2, [pc, #168]	; (80085b0 <prvAddNewTaskToReadyList+0xc8>)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800850c:	4b27      	ldr	r3, [pc, #156]	; (80085ac <prvAddNewTaskToReadyList+0xc4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d110      	bne.n	8008536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008514:	f000 fc16 	bl	8008d44 <prvInitialiseTaskLists>
 8008518:	e00d      	b.n	8008536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800851a:	4b26      	ldr	r3, [pc, #152]	; (80085b4 <prvAddNewTaskToReadyList+0xcc>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008522:	4b23      	ldr	r3, [pc, #140]	; (80085b0 <prvAddNewTaskToReadyList+0xc8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	429a      	cmp	r2, r3
 800852e:	d802      	bhi.n	8008536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008530:	4a1f      	ldr	r2, [pc, #124]	; (80085b0 <prvAddNewTaskToReadyList+0xc8>)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008536:	4b20      	ldr	r3, [pc, #128]	; (80085b8 <prvAddNewTaskToReadyList+0xd0>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3301      	adds	r3, #1
 800853c:	4a1e      	ldr	r2, [pc, #120]	; (80085b8 <prvAddNewTaskToReadyList+0xd0>)
 800853e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008540:	4b1d      	ldr	r3, [pc, #116]	; (80085b8 <prvAddNewTaskToReadyList+0xd0>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854c:	4b1b      	ldr	r3, [pc, #108]	; (80085bc <prvAddNewTaskToReadyList+0xd4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d903      	bls.n	800855c <prvAddNewTaskToReadyList+0x74>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	4a18      	ldr	r2, [pc, #96]	; (80085bc <prvAddNewTaskToReadyList+0xd4>)
 800855a:	6013      	str	r3, [r2, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008560:	4613      	mov	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <prvAddNewTaskToReadyList+0xd8>)
 800856a:	441a      	add	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3304      	adds	r3, #4
 8008570:	4619      	mov	r1, r3
 8008572:	4610      	mov	r0, r2
 8008574:	f7ff f927 	bl	80077c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008578:	f001 f9b8 	bl	80098ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800857c:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <prvAddNewTaskToReadyList+0xcc>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00e      	beq.n	80085a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008584:	4b0a      	ldr	r3, [pc, #40]	; (80085b0 <prvAddNewTaskToReadyList+0xc8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	429a      	cmp	r2, r3
 8008590:	d207      	bcs.n	80085a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008592:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <prvAddNewTaskToReadyList+0xdc>)
 8008594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085a2:	bf00      	nop
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	2000113c 	.word	0x2000113c
 80085b0:	20000c68 	.word	0x20000c68
 80085b4:	20001148 	.word	0x20001148
 80085b8:	20001158 	.word	0x20001158
 80085bc:	20001144 	.word	0x20001144
 80085c0:	20000c6c 	.word	0x20000c6c
 80085c4:	e000ed04 	.word	0xe000ed04

080085c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d017      	beq.n	800860a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085da:	4b13      	ldr	r3, [pc, #76]	; (8008628 <vTaskDelay+0x60>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <vTaskDelay+0x30>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	60bb      	str	r3, [r7, #8]
}
 80085f4:	bf00      	nop
 80085f6:	e7fe      	b.n	80085f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085f8:	f000 f880 	bl	80086fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085fc:	2100      	movs	r1, #0
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fcee 	bl	8008fe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008604:	f000 f888 	bl	8008718 <xTaskResumeAll>
 8008608:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d107      	bne.n	8008620 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008610:	4b06      	ldr	r3, [pc, #24]	; (800862c <vTaskDelay+0x64>)
 8008612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20001164 	.word	0x20001164
 800862c:	e000ed04 	.word	0xe000ed04

08008630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08a      	sub	sp, #40	; 0x28
 8008634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008636:	2300      	movs	r3, #0
 8008638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800863a:	2300      	movs	r3, #0
 800863c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800863e:	463a      	mov	r2, r7
 8008640:	1d39      	adds	r1, r7, #4
 8008642:	f107 0308 	add.w	r3, r7, #8
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff f860 	bl	800770c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	9202      	str	r2, [sp, #8]
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	2300      	movs	r3, #0
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	2300      	movs	r3, #0
 800865c:	460a      	mov	r2, r1
 800865e:	4921      	ldr	r1, [pc, #132]	; (80086e4 <vTaskStartScheduler+0xb4>)
 8008660:	4821      	ldr	r0, [pc, #132]	; (80086e8 <vTaskStartScheduler+0xb8>)
 8008662:	f7ff fe19 	bl	8008298 <xTaskCreateStatic>
 8008666:	4603      	mov	r3, r0
 8008668:	4a20      	ldr	r2, [pc, #128]	; (80086ec <vTaskStartScheduler+0xbc>)
 800866a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800866c:	4b1f      	ldr	r3, [pc, #124]	; (80086ec <vTaskStartScheduler+0xbc>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008674:	2301      	movs	r3, #1
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	e001      	b.n	800867e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800867a:	2300      	movs	r3, #0
 800867c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d102      	bne.n	800868a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008684:	f000 fd00 	bl	8009088 <xTimerCreateTimerTask>
 8008688:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d116      	bne.n	80086be <vTaskStartScheduler+0x8e>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	613b      	str	r3, [r7, #16]
}
 80086a2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086a4:	4b12      	ldr	r3, [pc, #72]	; (80086f0 <vTaskStartScheduler+0xc0>)
 80086a6:	f04f 32ff 	mov.w	r2, #4294967295
 80086aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086ac:	4b11      	ldr	r3, [pc, #68]	; (80086f4 <vTaskStartScheduler+0xc4>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80086b2:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <vTaskStartScheduler+0xc8>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086b8:	f001 f876 	bl	80097a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086bc:	e00e      	b.n	80086dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c4:	d10a      	bne.n	80086dc <vTaskStartScheduler+0xac>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	60fb      	str	r3, [r7, #12]
}
 80086d8:	bf00      	nop
 80086da:	e7fe      	b.n	80086da <vTaskStartScheduler+0xaa>
}
 80086dc:	bf00      	nop
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	0800ead4 	.word	0x0800ead4
 80086e8:	08008d15 	.word	0x08008d15
 80086ec:	20001160 	.word	0x20001160
 80086f0:	2000115c 	.word	0x2000115c
 80086f4:	20001148 	.word	0x20001148
 80086f8:	20001140 	.word	0x20001140

080086fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008700:	4b04      	ldr	r3, [pc, #16]	; (8008714 <vTaskSuspendAll+0x18>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	4a03      	ldr	r2, [pc, #12]	; (8008714 <vTaskSuspendAll+0x18>)
 8008708:	6013      	str	r3, [r2, #0]
}
 800870a:	bf00      	nop
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	20001164 	.word	0x20001164

08008718 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008722:	2300      	movs	r3, #0
 8008724:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008726:	4b42      	ldr	r3, [pc, #264]	; (8008830 <xTaskResumeAll+0x118>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <xTaskResumeAll+0x2c>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	603b      	str	r3, [r7, #0]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008744:	f001 f8a2 	bl	800988c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008748:	4b39      	ldr	r3, [pc, #228]	; (8008830 <xTaskResumeAll+0x118>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3b01      	subs	r3, #1
 800874e:	4a38      	ldr	r2, [pc, #224]	; (8008830 <xTaskResumeAll+0x118>)
 8008750:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008752:	4b37      	ldr	r3, [pc, #220]	; (8008830 <xTaskResumeAll+0x118>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d162      	bne.n	8008820 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800875a:	4b36      	ldr	r3, [pc, #216]	; (8008834 <xTaskResumeAll+0x11c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d05e      	beq.n	8008820 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008762:	e02f      	b.n	80087c4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008764:	4b34      	ldr	r3, [pc, #208]	; (8008838 <xTaskResumeAll+0x120>)
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3318      	adds	r3, #24
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff f883 	bl	800787c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3304      	adds	r3, #4
 800877a:	4618      	mov	r0, r3
 800877c:	f7ff f87e 	bl	800787c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	4b2d      	ldr	r3, [pc, #180]	; (800883c <xTaskResumeAll+0x124>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d903      	bls.n	8008794 <xTaskResumeAll+0x7c>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	4a2a      	ldr	r2, [pc, #168]	; (800883c <xTaskResumeAll+0x124>)
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4a27      	ldr	r2, [pc, #156]	; (8008840 <xTaskResumeAll+0x128>)
 80087a2:	441a      	add	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3304      	adds	r3, #4
 80087a8:	4619      	mov	r1, r3
 80087aa:	4610      	mov	r0, r2
 80087ac:	f7ff f80b 	bl	80077c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	4b23      	ldr	r3, [pc, #140]	; (8008844 <xTaskResumeAll+0x12c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d302      	bcc.n	80087c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80087be:	4b22      	ldr	r3, [pc, #136]	; (8008848 <xTaskResumeAll+0x130>)
 80087c0:	2201      	movs	r2, #1
 80087c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087c4:	4b1c      	ldr	r3, [pc, #112]	; (8008838 <xTaskResumeAll+0x120>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1cb      	bne.n	8008764 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087d2:	f000 fb55 	bl	8008e80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80087d6:	4b1d      	ldr	r3, [pc, #116]	; (800884c <xTaskResumeAll+0x134>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d010      	beq.n	8008804 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087e2:	f000 f845 	bl	8008870 <xTaskIncrementTick>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80087ec:	4b16      	ldr	r3, [pc, #88]	; (8008848 <xTaskResumeAll+0x130>)
 80087ee:	2201      	movs	r2, #1
 80087f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1f1      	bne.n	80087e2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80087fe:	4b13      	ldr	r3, [pc, #76]	; (800884c <xTaskResumeAll+0x134>)
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008804:	4b10      	ldr	r3, [pc, #64]	; (8008848 <xTaskResumeAll+0x130>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d009      	beq.n	8008820 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800880c:	2301      	movs	r3, #1
 800880e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008810:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <xTaskResumeAll+0x138>)
 8008812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008820:	f001 f864 	bl	80098ec <vPortExitCritical>

	return xAlreadyYielded;
 8008824:	68bb      	ldr	r3, [r7, #8]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20001164 	.word	0x20001164
 8008834:	2000113c 	.word	0x2000113c
 8008838:	200010fc 	.word	0x200010fc
 800883c:	20001144 	.word	0x20001144
 8008840:	20000c6c 	.word	0x20000c6c
 8008844:	20000c68 	.word	0x20000c68
 8008848:	20001150 	.word	0x20001150
 800884c:	2000114c 	.word	0x2000114c
 8008850:	e000ed04 	.word	0xe000ed04

08008854 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800885a:	4b04      	ldr	r3, [pc, #16]	; (800886c <xTaskGetTickCount+0x18>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008860:	687b      	ldr	r3, [r7, #4]
}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr
 800886c:	20001140 	.word	0x20001140

08008870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008876:	2300      	movs	r3, #0
 8008878:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800887a:	4b51      	ldr	r3, [pc, #324]	; (80089c0 <xTaskIncrementTick+0x150>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f040 808e 	bne.w	80089a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008884:	4b4f      	ldr	r3, [pc, #316]	; (80089c4 <xTaskIncrementTick+0x154>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3301      	adds	r3, #1
 800888a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800888c:	4a4d      	ldr	r2, [pc, #308]	; (80089c4 <xTaskIncrementTick+0x154>)
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d120      	bne.n	80088da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008898:	4b4b      	ldr	r3, [pc, #300]	; (80089c8 <xTaskIncrementTick+0x158>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	603b      	str	r3, [r7, #0]
}
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <xTaskIncrementTick+0x46>
 80088b8:	4b43      	ldr	r3, [pc, #268]	; (80089c8 <xTaskIncrementTick+0x158>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	4b43      	ldr	r3, [pc, #268]	; (80089cc <xTaskIncrementTick+0x15c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a41      	ldr	r2, [pc, #260]	; (80089c8 <xTaskIncrementTick+0x158>)
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	4a41      	ldr	r2, [pc, #260]	; (80089cc <xTaskIncrementTick+0x15c>)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	4b40      	ldr	r3, [pc, #256]	; (80089d0 <xTaskIncrementTick+0x160>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3301      	adds	r3, #1
 80088d2:	4a3f      	ldr	r2, [pc, #252]	; (80089d0 <xTaskIncrementTick+0x160>)
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	f000 fad3 	bl	8008e80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088da:	4b3e      	ldr	r3, [pc, #248]	; (80089d4 <xTaskIncrementTick+0x164>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d34e      	bcc.n	8008982 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088e4:	4b38      	ldr	r3, [pc, #224]	; (80089c8 <xTaskIncrementTick+0x158>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <xTaskIncrementTick+0x82>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <xTaskIncrementTick+0x84>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088f8:	4b36      	ldr	r3, [pc, #216]	; (80089d4 <xTaskIncrementTick+0x164>)
 80088fa:	f04f 32ff 	mov.w	r2, #4294967295
 80088fe:	601a      	str	r2, [r3, #0]
					break;
 8008900:	e03f      	b.n	8008982 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008902:	4b31      	ldr	r3, [pc, #196]	; (80089c8 <xTaskIncrementTick+0x158>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	429a      	cmp	r2, r3
 8008918:	d203      	bcs.n	8008922 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800891a:	4a2e      	ldr	r2, [pc, #184]	; (80089d4 <xTaskIncrementTick+0x164>)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6013      	str	r3, [r2, #0]
						break;
 8008920:	e02f      	b.n	8008982 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	3304      	adds	r3, #4
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe ffa8 	bl	800787c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008930:	2b00      	cmp	r3, #0
 8008932:	d004      	beq.n	800893e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	3318      	adds	r3, #24
 8008938:	4618      	mov	r0, r3
 800893a:	f7fe ff9f 	bl	800787c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008942:	4b25      	ldr	r3, [pc, #148]	; (80089d8 <xTaskIncrementTick+0x168>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d903      	bls.n	8008952 <xTaskIncrementTick+0xe2>
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	4a22      	ldr	r2, [pc, #136]	; (80089d8 <xTaskIncrementTick+0x168>)
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4a1f      	ldr	r2, [pc, #124]	; (80089dc <xTaskIncrementTick+0x16c>)
 8008960:	441a      	add	r2, r3
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	3304      	adds	r3, #4
 8008966:	4619      	mov	r1, r3
 8008968:	4610      	mov	r0, r2
 800896a:	f7fe ff2c 	bl	80077c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008972:	4b1b      	ldr	r3, [pc, #108]	; (80089e0 <xTaskIncrementTick+0x170>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008978:	429a      	cmp	r2, r3
 800897a:	d3b3      	bcc.n	80088e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008980:	e7b0      	b.n	80088e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008982:	4b17      	ldr	r3, [pc, #92]	; (80089e0 <xTaskIncrementTick+0x170>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4914      	ldr	r1, [pc, #80]	; (80089dc <xTaskIncrementTick+0x16c>)
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d907      	bls.n	80089aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800899a:	2301      	movs	r3, #1
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	e004      	b.n	80089aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80089a0:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <xTaskIncrementTick+0x174>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3301      	adds	r3, #1
 80089a6:	4a0f      	ldr	r2, [pc, #60]	; (80089e4 <xTaskIncrementTick+0x174>)
 80089a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80089aa:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <xTaskIncrementTick+0x178>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80089b2:	2301      	movs	r3, #1
 80089b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80089b6:	697b      	ldr	r3, [r7, #20]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20001164 	.word	0x20001164
 80089c4:	20001140 	.word	0x20001140
 80089c8:	200010f4 	.word	0x200010f4
 80089cc:	200010f8 	.word	0x200010f8
 80089d0:	20001154 	.word	0x20001154
 80089d4:	2000115c 	.word	0x2000115c
 80089d8:	20001144 	.word	0x20001144
 80089dc:	20000c6c 	.word	0x20000c6c
 80089e0:	20000c68 	.word	0x20000c68
 80089e4:	2000114c 	.word	0x2000114c
 80089e8:	20001150 	.word	0x20001150

080089ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089f2:	4b27      	ldr	r3, [pc, #156]	; (8008a90 <vTaskSwitchContext+0xa4>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089fa:	4b26      	ldr	r3, [pc, #152]	; (8008a94 <vTaskSwitchContext+0xa8>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a00:	e041      	b.n	8008a86 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008a02:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <vTaskSwitchContext+0xa8>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008a08:	4b23      	ldr	r3, [pc, #140]	; (8008a98 <vTaskSwitchContext+0xac>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	e010      	b.n	8008a32 <vTaskSwitchContext+0x46>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <vTaskSwitchContext+0x40>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	607b      	str	r3, [r7, #4]
}
 8008a28:	bf00      	nop
 8008a2a:	e7fe      	b.n	8008a2a <vTaskSwitchContext+0x3e>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	491a      	ldr	r1, [pc, #104]	; (8008a9c <vTaskSwitchContext+0xb0>)
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0e4      	beq.n	8008a10 <vTaskSwitchContext+0x24>
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4a12      	ldr	r2, [pc, #72]	; (8008a9c <vTaskSwitchContext+0xb0>)
 8008a52:	4413      	add	r3, r2
 8008a54:	60bb      	str	r3, [r7, #8]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	605a      	str	r2, [r3, #4]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	3308      	adds	r3, #8
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d104      	bne.n	8008a76 <vTaskSwitchContext+0x8a>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	605a      	str	r2, [r3, #4]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	4a08      	ldr	r2, [pc, #32]	; (8008aa0 <vTaskSwitchContext+0xb4>)
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	4a05      	ldr	r2, [pc, #20]	; (8008a98 <vTaskSwitchContext+0xac>)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6013      	str	r3, [r2, #0]
}
 8008a86:	bf00      	nop
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bc80      	pop	{r7}
 8008a8e:	4770      	bx	lr
 8008a90:	20001164 	.word	0x20001164
 8008a94:	20001150 	.word	0x20001150
 8008a98:	20001144 	.word	0x20001144
 8008a9c:	20000c6c 	.word	0x20000c6c
 8008aa0:	20000c68 	.word	0x20000c68

08008aa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10a      	bne.n	8008aca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	60fb      	str	r3, [r7, #12]
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008aca:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <vTaskPlaceOnEventList+0x44>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3318      	adds	r3, #24
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7fe fe9a 	bl	800780c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ad8:	2101      	movs	r1, #1
 8008ada:	6838      	ldr	r0, [r7, #0]
 8008adc:	f000 fa80 	bl	8008fe0 <prvAddCurrentTaskToDelayedList>
}
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20000c68 	.word	0x20000c68

08008aec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	617b      	str	r3, [r7, #20]
}
 8008b10:	bf00      	nop
 8008b12:	e7fe      	b.n	8008b12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b14:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3318      	adds	r3, #24
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7fe fe52 	bl	80077c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b28:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	68b8      	ldr	r0, [r7, #8]
 8008b32:	f000 fa55 	bl	8008fe0 <prvAddCurrentTaskToDelayedList>
	}
 8008b36:	bf00      	nop
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20000c68 	.word	0x20000c68

08008b44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	60fb      	str	r3, [r7, #12]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	3318      	adds	r3, #24
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fe81 	bl	800787c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b7a:	4b1e      	ldr	r3, [pc, #120]	; (8008bf4 <xTaskRemoveFromEventList+0xb0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d11d      	bne.n	8008bbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fe78 	bl	800787c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b90:	4b19      	ldr	r3, [pc, #100]	; (8008bf8 <xTaskRemoveFromEventList+0xb4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d903      	bls.n	8008ba0 <xTaskRemoveFromEventList+0x5c>
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	4a16      	ldr	r2, [pc, #88]	; (8008bf8 <xTaskRemoveFromEventList+0xb4>)
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4a13      	ldr	r2, [pc, #76]	; (8008bfc <xTaskRemoveFromEventList+0xb8>)
 8008bae:	441a      	add	r2, r3
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7fe fe05 	bl	80077c6 <vListInsertEnd>
 8008bbc:	e005      	b.n	8008bca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	3318      	adds	r3, #24
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	480e      	ldr	r0, [pc, #56]	; (8008c00 <xTaskRemoveFromEventList+0xbc>)
 8008bc6:	f7fe fdfe 	bl	80077c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bce:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <xTaskRemoveFromEventList+0xc0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d905      	bls.n	8008be4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	; (8008c08 <xTaskRemoveFromEventList+0xc4>)
 8008bde:	2201      	movs	r2, #1
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	e001      	b.n	8008be8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008be4:	2300      	movs	r3, #0
 8008be6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008be8:	697b      	ldr	r3, [r7, #20]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20001164 	.word	0x20001164
 8008bf8:	20001144 	.word	0x20001144
 8008bfc:	20000c6c 	.word	0x20000c6c
 8008c00:	200010fc 	.word	0x200010fc
 8008c04:	20000c68 	.word	0x20000c68
 8008c08:	20001150 	.word	0x20001150

08008c0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c14:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <vTaskInternalSetTimeOutState+0x24>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <vTaskInternalSetTimeOutState+0x28>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	605a      	str	r2, [r3, #4]
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bc80      	pop	{r7}
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	20001154 	.word	0x20001154
 8008c34:	20001140 	.word	0x20001140

08008c38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	613b      	str	r3, [r7, #16]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	60fb      	str	r3, [r7, #12]
}
 8008c76:	bf00      	nop
 8008c78:	e7fe      	b.n	8008c78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c7a:	f000 fe07 	bl	800988c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c7e:	4b1d      	ldr	r3, [pc, #116]	; (8008cf4 <xTaskCheckForTimeOut+0xbc>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c96:	d102      	bne.n	8008c9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61fb      	str	r3, [r7, #28]
 8008c9c:	e023      	b.n	8008ce6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <xTaskCheckForTimeOut+0xc0>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d007      	beq.n	8008cba <xTaskCheckForTimeOut+0x82>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d302      	bcc.n	8008cba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	61fb      	str	r3, [r7, #28]
 8008cb8:	e015      	b.n	8008ce6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d20b      	bcs.n	8008cdc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	1ad2      	subs	r2, r2, r3
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff ff9b 	bl	8008c0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	e004      	b.n	8008ce6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ce6:	f000 fe01 	bl	80098ec <vPortExitCritical>

	return xReturn;
 8008cea:	69fb      	ldr	r3, [r7, #28]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3720      	adds	r7, #32
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20001140 	.word	0x20001140
 8008cf8:	20001154 	.word	0x20001154

08008cfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d00:	4b03      	ldr	r3, [pc, #12]	; (8008d10 <vTaskMissedYield+0x14>)
 8008d02:	2201      	movs	r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
}
 8008d06:	bf00      	nop
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	20001150 	.word	0x20001150

08008d14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d1c:	f000 f852 	bl	8008dc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d20:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <prvIdleTask+0x28>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d9f9      	bls.n	8008d1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d28:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <prvIdleTask+0x2c>)
 8008d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d38:	e7f0      	b.n	8008d1c <prvIdleTask+0x8>
 8008d3a:	bf00      	nop
 8008d3c:	20000c6c 	.word	0x20000c6c
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	607b      	str	r3, [r7, #4]
 8008d4e:	e00c      	b.n	8008d6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4a12      	ldr	r2, [pc, #72]	; (8008da4 <prvInitialiseTaskLists+0x60>)
 8008d5c:	4413      	add	r3, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fd06 	bl	8007770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3301      	adds	r3, #1
 8008d68:	607b      	str	r3, [r7, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b37      	cmp	r3, #55	; 0x37
 8008d6e:	d9ef      	bls.n	8008d50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d70:	480d      	ldr	r0, [pc, #52]	; (8008da8 <prvInitialiseTaskLists+0x64>)
 8008d72:	f7fe fcfd 	bl	8007770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d76:	480d      	ldr	r0, [pc, #52]	; (8008dac <prvInitialiseTaskLists+0x68>)
 8008d78:	f7fe fcfa 	bl	8007770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d7c:	480c      	ldr	r0, [pc, #48]	; (8008db0 <prvInitialiseTaskLists+0x6c>)
 8008d7e:	f7fe fcf7 	bl	8007770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d82:	480c      	ldr	r0, [pc, #48]	; (8008db4 <prvInitialiseTaskLists+0x70>)
 8008d84:	f7fe fcf4 	bl	8007770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d88:	480b      	ldr	r0, [pc, #44]	; (8008db8 <prvInitialiseTaskLists+0x74>)
 8008d8a:	f7fe fcf1 	bl	8007770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d8e:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <prvInitialiseTaskLists+0x78>)
 8008d90:	4a05      	ldr	r2, [pc, #20]	; (8008da8 <prvInitialiseTaskLists+0x64>)
 8008d92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d94:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <prvInitialiseTaskLists+0x7c>)
 8008d96:	4a05      	ldr	r2, [pc, #20]	; (8008dac <prvInitialiseTaskLists+0x68>)
 8008d98:	601a      	str	r2, [r3, #0]
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000c6c 	.word	0x20000c6c
 8008da8:	200010cc 	.word	0x200010cc
 8008dac:	200010e0 	.word	0x200010e0
 8008db0:	200010fc 	.word	0x200010fc
 8008db4:	20001110 	.word	0x20001110
 8008db8:	20001128 	.word	0x20001128
 8008dbc:	200010f4 	.word	0x200010f4
 8008dc0:	200010f8 	.word	0x200010f8

08008dc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dca:	e019      	b.n	8008e00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dcc:	f000 fd5e 	bl	800988c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008dd0:	4b10      	ldr	r3, [pc, #64]	; (8008e14 <prvCheckTasksWaitingTermination+0x50>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe fd4d 	bl	800787c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008de2:	4b0d      	ldr	r3, [pc, #52]	; (8008e18 <prvCheckTasksWaitingTermination+0x54>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	4a0b      	ldr	r2, [pc, #44]	; (8008e18 <prvCheckTasksWaitingTermination+0x54>)
 8008dea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008dec:	4b0b      	ldr	r3, [pc, #44]	; (8008e1c <prvCheckTasksWaitingTermination+0x58>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <prvCheckTasksWaitingTermination+0x58>)
 8008df4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008df6:	f000 fd79 	bl	80098ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f810 	bl	8008e20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e00:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <prvCheckTasksWaitingTermination+0x58>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e1      	bne.n	8008dcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20001110 	.word	0x20001110
 8008e18:	2000113c 	.word	0x2000113c
 8008e1c:	20001124 	.word	0x20001124

08008e20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d108      	bne.n	8008e44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 feec 	bl	8009c14 <vPortFree>
				vPortFree( pxTCB );
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fee9 	bl	8009c14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e42:	e018      	b.n	8008e76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d103      	bne.n	8008e56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fee0 	bl	8009c14 <vPortFree>
	}
 8008e54:	e00f      	b.n	8008e76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d00a      	beq.n	8008e76 <prvDeleteTCB+0x56>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	60fb      	str	r3, [r7, #12]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <prvDeleteTCB+0x54>
	}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e86:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <prvResetNextTaskUnblockTime+0x40>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <prvResetNextTaskUnblockTime+0x14>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e000      	b.n	8008e96 <prvResetNextTaskUnblockTime+0x16>
 8008e94:	2300      	movs	r3, #0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d004      	beq.n	8008ea4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e9a:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <prvResetNextTaskUnblockTime+0x44>)
 8008e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ea2:	e008      	b.n	8008eb6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <prvResetNextTaskUnblockTime+0x40>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	4a04      	ldr	r2, [pc, #16]	; (8008ec4 <prvResetNextTaskUnblockTime+0x44>)
 8008eb4:	6013      	str	r3, [r2, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bc80      	pop	{r7}
 8008ebe:	4770      	bx	lr
 8008ec0:	200010f4 	.word	0x200010f4
 8008ec4:	2000115c 	.word	0x2000115c

08008ec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ece:	4b0b      	ldr	r3, [pc, #44]	; (8008efc <xTaskGetSchedulerState+0x34>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d102      	bne.n	8008edc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	e008      	b.n	8008eee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008edc:	4b08      	ldr	r3, [pc, #32]	; (8008f00 <xTaskGetSchedulerState+0x38>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d102      	bne.n	8008eea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	607b      	str	r3, [r7, #4]
 8008ee8:	e001      	b.n	8008eee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008eea:	2300      	movs	r3, #0
 8008eec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008eee:	687b      	ldr	r3, [r7, #4]
	}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bc80      	pop	{r7}
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20001148 	.word	0x20001148
 8008f00:	20001164 	.word	0x20001164

08008f04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d056      	beq.n	8008fc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f1a:	4b2e      	ldr	r3, [pc, #184]	; (8008fd4 <xTaskPriorityDisinherit+0xd0>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d00a      	beq.n	8008f3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	60fb      	str	r3, [r7, #12]
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	60bb      	str	r3, [r7, #8]
}
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f5c:	1e5a      	subs	r2, r3, #1
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d02c      	beq.n	8008fc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d128      	bne.n	8008fc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fc7e 	bl	800787c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <xTaskPriorityDisinherit+0xd4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d903      	bls.n	8008fa8 <xTaskPriorityDisinherit+0xa4>
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	4a0c      	ldr	r2, [pc, #48]	; (8008fd8 <xTaskPriorityDisinherit+0xd4>)
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4a09      	ldr	r2, [pc, #36]	; (8008fdc <xTaskPriorityDisinherit+0xd8>)
 8008fb6:	441a      	add	r2, r3
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7fe fc01 	bl	80077c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fc8:	697b      	ldr	r3, [r7, #20]
	}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000c68 	.word	0x20000c68
 8008fd8:	20001144 	.word	0x20001144
 8008fdc:	20000c6c 	.word	0x20000c6c

08008fe0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fea:	4b21      	ldr	r3, [pc, #132]	; (8009070 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ff0:	4b20      	ldr	r3, [pc, #128]	; (8009074 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fc40 	bl	800787c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009002:	d10a      	bne.n	800901a <prvAddCurrentTaskToDelayedList+0x3a>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d007      	beq.n	800901a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800900a:	4b1a      	ldr	r3, [pc, #104]	; (8009074 <prvAddCurrentTaskToDelayedList+0x94>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3304      	adds	r3, #4
 8009010:	4619      	mov	r1, r3
 8009012:	4819      	ldr	r0, [pc, #100]	; (8009078 <prvAddCurrentTaskToDelayedList+0x98>)
 8009014:	f7fe fbd7 	bl	80077c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009018:	e026      	b.n	8009068 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4413      	add	r3, r2
 8009020:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009022:	4b14      	ldr	r3, [pc, #80]	; (8009074 <prvAddCurrentTaskToDelayedList+0x94>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	429a      	cmp	r2, r3
 8009030:	d209      	bcs.n	8009046 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009032:	4b12      	ldr	r3, [pc, #72]	; (800907c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <prvAddCurrentTaskToDelayedList+0x94>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3304      	adds	r3, #4
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f7fe fbe4 	bl	800780c <vListInsert>
}
 8009044:	e010      	b.n	8009068 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009046:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <prvAddCurrentTaskToDelayedList+0x94>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3304      	adds	r3, #4
 8009050:	4619      	mov	r1, r3
 8009052:	4610      	mov	r0, r2
 8009054:	f7fe fbda 	bl	800780c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009058:	4b0a      	ldr	r3, [pc, #40]	; (8009084 <prvAddCurrentTaskToDelayedList+0xa4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	429a      	cmp	r2, r3
 8009060:	d202      	bcs.n	8009068 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009062:	4a08      	ldr	r2, [pc, #32]	; (8009084 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	6013      	str	r3, [r2, #0]
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20001140 	.word	0x20001140
 8009074:	20000c68 	.word	0x20000c68
 8009078:	20001128 	.word	0x20001128
 800907c:	200010f8 	.word	0x200010f8
 8009080:	200010f4 	.word	0x200010f4
 8009084:	2000115c 	.word	0x2000115c

08009088 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08a      	sub	sp, #40	; 0x28
 800908c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009092:	f000 facb 	bl	800962c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009096:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <xTimerCreateTimerTask+0x80>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d021      	beq.n	80090e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090a6:	1d3a      	adds	r2, r7, #4
 80090a8:	f107 0108 	add.w	r1, r7, #8
 80090ac:	f107 030c 	add.w	r3, r7, #12
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe fb43 	bl	800773c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	9202      	str	r2, [sp, #8]
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	2302      	movs	r3, #2
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	2300      	movs	r3, #0
 80090c6:	460a      	mov	r2, r1
 80090c8:	4910      	ldr	r1, [pc, #64]	; (800910c <xTimerCreateTimerTask+0x84>)
 80090ca:	4811      	ldr	r0, [pc, #68]	; (8009110 <xTimerCreateTimerTask+0x88>)
 80090cc:	f7ff f8e4 	bl	8008298 <xTaskCreateStatic>
 80090d0:	4603      	mov	r3, r0
 80090d2:	4a10      	ldr	r2, [pc, #64]	; (8009114 <xTimerCreateTimerTask+0x8c>)
 80090d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090d6:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <xTimerCreateTimerTask+0x8c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090de:	2301      	movs	r3, #1
 80090e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	613b      	str	r3, [r7, #16]
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80090fe:	697b      	ldr	r3, [r7, #20]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20001198 	.word	0x20001198
 800910c:	0800eadc 	.word	0x0800eadc
 8009110:	08009235 	.word	0x08009235
 8009114:	2000119c 	.word	0x2000119c

08009118 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08a      	sub	sp, #40	; 0x28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009126:	2300      	movs	r3, #0
 8009128:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	623b      	str	r3, [r7, #32]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009146:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <xTimerGenericCommand+0x98>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d02a      	beq.n	80091a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b05      	cmp	r3, #5
 800915e:	dc18      	bgt.n	8009192 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009160:	f7ff feb2 	bl	8008ec8 <xTaskGetSchedulerState>
 8009164:	4603      	mov	r3, r0
 8009166:	2b02      	cmp	r3, #2
 8009168:	d109      	bne.n	800917e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800916a:	4b11      	ldr	r3, [pc, #68]	; (80091b0 <xTimerGenericCommand+0x98>)
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	f107 0110 	add.w	r1, r7, #16
 8009172:	2300      	movs	r3, #0
 8009174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009176:	f7fe fcad 	bl	8007ad4 <xQueueGenericSend>
 800917a:	6278      	str	r0, [r7, #36]	; 0x24
 800917c:	e012      	b.n	80091a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800917e:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <xTimerGenericCommand+0x98>)
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f107 0110 	add.w	r1, r7, #16
 8009186:	2300      	movs	r3, #0
 8009188:	2200      	movs	r2, #0
 800918a:	f7fe fca3 	bl	8007ad4 <xQueueGenericSend>
 800918e:	6278      	str	r0, [r7, #36]	; 0x24
 8009190:	e008      	b.n	80091a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009192:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <xTimerGenericCommand+0x98>)
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	f107 0110 	add.w	r1, r7, #16
 800919a:	2300      	movs	r3, #0
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	f7fe fd97 	bl	8007cd0 <xQueueGenericSendFromISR>
 80091a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3728      	adds	r7, #40	; 0x28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20001198 	.word	0x20001198

080091b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af02      	add	r7, sp, #8
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091be:	4b1c      	ldr	r3, [pc, #112]	; (8009230 <prvProcessExpiredTimer+0x7c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe fb55 	bl	800787c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d122      	bne.n	8009220 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	699a      	ldr	r2, [r3, #24]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	18d1      	adds	r1, r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	6978      	ldr	r0, [r7, #20]
 80091e8:	f000 f8c8 	bl	800937c <prvInsertTimerInActiveList>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d016      	beq.n	8009220 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091f2:	2300      	movs	r3, #0
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	2100      	movs	r1, #0
 80091fc:	6978      	ldr	r0, [r7, #20]
 80091fe:	f7ff ff8b 	bl	8009118 <xTimerGenericCommand>
 8009202:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	60fb      	str	r3, [r7, #12]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	6978      	ldr	r0, [r7, #20]
 8009226:	4798      	blx	r3
}
 8009228:	bf00      	nop
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20001190 	.word	0x20001190

08009234 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800923c:	f107 0308 	add.w	r3, r7, #8
 8009240:	4618      	mov	r0, r3
 8009242:	f000 f857 	bl	80092f4 <prvGetNextExpireTime>
 8009246:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	4619      	mov	r1, r3
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f803 	bl	8009258 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009252:	f000 f8d5 	bl	8009400 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009256:	e7f1      	b.n	800923c <prvTimerTask+0x8>

08009258 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009262:	f7ff fa4b 	bl	80086fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009266:	f107 0308 	add.w	r3, r7, #8
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f866 	bl	800933c <prvSampleTimeNow>
 8009270:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d130      	bne.n	80092da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <prvProcessTimerOrBlockTask+0x3c>
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	429a      	cmp	r2, r3
 8009284:	d806      	bhi.n	8009294 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009286:	f7ff fa47 	bl	8008718 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff ff91 	bl	80091b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009292:	e024      	b.n	80092de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800929a:	4b13      	ldr	r3, [pc, #76]	; (80092e8 <prvProcessTimerOrBlockTask+0x90>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	bf0c      	ite	eq
 80092a4:	2301      	moveq	r3, #1
 80092a6:	2300      	movne	r3, #0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092ac:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <prvProcessTimerOrBlockTask+0x94>)
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	f7fe ffb9 	bl	8008230 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092be:	f7ff fa2b 	bl	8008718 <xTaskResumeAll>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092c8:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <prvProcessTimerOrBlockTask+0x98>)
 80092ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	f3bf 8f6f 	isb	sy
}
 80092d8:	e001      	b.n	80092de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092da:	f7ff fa1d 	bl	8008718 <xTaskResumeAll>
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20001194 	.word	0x20001194
 80092ec:	20001198 	.word	0x20001198
 80092f0:	e000ed04 	.word	0xe000ed04

080092f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092fc:	4b0e      	ldr	r3, [pc, #56]	; (8009338 <prvGetNextExpireTime+0x44>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	bf0c      	ite	eq
 8009306:	2301      	moveq	r3, #1
 8009308:	2300      	movne	r3, #0
 800930a:	b2db      	uxtb	r3, r3
 800930c:	461a      	mov	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d105      	bne.n	8009326 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800931a:	4b07      	ldr	r3, [pc, #28]	; (8009338 <prvGetNextExpireTime+0x44>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	e001      	b.n	800932a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800932a:	68fb      	ldr	r3, [r7, #12]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	20001190 	.word	0x20001190

0800933c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009344:	f7ff fa86 	bl	8008854 <xTaskGetTickCount>
 8009348:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800934a:	4b0b      	ldr	r3, [pc, #44]	; (8009378 <prvSampleTimeNow+0x3c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	429a      	cmp	r2, r3
 8009352:	d205      	bcs.n	8009360 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009354:	f000 f908 	bl	8009568 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	e002      	b.n	8009366 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009366:	4a04      	ldr	r2, [pc, #16]	; (8009378 <prvSampleTimeNow+0x3c>)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800936c:	68fb      	ldr	r3, [r7, #12]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	200011a0 	.word	0x200011a0

0800937c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d812      	bhi.n	80093c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	1ad2      	subs	r2, r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d302      	bcc.n	80093b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	e01b      	b.n	80093ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093b6:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <prvInsertTimerInActiveList+0x7c>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	3304      	adds	r3, #4
 80093be:	4619      	mov	r1, r3
 80093c0:	4610      	mov	r0, r2
 80093c2:	f7fe fa23 	bl	800780c <vListInsert>
 80093c6:	e012      	b.n	80093ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d206      	bcs.n	80093de <prvInsertTimerInActiveList+0x62>
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d302      	bcc.n	80093de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093d8:	2301      	movs	r3, #1
 80093da:	617b      	str	r3, [r7, #20]
 80093dc:	e007      	b.n	80093ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093de:	4b07      	ldr	r3, [pc, #28]	; (80093fc <prvInsertTimerInActiveList+0x80>)
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3304      	adds	r3, #4
 80093e6:	4619      	mov	r1, r3
 80093e8:	4610      	mov	r0, r2
 80093ea:	f7fe fa0f 	bl	800780c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093ee:	697b      	ldr	r3, [r7, #20]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20001194 	.word	0x20001194
 80093fc:	20001190 	.word	0x20001190

08009400 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08e      	sub	sp, #56	; 0x38
 8009404:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009406:	e09d      	b.n	8009544 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	da18      	bge.n	8009440 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800940e:	1d3b      	adds	r3, r7, #4
 8009410:	3304      	adds	r3, #4
 8009412:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	61fb      	str	r3, [r7, #28]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009436:	6850      	ldr	r0, [r2, #4]
 8009438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800943a:	6892      	ldr	r2, [r2, #8]
 800943c:	4611      	mov	r1, r2
 800943e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	db7d      	blt.n	8009542 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d004      	beq.n	800945c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	3304      	adds	r3, #4
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fa10 	bl	800787c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800945c:	463b      	mov	r3, r7
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff ff6c 	bl	800933c <prvSampleTimeNow>
 8009464:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b09      	cmp	r3, #9
 800946a:	d86b      	bhi.n	8009544 <prvProcessReceivedCommands+0x144>
 800946c:	a201      	add	r2, pc, #4	; (adr r2, 8009474 <prvProcessReceivedCommands+0x74>)
 800946e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009472:	bf00      	nop
 8009474:	0800949d 	.word	0x0800949d
 8009478:	0800949d 	.word	0x0800949d
 800947c:	0800949d 	.word	0x0800949d
 8009480:	08009545 	.word	0x08009545
 8009484:	080094f9 	.word	0x080094f9
 8009488:	08009531 	.word	0x08009531
 800948c:	0800949d 	.word	0x0800949d
 8009490:	0800949d 	.word	0x0800949d
 8009494:	08009545 	.word	0x08009545
 8009498:	080094f9 	.word	0x080094f9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	18d1      	adds	r1, r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094aa:	f7ff ff67 	bl	800937c <prvInsertTimerInActiveList>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d047      	beq.n	8009544 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d13f      	bne.n	8009544 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	441a      	add	r2, r3
 80094cc:	2300      	movs	r3, #0
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	2300      	movs	r3, #0
 80094d2:	2100      	movs	r1, #0
 80094d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094d6:	f7ff fe1f 	bl	8009118 <xTimerGenericCommand>
 80094da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d130      	bne.n	8009544 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	61bb      	str	r3, [r7, #24]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10a      	bne.n	800951c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	617b      	str	r3, [r7, #20]
}
 8009518:	bf00      	nop
 800951a:	e7fe      	b.n	800951a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	699a      	ldr	r2, [r3, #24]
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	18d1      	adds	r1, r2, r3
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800952a:	f7ff ff27 	bl	800937c <prvInsertTimerInActiveList>
					break;
 800952e:	e009      	b.n	8009544 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009536:	2b00      	cmp	r3, #0
 8009538:	d104      	bne.n	8009544 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800953a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800953c:	f000 fb6a 	bl	8009c14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009540:	e000      	b.n	8009544 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009542:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009544:	4b07      	ldr	r3, [pc, #28]	; (8009564 <prvProcessReceivedCommands+0x164>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	1d39      	adds	r1, r7, #4
 800954a:	2200      	movs	r2, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe fc57 	bl	8007e00 <xQueueReceive>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	f47f af57 	bne.w	8009408 <prvProcessReceivedCommands+0x8>
	}
}
 800955a:	bf00      	nop
 800955c:	bf00      	nop
 800955e:	3730      	adds	r7, #48	; 0x30
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20001198 	.word	0x20001198

08009568 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800956e:	e045      	b.n	80095fc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009570:	4b2c      	ldr	r3, [pc, #176]	; (8009624 <prvSwitchTimerLists+0xbc>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800957a:	4b2a      	ldr	r3, [pc, #168]	; (8009624 <prvSwitchTimerLists+0xbc>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3304      	adds	r3, #4
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe f977 	bl	800787c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d12e      	bne.n	80095fc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4413      	add	r3, r2
 80095a6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d90e      	bls.n	80095ce <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095bc:	4b19      	ldr	r3, [pc, #100]	; (8009624 <prvSwitchTimerLists+0xbc>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3304      	adds	r3, #4
 80095c4:	4619      	mov	r1, r3
 80095c6:	4610      	mov	r0, r2
 80095c8:	f7fe f920 	bl	800780c <vListInsert>
 80095cc:	e016      	b.n	80095fc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095ce:	2300      	movs	r3, #0
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	2300      	movs	r3, #0
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	2100      	movs	r1, #0
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7ff fd9d 	bl	8009118 <xTimerGenericCommand>
 80095de:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10a      	bne.n	80095fc <prvSwitchTimerLists+0x94>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	603b      	str	r3, [r7, #0]
}
 80095f8:	bf00      	nop
 80095fa:	e7fe      	b.n	80095fa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095fc:	4b09      	ldr	r3, [pc, #36]	; (8009624 <prvSwitchTimerLists+0xbc>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1b4      	bne.n	8009570 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <prvSwitchTimerLists+0xbc>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800960c:	4b06      	ldr	r3, [pc, #24]	; (8009628 <prvSwitchTimerLists+0xc0>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a04      	ldr	r2, [pc, #16]	; (8009624 <prvSwitchTimerLists+0xbc>)
 8009612:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009614:	4a04      	ldr	r2, [pc, #16]	; (8009628 <prvSwitchTimerLists+0xc0>)
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	6013      	str	r3, [r2, #0]
}
 800961a:	bf00      	nop
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20001190 	.word	0x20001190
 8009628:	20001194 	.word	0x20001194

0800962c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009632:	f000 f92b 	bl	800988c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009636:	4b15      	ldr	r3, [pc, #84]	; (800968c <prvCheckForValidListAndQueue+0x60>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d120      	bne.n	8009680 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800963e:	4814      	ldr	r0, [pc, #80]	; (8009690 <prvCheckForValidListAndQueue+0x64>)
 8009640:	f7fe f896 	bl	8007770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009644:	4813      	ldr	r0, [pc, #76]	; (8009694 <prvCheckForValidListAndQueue+0x68>)
 8009646:	f7fe f893 	bl	8007770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800964a:	4b13      	ldr	r3, [pc, #76]	; (8009698 <prvCheckForValidListAndQueue+0x6c>)
 800964c:	4a10      	ldr	r2, [pc, #64]	; (8009690 <prvCheckForValidListAndQueue+0x64>)
 800964e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009650:	4b12      	ldr	r3, [pc, #72]	; (800969c <prvCheckForValidListAndQueue+0x70>)
 8009652:	4a10      	ldr	r2, [pc, #64]	; (8009694 <prvCheckForValidListAndQueue+0x68>)
 8009654:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009656:	2300      	movs	r3, #0
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <prvCheckForValidListAndQueue+0x74>)
 800965c:	4a11      	ldr	r2, [pc, #68]	; (80096a4 <prvCheckForValidListAndQueue+0x78>)
 800965e:	2110      	movs	r1, #16
 8009660:	200a      	movs	r0, #10
 8009662:	f7fe f99d 	bl	80079a0 <xQueueGenericCreateStatic>
 8009666:	4603      	mov	r3, r0
 8009668:	4a08      	ldr	r2, [pc, #32]	; (800968c <prvCheckForValidListAndQueue+0x60>)
 800966a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800966c:	4b07      	ldr	r3, [pc, #28]	; (800968c <prvCheckForValidListAndQueue+0x60>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009674:	4b05      	ldr	r3, [pc, #20]	; (800968c <prvCheckForValidListAndQueue+0x60>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	490b      	ldr	r1, [pc, #44]	; (80096a8 <prvCheckForValidListAndQueue+0x7c>)
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fdb0 	bl	80081e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009680:	f000 f934 	bl	80098ec <vPortExitCritical>
}
 8009684:	bf00      	nop
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20001198 	.word	0x20001198
 8009690:	20001168 	.word	0x20001168
 8009694:	2000117c 	.word	0x2000117c
 8009698:	20001190 	.word	0x20001190
 800969c:	20001194 	.word	0x20001194
 80096a0:	20001244 	.word	0x20001244
 80096a4:	200011a4 	.word	0x200011a4
 80096a8:	0800eae4 	.word	0x0800eae4

080096ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3b04      	subs	r3, #4
 80096bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3b04      	subs	r3, #4
 80096ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f023 0201 	bic.w	r2, r3, #1
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3b04      	subs	r3, #4
 80096da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096dc:	4a08      	ldr	r2, [pc, #32]	; (8009700 <pxPortInitialiseStack+0x54>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3b14      	subs	r3, #20
 80096e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3b20      	subs	r3, #32
 80096f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096f4:	68fb      	ldr	r3, [r7, #12]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr
 8009700:	08009705 	.word	0x08009705

08009704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800970a:	2300      	movs	r3, #0
 800970c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800970e:	4b12      	ldr	r3, [pc, #72]	; (8009758 <prvTaskExitError+0x54>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009716:	d00a      	beq.n	800972e <prvTaskExitError+0x2a>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	60fb      	str	r3, [r7, #12]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <prvTaskExitError+0x28>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	60bb      	str	r3, [r7, #8]
}
 8009740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009742:	bf00      	nop
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0fc      	beq.n	8009744 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	bc80      	pop	{r7}
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	20000010 	.word	0x20000010
 800975c:	00000000 	.word	0x00000000

08009760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009760:	4b07      	ldr	r3, [pc, #28]	; (8009780 <pxCurrentTCBConst2>)
 8009762:	6819      	ldr	r1, [r3, #0]
 8009764:	6808      	ldr	r0, [r1, #0]
 8009766:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800976a:	f380 8809 	msr	PSP, r0
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8811 	msr	BASEPRI, r0
 800977a:	f04e 0e0d 	orr.w	lr, lr, #13
 800977e:	4770      	bx	lr

08009780 <pxCurrentTCBConst2>:
 8009780:	20000c68 	.word	0x20000c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop

08009788 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009788:	4806      	ldr	r0, [pc, #24]	; (80097a4 <prvPortStartFirstTask+0x1c>)
 800978a:	6800      	ldr	r0, [r0, #0]
 800978c:	6800      	ldr	r0, [r0, #0]
 800978e:	f380 8808 	msr	MSP, r0
 8009792:	b662      	cpsie	i
 8009794:	b661      	cpsie	f
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	df00      	svc	0
 80097a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097a2:	bf00      	nop
 80097a4:	e000ed08 	.word	0xe000ed08

080097a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097ae:	4b32      	ldr	r3, [pc, #200]	; (8009878 <xPortStartScheduler+0xd0>)
 80097b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	22ff      	movs	r2, #255	; 0xff
 80097be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	4b2a      	ldr	r3, [pc, #168]	; (800987c <xPortStartScheduler+0xd4>)
 80097d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097d6:	4b2a      	ldr	r3, [pc, #168]	; (8009880 <xPortStartScheduler+0xd8>)
 80097d8:	2207      	movs	r2, #7
 80097da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097dc:	e009      	b.n	80097f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097de:	4b28      	ldr	r3, [pc, #160]	; (8009880 <xPortStartScheduler+0xd8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	4a26      	ldr	r2, [pc, #152]	; (8009880 <xPortStartScheduler+0xd8>)
 80097e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fa:	2b80      	cmp	r3, #128	; 0x80
 80097fc:	d0ef      	beq.n	80097de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097fe:	4b20      	ldr	r3, [pc, #128]	; (8009880 <xPortStartScheduler+0xd8>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f1c3 0307 	rsb	r3, r3, #7
 8009806:	2b04      	cmp	r3, #4
 8009808:	d00a      	beq.n	8009820 <xPortStartScheduler+0x78>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	60bb      	str	r3, [r7, #8]
}
 800981c:	bf00      	nop
 800981e:	e7fe      	b.n	800981e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009820:	4b17      	ldr	r3, [pc, #92]	; (8009880 <xPortStartScheduler+0xd8>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	021b      	lsls	r3, r3, #8
 8009826:	4a16      	ldr	r2, [pc, #88]	; (8009880 <xPortStartScheduler+0xd8>)
 8009828:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800982a:	4b15      	ldr	r3, [pc, #84]	; (8009880 <xPortStartScheduler+0xd8>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009832:	4a13      	ldr	r2, [pc, #76]	; (8009880 <xPortStartScheduler+0xd8>)
 8009834:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	b2da      	uxtb	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800983e:	4b11      	ldr	r3, [pc, #68]	; (8009884 <xPortStartScheduler+0xdc>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a10      	ldr	r2, [pc, #64]	; (8009884 <xPortStartScheduler+0xdc>)
 8009844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800984a:	4b0e      	ldr	r3, [pc, #56]	; (8009884 <xPortStartScheduler+0xdc>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a0d      	ldr	r2, [pc, #52]	; (8009884 <xPortStartScheduler+0xdc>)
 8009850:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009854:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009856:	f000 f8b9 	bl	80099cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800985a:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <xPortStartScheduler+0xe0>)
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009860:	f7ff ff92 	bl	8009788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009864:	f7ff f8c2 	bl	80089ec <vTaskSwitchContext>
	prvTaskExitError();
 8009868:	f7ff ff4c 	bl	8009704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	e000e400 	.word	0xe000e400
 800987c:	20001294 	.word	0x20001294
 8009880:	20001298 	.word	0x20001298
 8009884:	e000ed20 	.word	0xe000ed20
 8009888:	20000010 	.word	0x20000010

0800988c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	607b      	str	r3, [r7, #4]
}
 80098a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098a6:	4b0f      	ldr	r3, [pc, #60]	; (80098e4 <vPortEnterCritical+0x58>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3301      	adds	r3, #1
 80098ac:	4a0d      	ldr	r2, [pc, #52]	; (80098e4 <vPortEnterCritical+0x58>)
 80098ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098b0:	4b0c      	ldr	r3, [pc, #48]	; (80098e4 <vPortEnterCritical+0x58>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d10f      	bne.n	80098d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098b8:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <vPortEnterCritical+0x5c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00a      	beq.n	80098d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	603b      	str	r3, [r7, #0]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <vPortEnterCritical+0x4a>
	}
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	bc80      	pop	{r7}
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	20000010 	.word	0x20000010
 80098e8:	e000ed04 	.word	0xe000ed04

080098ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098f2:	4b11      	ldr	r3, [pc, #68]	; (8009938 <vPortExitCritical+0x4c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10a      	bne.n	8009910 <vPortExitCritical+0x24>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	607b      	str	r3, [r7, #4]
}
 800990c:	bf00      	nop
 800990e:	e7fe      	b.n	800990e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009910:	4b09      	ldr	r3, [pc, #36]	; (8009938 <vPortExitCritical+0x4c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3b01      	subs	r3, #1
 8009916:	4a08      	ldr	r2, [pc, #32]	; (8009938 <vPortExitCritical+0x4c>)
 8009918:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800991a:	4b07      	ldr	r3, [pc, #28]	; (8009938 <vPortExitCritical+0x4c>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <vPortExitCritical+0x42>
 8009922:	2300      	movs	r3, #0
 8009924:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	f383 8811 	msr	BASEPRI, r3
}
 800992c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800992e:	bf00      	nop
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr
 8009938:	20000010 	.word	0x20000010
 800993c:	00000000 	.word	0x00000000

08009940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009940:	f3ef 8009 	mrs	r0, PSP
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	4b0d      	ldr	r3, [pc, #52]	; (8009980 <pxCurrentTCBConst>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009950:	6010      	str	r0, [r2, #0]
 8009952:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009956:	f04f 0050 	mov.w	r0, #80	; 0x50
 800995a:	f380 8811 	msr	BASEPRI, r0
 800995e:	f7ff f845 	bl	80089ec <vTaskSwitchContext>
 8009962:	f04f 0000 	mov.w	r0, #0
 8009966:	f380 8811 	msr	BASEPRI, r0
 800996a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800996e:	6819      	ldr	r1, [r3, #0]
 8009970:	6808      	ldr	r0, [r1, #0]
 8009972:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009976:	f380 8809 	msr	PSP, r0
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	4770      	bx	lr

08009980 <pxCurrentTCBConst>:
 8009980:	20000c68 	.word	0x20000c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	607b      	str	r3, [r7, #4]
}
 80099a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099a2:	f7fe ff65 	bl	8008870 <xTaskIncrementTick>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ac:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <xPortSysTickHandler+0x40>)
 80099ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	2300      	movs	r3, #0
 80099b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	f383 8811 	msr	BASEPRI, r3
}
 80099be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	e000ed04 	.word	0xe000ed04

080099cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099d0:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <vPortSetupTimerInterrupt+0x30>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099d6:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <vPortSetupTimerInterrupt+0x34>)
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099dc:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <vPortSetupTimerInterrupt+0x38>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a09      	ldr	r2, [pc, #36]	; (8009a08 <vPortSetupTimerInterrupt+0x3c>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	099b      	lsrs	r3, r3, #6
 80099e8:	4a08      	ldr	r2, [pc, #32]	; (8009a0c <vPortSetupTimerInterrupt+0x40>)
 80099ea:	3b01      	subs	r3, #1
 80099ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ee:	4b03      	ldr	r3, [pc, #12]	; (80099fc <vPortSetupTimerInterrupt+0x30>)
 80099f0:	2207      	movs	r2, #7
 80099f2:	601a      	str	r2, [r3, #0]
}
 80099f4:	bf00      	nop
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bc80      	pop	{r7}
 80099fa:	4770      	bx	lr
 80099fc:	e000e010 	.word	0xe000e010
 8009a00:	e000e018 	.word	0xe000e018
 8009a04:	20000000 	.word	0x20000000
 8009a08:	10624dd3 	.word	0x10624dd3
 8009a0c:	e000e014 	.word	0xe000e014

08009a10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a16:	f3ef 8305 	mrs	r3, IPSR
 8009a1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b0f      	cmp	r3, #15
 8009a20:	d914      	bls.n	8009a4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a22:	4a16      	ldr	r2, [pc, #88]	; (8009a7c <vPortValidateInterruptPriority+0x6c>)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4413      	add	r3, r2
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a2c:	4b14      	ldr	r3, [pc, #80]	; (8009a80 <vPortValidateInterruptPriority+0x70>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	7afa      	ldrb	r2, [r7, #11]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d20a      	bcs.n	8009a4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	607b      	str	r3, [r7, #4]
}
 8009a48:	bf00      	nop
 8009a4a:	e7fe      	b.n	8009a4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a4c:	4b0d      	ldr	r3, [pc, #52]	; (8009a84 <vPortValidateInterruptPriority+0x74>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a54:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <vPortValidateInterruptPriority+0x78>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d90a      	bls.n	8009a72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	603b      	str	r3, [r7, #0]
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <vPortValidateInterruptPriority+0x60>
	}
 8009a72:	bf00      	nop
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bc80      	pop	{r7}
 8009a7a:	4770      	bx	lr
 8009a7c:	e000e3f0 	.word	0xe000e3f0
 8009a80:	20001294 	.word	0x20001294
 8009a84:	e000ed0c 	.word	0xe000ed0c
 8009a88:	20001298 	.word	0x20001298

08009a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08a      	sub	sp, #40	; 0x28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a98:	f7fe fe30 	bl	80086fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a9c:	4b58      	ldr	r3, [pc, #352]	; (8009c00 <pvPortMalloc+0x174>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009aa4:	f000 f910 	bl	8009cc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009aa8:	4b56      	ldr	r3, [pc, #344]	; (8009c04 <pvPortMalloc+0x178>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4013      	ands	r3, r2
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f040 808e 	bne.w	8009bd2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01d      	beq.n	8009af8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009abc:	2208      	movs	r2, #8
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d014      	beq.n	8009af8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f023 0307 	bic.w	r3, r3, #7
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f003 0307 	and.w	r3, r3, #7
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00a      	beq.n	8009af8 <pvPortMalloc+0x6c>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	617b      	str	r3, [r7, #20]
}
 8009af4:	bf00      	nop
 8009af6:	e7fe      	b.n	8009af6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d069      	beq.n	8009bd2 <pvPortMalloc+0x146>
 8009afe:	4b42      	ldr	r3, [pc, #264]	; (8009c08 <pvPortMalloc+0x17c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d864      	bhi.n	8009bd2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b08:	4b40      	ldr	r3, [pc, #256]	; (8009c0c <pvPortMalloc+0x180>)
 8009b0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b0c:	4b3f      	ldr	r3, [pc, #252]	; (8009c0c <pvPortMalloc+0x180>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b12:	e004      	b.n	8009b1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d903      	bls.n	8009b30 <pvPortMalloc+0xa4>
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1f1      	bne.n	8009b14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b30:	4b33      	ldr	r3, [pc, #204]	; (8009c00 <pvPortMalloc+0x174>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d04b      	beq.n	8009bd2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2208      	movs	r2, #8
 8009b40:	4413      	add	r3, r2
 8009b42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	1ad2      	subs	r2, r2, r3
 8009b54:	2308      	movs	r3, #8
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d91f      	bls.n	8009b9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4413      	add	r3, r2
 8009b62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <pvPortMalloc+0xf8>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	613b      	str	r3, [r7, #16]
}
 8009b80:	bf00      	nop
 8009b82:	e7fe      	b.n	8009b82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	1ad2      	subs	r2, r2, r3
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b96:	69b8      	ldr	r0, [r7, #24]
 8009b98:	f000 f8f8 	bl	8009d8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b9c:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <pvPortMalloc+0x17c>)
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	4a18      	ldr	r2, [pc, #96]	; (8009c08 <pvPortMalloc+0x17c>)
 8009ba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009baa:	4b17      	ldr	r3, [pc, #92]	; (8009c08 <pvPortMalloc+0x17c>)
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	4b18      	ldr	r3, [pc, #96]	; (8009c10 <pvPortMalloc+0x184>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d203      	bcs.n	8009bbe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <pvPortMalloc+0x17c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <pvPortMalloc+0x184>)
 8009bbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	4b10      	ldr	r3, [pc, #64]	; (8009c04 <pvPortMalloc+0x178>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bd2:	f7fe fda1 	bl	8008718 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <pvPortMalloc+0x16a>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	60fb      	str	r3, [r7, #12]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <pvPortMalloc+0x168>
	return pvReturn;
 8009bf6:	69fb      	ldr	r3, [r7, #28]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3728      	adds	r7, #40	; 0x28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20001ea4 	.word	0x20001ea4
 8009c04:	20001eb0 	.word	0x20001eb0
 8009c08:	20001ea8 	.word	0x20001ea8
 8009c0c:	20001e9c 	.word	0x20001e9c
 8009c10:	20001eac 	.word	0x20001eac

08009c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d048      	beq.n	8009cb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c26:	2308      	movs	r3, #8
 8009c28:	425b      	negs	r3, r3
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	4b21      	ldr	r3, [pc, #132]	; (8009cc0 <vPortFree+0xac>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10a      	bne.n	8009c58 <vPortFree+0x44>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	60fb      	str	r3, [r7, #12]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00a      	beq.n	8009c76 <vPortFree+0x62>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60bb      	str	r3, [r7, #8]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <vPortFree+0xac>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d019      	beq.n	8009cb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d115      	bne.n	8009cb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <vPortFree+0xac>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	43db      	mvns	r3, r3
 8009c96:	401a      	ands	r2, r3
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c9c:	f7fe fd2e 	bl	80086fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <vPortFree+0xb0>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4413      	add	r3, r2
 8009caa:	4a06      	ldr	r2, [pc, #24]	; (8009cc4 <vPortFree+0xb0>)
 8009cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cae:	6938      	ldr	r0, [r7, #16]
 8009cb0:	f000 f86c 	bl	8009d8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009cb4:	f7fe fd30 	bl	8008718 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cb8:	bf00      	nop
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20001eb0 	.word	0x20001eb0
 8009cc4:	20001ea8 	.word	0x20001ea8

08009cc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009cd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cd4:	4b27      	ldr	r3, [pc, #156]	; (8009d74 <prvHeapInit+0xac>)
 8009cd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f003 0307 	and.w	r3, r3, #7
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00c      	beq.n	8009cfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3307      	adds	r3, #7
 8009ce6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 0307 	bic.w	r3, r3, #7
 8009cee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	4a1f      	ldr	r2, [pc, #124]	; (8009d74 <prvHeapInit+0xac>)
 8009cf8:	4413      	add	r3, r2
 8009cfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d00:	4a1d      	ldr	r2, [pc, #116]	; (8009d78 <prvHeapInit+0xb0>)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d06:	4b1c      	ldr	r3, [pc, #112]	; (8009d78 <prvHeapInit+0xb0>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	4413      	add	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d14:	2208      	movs	r2, #8
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	1a9b      	subs	r3, r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0307 	bic.w	r3, r3, #7
 8009d22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	4a15      	ldr	r2, [pc, #84]	; (8009d7c <prvHeapInit+0xb4>)
 8009d28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d2a:	4b14      	ldr	r3, [pc, #80]	; (8009d7c <prvHeapInit+0xb4>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d32:	4b12      	ldr	r3, [pc, #72]	; (8009d7c <prvHeapInit+0xb4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2200      	movs	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	1ad2      	subs	r2, r2, r3
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d48:	4b0c      	ldr	r3, [pc, #48]	; (8009d7c <prvHeapInit+0xb4>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	4a0a      	ldr	r2, [pc, #40]	; (8009d80 <prvHeapInit+0xb8>)
 8009d56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	4a09      	ldr	r2, [pc, #36]	; (8009d84 <prvHeapInit+0xbc>)
 8009d5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d60:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <prvHeapInit+0xc0>)
 8009d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d66:	601a      	str	r2, [r3, #0]
}
 8009d68:	bf00      	nop
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bc80      	pop	{r7}
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	2000129c 	.word	0x2000129c
 8009d78:	20001e9c 	.word	0x20001e9c
 8009d7c:	20001ea4 	.word	0x20001ea4
 8009d80:	20001eac 	.word	0x20001eac
 8009d84:	20001ea8 	.word	0x20001ea8
 8009d88:	20001eb0 	.word	0x20001eb0

08009d8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d94:	4b27      	ldr	r3, [pc, #156]	; (8009e34 <prvInsertBlockIntoFreeList+0xa8>)
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	e002      	b.n	8009da0 <prvInsertBlockIntoFreeList+0x14>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d8f7      	bhi.n	8009d9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	4413      	add	r3, r2
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d108      	bne.n	8009dce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	441a      	add	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	441a      	add	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d118      	bne.n	8009e14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	4b14      	ldr	r3, [pc, #80]	; (8009e38 <prvInsertBlockIntoFreeList+0xac>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d00d      	beq.n	8009e0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	441a      	add	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	e008      	b.n	8009e1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e0a:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <prvInsertBlockIntoFreeList+0xac>)
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	e003      	b.n	8009e1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d002      	beq.n	8009e2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e2a:	bf00      	nop
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr
 8009e34:	20001e9c 	.word	0x20001e9c
 8009e38:	20001ea4 	.word	0x20001ea4

08009e3c <atoi>:
 8009e3c:	220a      	movs	r2, #10
 8009e3e:	2100      	movs	r1, #0
 8009e40:	f001 bd90 	b.w	800b964 <strtol>

08009e44 <__libc_init_array>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	2600      	movs	r6, #0
 8009e48:	4d0c      	ldr	r5, [pc, #48]	; (8009e7c <__libc_init_array+0x38>)
 8009e4a:	4c0d      	ldr	r4, [pc, #52]	; (8009e80 <__libc_init_array+0x3c>)
 8009e4c:	1b64      	subs	r4, r4, r5
 8009e4e:	10a4      	asrs	r4, r4, #2
 8009e50:	42a6      	cmp	r6, r4
 8009e52:	d109      	bne.n	8009e68 <__libc_init_array+0x24>
 8009e54:	f004 fcac 	bl	800e7b0 <_init>
 8009e58:	2600      	movs	r6, #0
 8009e5a:	4d0a      	ldr	r5, [pc, #40]	; (8009e84 <__libc_init_array+0x40>)
 8009e5c:	4c0a      	ldr	r4, [pc, #40]	; (8009e88 <__libc_init_array+0x44>)
 8009e5e:	1b64      	subs	r4, r4, r5
 8009e60:	10a4      	asrs	r4, r4, #2
 8009e62:	42a6      	cmp	r6, r4
 8009e64:	d105      	bne.n	8009e72 <__libc_init_array+0x2e>
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6c:	4798      	blx	r3
 8009e6e:	3601      	adds	r6, #1
 8009e70:	e7ee      	b.n	8009e50 <__libc_init_array+0xc>
 8009e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e76:	4798      	blx	r3
 8009e78:	3601      	adds	r6, #1
 8009e7a:	e7f2      	b.n	8009e62 <__libc_init_array+0x1e>
 8009e7c:	0800f08c 	.word	0x0800f08c
 8009e80:	0800f08c 	.word	0x0800f08c
 8009e84:	0800f08c 	.word	0x0800f08c
 8009e88:	0800f090 	.word	0x0800f090

08009e8c <memcpy>:
 8009e8c:	440a      	add	r2, r1
 8009e8e:	4291      	cmp	r1, r2
 8009e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e94:	d100      	bne.n	8009e98 <memcpy+0xc>
 8009e96:	4770      	bx	lr
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e9e:	4291      	cmp	r1, r2
 8009ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ea4:	d1f9      	bne.n	8009e9a <memcpy+0xe>
 8009ea6:	bd10      	pop	{r4, pc}

08009ea8 <memmove>:
 8009ea8:	4288      	cmp	r0, r1
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	eb01 0402 	add.w	r4, r1, r2
 8009eb0:	d902      	bls.n	8009eb8 <memmove+0x10>
 8009eb2:	4284      	cmp	r4, r0
 8009eb4:	4623      	mov	r3, r4
 8009eb6:	d807      	bhi.n	8009ec8 <memmove+0x20>
 8009eb8:	1e43      	subs	r3, r0, #1
 8009eba:	42a1      	cmp	r1, r4
 8009ebc:	d008      	beq.n	8009ed0 <memmove+0x28>
 8009ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ec6:	e7f8      	b.n	8009eba <memmove+0x12>
 8009ec8:	4601      	mov	r1, r0
 8009eca:	4402      	add	r2, r0
 8009ecc:	428a      	cmp	r2, r1
 8009ece:	d100      	bne.n	8009ed2 <memmove+0x2a>
 8009ed0:	bd10      	pop	{r4, pc}
 8009ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eda:	e7f7      	b.n	8009ecc <memmove+0x24>

08009edc <memset>:
 8009edc:	4603      	mov	r3, r0
 8009ede:	4402      	add	r2, r0
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d100      	bne.n	8009ee6 <memset+0xa>
 8009ee4:	4770      	bx	lr
 8009ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eea:	e7f9      	b.n	8009ee0 <memset+0x4>

08009eec <__cvt>:
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef2:	461f      	mov	r7, r3
 8009ef4:	bfbb      	ittet	lt
 8009ef6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009efa:	461f      	movlt	r7, r3
 8009efc:	2300      	movge	r3, #0
 8009efe:	232d      	movlt	r3, #45	; 0x2d
 8009f00:	b088      	sub	sp, #32
 8009f02:	4614      	mov	r4, r2
 8009f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009f08:	7013      	strb	r3, [r2, #0]
 8009f0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009f10:	f023 0820 	bic.w	r8, r3, #32
 8009f14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f18:	d005      	beq.n	8009f26 <__cvt+0x3a>
 8009f1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f1e:	d100      	bne.n	8009f22 <__cvt+0x36>
 8009f20:	3501      	adds	r5, #1
 8009f22:	2302      	movs	r3, #2
 8009f24:	e000      	b.n	8009f28 <__cvt+0x3c>
 8009f26:	2303      	movs	r3, #3
 8009f28:	aa07      	add	r2, sp, #28
 8009f2a:	9204      	str	r2, [sp, #16]
 8009f2c:	aa06      	add	r2, sp, #24
 8009f2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009f32:	e9cd 3500 	strd	r3, r5, [sp]
 8009f36:	4622      	mov	r2, r4
 8009f38:	463b      	mov	r3, r7
 8009f3a:	f001 fdcd 	bl	800bad8 <_dtoa_r>
 8009f3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f42:	4606      	mov	r6, r0
 8009f44:	d102      	bne.n	8009f4c <__cvt+0x60>
 8009f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f48:	07db      	lsls	r3, r3, #31
 8009f4a:	d522      	bpl.n	8009f92 <__cvt+0xa6>
 8009f4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f50:	eb06 0905 	add.w	r9, r6, r5
 8009f54:	d110      	bne.n	8009f78 <__cvt+0x8c>
 8009f56:	7833      	ldrb	r3, [r6, #0]
 8009f58:	2b30      	cmp	r3, #48	; 0x30
 8009f5a:	d10a      	bne.n	8009f72 <__cvt+0x86>
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4620      	mov	r0, r4
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 fd38 	bl	80009d8 <__aeabi_dcmpeq>
 8009f68:	b918      	cbnz	r0, 8009f72 <__cvt+0x86>
 8009f6a:	f1c5 0501 	rsb	r5, r5, #1
 8009f6e:	f8ca 5000 	str.w	r5, [sl]
 8009f72:	f8da 3000 	ldr.w	r3, [sl]
 8009f76:	4499      	add	r9, r3
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	4639      	mov	r1, r7
 8009f80:	f7f6 fd2a 	bl	80009d8 <__aeabi_dcmpeq>
 8009f84:	b108      	cbz	r0, 8009f8a <__cvt+0x9e>
 8009f86:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f8a:	2230      	movs	r2, #48	; 0x30
 8009f8c:	9b07      	ldr	r3, [sp, #28]
 8009f8e:	454b      	cmp	r3, r9
 8009f90:	d307      	bcc.n	8009fa2 <__cvt+0xb6>
 8009f92:	4630      	mov	r0, r6
 8009f94:	9b07      	ldr	r3, [sp, #28]
 8009f96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f98:	1b9b      	subs	r3, r3, r6
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	b008      	add	sp, #32
 8009f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa2:	1c59      	adds	r1, r3, #1
 8009fa4:	9107      	str	r1, [sp, #28]
 8009fa6:	701a      	strb	r2, [r3, #0]
 8009fa8:	e7f0      	b.n	8009f8c <__cvt+0xa0>

08009faa <__exponent>:
 8009faa:	4603      	mov	r3, r0
 8009fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	f803 2b02 	strb.w	r2, [r3], #2
 8009fb4:	bfb6      	itet	lt
 8009fb6:	222d      	movlt	r2, #45	; 0x2d
 8009fb8:	222b      	movge	r2, #43	; 0x2b
 8009fba:	4249      	neglt	r1, r1
 8009fbc:	2909      	cmp	r1, #9
 8009fbe:	7042      	strb	r2, [r0, #1]
 8009fc0:	dd2b      	ble.n	800a01a <__exponent+0x70>
 8009fc2:	f10d 0407 	add.w	r4, sp, #7
 8009fc6:	46a4      	mov	ip, r4
 8009fc8:	270a      	movs	r7, #10
 8009fca:	fb91 f6f7 	sdiv	r6, r1, r7
 8009fce:	460a      	mov	r2, r1
 8009fd0:	46a6      	mov	lr, r4
 8009fd2:	fb07 1516 	mls	r5, r7, r6, r1
 8009fd6:	2a63      	cmp	r2, #99	; 0x63
 8009fd8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009fdc:	4631      	mov	r1, r6
 8009fde:	f104 34ff 	add.w	r4, r4, #4294967295
 8009fe2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009fe6:	dcf0      	bgt.n	8009fca <__exponent+0x20>
 8009fe8:	3130      	adds	r1, #48	; 0x30
 8009fea:	f1ae 0502 	sub.w	r5, lr, #2
 8009fee:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	1c44      	adds	r4, r0, #1
 8009ff6:	4561      	cmp	r1, ip
 8009ff8:	d30a      	bcc.n	800a010 <__exponent+0x66>
 8009ffa:	f10d 0209 	add.w	r2, sp, #9
 8009ffe:	eba2 020e 	sub.w	r2, r2, lr
 800a002:	4565      	cmp	r5, ip
 800a004:	bf88      	it	hi
 800a006:	2200      	movhi	r2, #0
 800a008:	4413      	add	r3, r2
 800a00a:	1a18      	subs	r0, r3, r0
 800a00c:	b003      	add	sp, #12
 800a00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a010:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a014:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a018:	e7ed      	b.n	8009ff6 <__exponent+0x4c>
 800a01a:	2330      	movs	r3, #48	; 0x30
 800a01c:	3130      	adds	r1, #48	; 0x30
 800a01e:	7083      	strb	r3, [r0, #2]
 800a020:	70c1      	strb	r1, [r0, #3]
 800a022:	1d03      	adds	r3, r0, #4
 800a024:	e7f1      	b.n	800a00a <__exponent+0x60>
	...

0800a028 <_printf_float>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	b091      	sub	sp, #68	; 0x44
 800a02e:	460c      	mov	r4, r1
 800a030:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a034:	4616      	mov	r6, r2
 800a036:	461f      	mov	r7, r3
 800a038:	4605      	mov	r5, r0
 800a03a:	f002 fea7 	bl	800cd8c <_localeconv_r>
 800a03e:	6803      	ldr	r3, [r0, #0]
 800a040:	4618      	mov	r0, r3
 800a042:	9309      	str	r3, [sp, #36]	; 0x24
 800a044:	f7f6 f89c 	bl	8000180 <strlen>
 800a048:	2300      	movs	r3, #0
 800a04a:	930e      	str	r3, [sp, #56]	; 0x38
 800a04c:	f8d8 3000 	ldr.w	r3, [r8]
 800a050:	900a      	str	r0, [sp, #40]	; 0x28
 800a052:	3307      	adds	r3, #7
 800a054:	f023 0307 	bic.w	r3, r3, #7
 800a058:	f103 0208 	add.w	r2, r3, #8
 800a05c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a060:	f8d4 b000 	ldr.w	fp, [r4]
 800a064:	f8c8 2000 	str.w	r2, [r8]
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a070:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a074:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a078:	930b      	str	r3, [sp, #44]	; 0x2c
 800a07a:	f04f 32ff 	mov.w	r2, #4294967295
 800a07e:	4640      	mov	r0, r8
 800a080:	4b9c      	ldr	r3, [pc, #624]	; (800a2f4 <_printf_float+0x2cc>)
 800a082:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a084:	f7f6 fcda 	bl	8000a3c <__aeabi_dcmpun>
 800a088:	bb70      	cbnz	r0, 800a0e8 <_printf_float+0xc0>
 800a08a:	f04f 32ff 	mov.w	r2, #4294967295
 800a08e:	4640      	mov	r0, r8
 800a090:	4b98      	ldr	r3, [pc, #608]	; (800a2f4 <_printf_float+0x2cc>)
 800a092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a094:	f7f6 fcb4 	bl	8000a00 <__aeabi_dcmple>
 800a098:	bb30      	cbnz	r0, 800a0e8 <_printf_float+0xc0>
 800a09a:	2200      	movs	r2, #0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4640      	mov	r0, r8
 800a0a0:	4651      	mov	r1, sl
 800a0a2:	f7f6 fca3 	bl	80009ec <__aeabi_dcmplt>
 800a0a6:	b110      	cbz	r0, 800a0ae <_printf_float+0x86>
 800a0a8:	232d      	movs	r3, #45	; 0x2d
 800a0aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ae:	4b92      	ldr	r3, [pc, #584]	; (800a2f8 <_printf_float+0x2d0>)
 800a0b0:	4892      	ldr	r0, [pc, #584]	; (800a2fc <_printf_float+0x2d4>)
 800a0b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a0b6:	bf94      	ite	ls
 800a0b8:	4698      	movls	r8, r3
 800a0ba:	4680      	movhi	r8, r0
 800a0bc:	2303      	movs	r3, #3
 800a0be:	f04f 0a00 	mov.w	sl, #0
 800a0c2:	6123      	str	r3, [r4, #16]
 800a0c4:	f02b 0304 	bic.w	r3, fp, #4
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	4633      	mov	r3, r6
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	9700      	str	r7, [sp, #0]
 800a0d2:	aa0f      	add	r2, sp, #60	; 0x3c
 800a0d4:	f000 f9d4 	bl	800a480 <_printf_common>
 800a0d8:	3001      	adds	r0, #1
 800a0da:	f040 8090 	bne.w	800a1fe <_printf_float+0x1d6>
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	b011      	add	sp, #68	; 0x44
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	4653      	mov	r3, sl
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	4651      	mov	r1, sl
 800a0f0:	f7f6 fca4 	bl	8000a3c <__aeabi_dcmpun>
 800a0f4:	b148      	cbz	r0, 800a10a <_printf_float+0xe2>
 800a0f6:	f1ba 0f00 	cmp.w	sl, #0
 800a0fa:	bfb8      	it	lt
 800a0fc:	232d      	movlt	r3, #45	; 0x2d
 800a0fe:	4880      	ldr	r0, [pc, #512]	; (800a300 <_printf_float+0x2d8>)
 800a100:	bfb8      	it	lt
 800a102:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a106:	4b7f      	ldr	r3, [pc, #508]	; (800a304 <_printf_float+0x2dc>)
 800a108:	e7d3      	b.n	800a0b2 <_printf_float+0x8a>
 800a10a:	6863      	ldr	r3, [r4, #4]
 800a10c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	d142      	bne.n	800a19a <_printf_float+0x172>
 800a114:	2306      	movs	r3, #6
 800a116:	6063      	str	r3, [r4, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	9206      	str	r2, [sp, #24]
 800a11c:	aa0e      	add	r2, sp, #56	; 0x38
 800a11e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a122:	aa0d      	add	r2, sp, #52	; 0x34
 800a124:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a128:	9203      	str	r2, [sp, #12]
 800a12a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a12e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	6863      	ldr	r3, [r4, #4]
 800a136:	4642      	mov	r2, r8
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	4628      	mov	r0, r5
 800a13c:	4653      	mov	r3, sl
 800a13e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a140:	f7ff fed4 	bl	8009eec <__cvt>
 800a144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a146:	4680      	mov	r8, r0
 800a148:	2947      	cmp	r1, #71	; 0x47
 800a14a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a14c:	d108      	bne.n	800a160 <_printf_float+0x138>
 800a14e:	1cc8      	adds	r0, r1, #3
 800a150:	db02      	blt.n	800a158 <_printf_float+0x130>
 800a152:	6863      	ldr	r3, [r4, #4]
 800a154:	4299      	cmp	r1, r3
 800a156:	dd40      	ble.n	800a1da <_printf_float+0x1b2>
 800a158:	f1a9 0902 	sub.w	r9, r9, #2
 800a15c:	fa5f f989 	uxtb.w	r9, r9
 800a160:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a164:	d81f      	bhi.n	800a1a6 <_printf_float+0x17e>
 800a166:	464a      	mov	r2, r9
 800a168:	3901      	subs	r1, #1
 800a16a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a16e:	910d      	str	r1, [sp, #52]	; 0x34
 800a170:	f7ff ff1b 	bl	8009faa <__exponent>
 800a174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a176:	4682      	mov	sl, r0
 800a178:	1813      	adds	r3, r2, r0
 800a17a:	2a01      	cmp	r2, #1
 800a17c:	6123      	str	r3, [r4, #16]
 800a17e:	dc02      	bgt.n	800a186 <_printf_float+0x15e>
 800a180:	6822      	ldr	r2, [r4, #0]
 800a182:	07d2      	lsls	r2, r2, #31
 800a184:	d501      	bpl.n	800a18a <_printf_float+0x162>
 800a186:	3301      	adds	r3, #1
 800a188:	6123      	str	r3, [r4, #16]
 800a18a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d09b      	beq.n	800a0ca <_printf_float+0xa2>
 800a192:	232d      	movs	r3, #45	; 0x2d
 800a194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a198:	e797      	b.n	800a0ca <_printf_float+0xa2>
 800a19a:	2947      	cmp	r1, #71	; 0x47
 800a19c:	d1bc      	bne.n	800a118 <_printf_float+0xf0>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1ba      	bne.n	800a118 <_printf_float+0xf0>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e7b7      	b.n	800a116 <_printf_float+0xee>
 800a1a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a1aa:	d118      	bne.n	800a1de <_printf_float+0x1b6>
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	6863      	ldr	r3, [r4, #4]
 800a1b0:	dd0b      	ble.n	800a1ca <_printf_float+0x1a2>
 800a1b2:	6121      	str	r1, [r4, #16]
 800a1b4:	b913      	cbnz	r3, 800a1bc <_printf_float+0x194>
 800a1b6:	6822      	ldr	r2, [r4, #0]
 800a1b8:	07d0      	lsls	r0, r2, #31
 800a1ba:	d502      	bpl.n	800a1c2 <_printf_float+0x19a>
 800a1bc:	3301      	adds	r3, #1
 800a1be:	440b      	add	r3, r1
 800a1c0:	6123      	str	r3, [r4, #16]
 800a1c2:	f04f 0a00 	mov.w	sl, #0
 800a1c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a1c8:	e7df      	b.n	800a18a <_printf_float+0x162>
 800a1ca:	b913      	cbnz	r3, 800a1d2 <_printf_float+0x1aa>
 800a1cc:	6822      	ldr	r2, [r4, #0]
 800a1ce:	07d2      	lsls	r2, r2, #31
 800a1d0:	d501      	bpl.n	800a1d6 <_printf_float+0x1ae>
 800a1d2:	3302      	adds	r3, #2
 800a1d4:	e7f4      	b.n	800a1c0 <_printf_float+0x198>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e7f2      	b.n	800a1c0 <_printf_float+0x198>
 800a1da:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a1de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1e0:	4299      	cmp	r1, r3
 800a1e2:	db05      	blt.n	800a1f0 <_printf_float+0x1c8>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	6121      	str	r1, [r4, #16]
 800a1e8:	07d8      	lsls	r0, r3, #31
 800a1ea:	d5ea      	bpl.n	800a1c2 <_printf_float+0x19a>
 800a1ec:	1c4b      	adds	r3, r1, #1
 800a1ee:	e7e7      	b.n	800a1c0 <_printf_float+0x198>
 800a1f0:	2900      	cmp	r1, #0
 800a1f2:	bfcc      	ite	gt
 800a1f4:	2201      	movgt	r2, #1
 800a1f6:	f1c1 0202 	rsble	r2, r1, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	e7e0      	b.n	800a1c0 <_printf_float+0x198>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	055a      	lsls	r2, r3, #21
 800a202:	d407      	bmi.n	800a214 <_printf_float+0x1ec>
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	4642      	mov	r2, r8
 800a208:	4631      	mov	r1, r6
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b8      	blx	r7
 800a20e:	3001      	adds	r0, #1
 800a210:	d12b      	bne.n	800a26a <_printf_float+0x242>
 800a212:	e764      	b.n	800a0de <_printf_float+0xb6>
 800a214:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a218:	f240 80dd 	bls.w	800a3d6 <_printf_float+0x3ae>
 800a21c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a220:	2200      	movs	r2, #0
 800a222:	2300      	movs	r3, #0
 800a224:	f7f6 fbd8 	bl	80009d8 <__aeabi_dcmpeq>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d033      	beq.n	800a294 <_printf_float+0x26c>
 800a22c:	2301      	movs	r3, #1
 800a22e:	4631      	mov	r1, r6
 800a230:	4628      	mov	r0, r5
 800a232:	4a35      	ldr	r2, [pc, #212]	; (800a308 <_printf_float+0x2e0>)
 800a234:	47b8      	blx	r7
 800a236:	3001      	adds	r0, #1
 800a238:	f43f af51 	beq.w	800a0de <_printf_float+0xb6>
 800a23c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a240:	429a      	cmp	r2, r3
 800a242:	db02      	blt.n	800a24a <_printf_float+0x222>
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	07d8      	lsls	r0, r3, #31
 800a248:	d50f      	bpl.n	800a26a <_printf_float+0x242>
 800a24a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a24e:	4631      	mov	r1, r6
 800a250:	4628      	mov	r0, r5
 800a252:	47b8      	blx	r7
 800a254:	3001      	adds	r0, #1
 800a256:	f43f af42 	beq.w	800a0de <_printf_float+0xb6>
 800a25a:	f04f 0800 	mov.w	r8, #0
 800a25e:	f104 091a 	add.w	r9, r4, #26
 800a262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a264:	3b01      	subs	r3, #1
 800a266:	4543      	cmp	r3, r8
 800a268:	dc09      	bgt.n	800a27e <_printf_float+0x256>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	079b      	lsls	r3, r3, #30
 800a26e:	f100 8102 	bmi.w	800a476 <_printf_float+0x44e>
 800a272:	68e0      	ldr	r0, [r4, #12]
 800a274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a276:	4298      	cmp	r0, r3
 800a278:	bfb8      	it	lt
 800a27a:	4618      	movlt	r0, r3
 800a27c:	e731      	b.n	800a0e2 <_printf_float+0xba>
 800a27e:	2301      	movs	r3, #1
 800a280:	464a      	mov	r2, r9
 800a282:	4631      	mov	r1, r6
 800a284:	4628      	mov	r0, r5
 800a286:	47b8      	blx	r7
 800a288:	3001      	adds	r0, #1
 800a28a:	f43f af28 	beq.w	800a0de <_printf_float+0xb6>
 800a28e:	f108 0801 	add.w	r8, r8, #1
 800a292:	e7e6      	b.n	800a262 <_printf_float+0x23a>
 800a294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a296:	2b00      	cmp	r3, #0
 800a298:	dc38      	bgt.n	800a30c <_printf_float+0x2e4>
 800a29a:	2301      	movs	r3, #1
 800a29c:	4631      	mov	r1, r6
 800a29e:	4628      	mov	r0, r5
 800a2a0:	4a19      	ldr	r2, [pc, #100]	; (800a308 <_printf_float+0x2e0>)
 800a2a2:	47b8      	blx	r7
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	f43f af1a 	beq.w	800a0de <_printf_float+0xb6>
 800a2aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	d102      	bne.n	800a2b8 <_printf_float+0x290>
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	07d9      	lsls	r1, r3, #31
 800a2b6:	d5d8      	bpl.n	800a26a <_printf_float+0x242>
 800a2b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2bc:	4631      	mov	r1, r6
 800a2be:	4628      	mov	r0, r5
 800a2c0:	47b8      	blx	r7
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	f43f af0b 	beq.w	800a0de <_printf_float+0xb6>
 800a2c8:	f04f 0900 	mov.w	r9, #0
 800a2cc:	f104 0a1a 	add.w	sl, r4, #26
 800a2d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2d2:	425b      	negs	r3, r3
 800a2d4:	454b      	cmp	r3, r9
 800a2d6:	dc01      	bgt.n	800a2dc <_printf_float+0x2b4>
 800a2d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2da:	e794      	b.n	800a206 <_printf_float+0x1de>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	4652      	mov	r2, sl
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	47b8      	blx	r7
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	f43f aef9 	beq.w	800a0de <_printf_float+0xb6>
 800a2ec:	f109 0901 	add.w	r9, r9, #1
 800a2f0:	e7ee      	b.n	800a2d0 <_printf_float+0x2a8>
 800a2f2:	bf00      	nop
 800a2f4:	7fefffff 	.word	0x7fefffff
 800a2f8:	0800ebd4 	.word	0x0800ebd4
 800a2fc:	0800ebd8 	.word	0x0800ebd8
 800a300:	0800ebe0 	.word	0x0800ebe0
 800a304:	0800ebdc 	.word	0x0800ebdc
 800a308:	0800ebe4 	.word	0x0800ebe4
 800a30c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a30e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a310:	429a      	cmp	r2, r3
 800a312:	bfa8      	it	ge
 800a314:	461a      	movge	r2, r3
 800a316:	2a00      	cmp	r2, #0
 800a318:	4691      	mov	r9, r2
 800a31a:	dc37      	bgt.n	800a38c <_printf_float+0x364>
 800a31c:	f04f 0b00 	mov.w	fp, #0
 800a320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a324:	f104 021a 	add.w	r2, r4, #26
 800a328:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a32c:	ebaa 0309 	sub.w	r3, sl, r9
 800a330:	455b      	cmp	r3, fp
 800a332:	dc33      	bgt.n	800a39c <_printf_float+0x374>
 800a334:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a338:	429a      	cmp	r2, r3
 800a33a:	db3b      	blt.n	800a3b4 <_printf_float+0x38c>
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	07da      	lsls	r2, r3, #31
 800a340:	d438      	bmi.n	800a3b4 <_printf_float+0x38c>
 800a342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a344:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a346:	eba2 030a 	sub.w	r3, r2, sl
 800a34a:	eba2 0901 	sub.w	r9, r2, r1
 800a34e:	4599      	cmp	r9, r3
 800a350:	bfa8      	it	ge
 800a352:	4699      	movge	r9, r3
 800a354:	f1b9 0f00 	cmp.w	r9, #0
 800a358:	dc34      	bgt.n	800a3c4 <_printf_float+0x39c>
 800a35a:	f04f 0800 	mov.w	r8, #0
 800a35e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a362:	f104 0a1a 	add.w	sl, r4, #26
 800a366:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a36a:	1a9b      	subs	r3, r3, r2
 800a36c:	eba3 0309 	sub.w	r3, r3, r9
 800a370:	4543      	cmp	r3, r8
 800a372:	f77f af7a 	ble.w	800a26a <_printf_float+0x242>
 800a376:	2301      	movs	r3, #1
 800a378:	4652      	mov	r2, sl
 800a37a:	4631      	mov	r1, r6
 800a37c:	4628      	mov	r0, r5
 800a37e:	47b8      	blx	r7
 800a380:	3001      	adds	r0, #1
 800a382:	f43f aeac 	beq.w	800a0de <_printf_float+0xb6>
 800a386:	f108 0801 	add.w	r8, r8, #1
 800a38a:	e7ec      	b.n	800a366 <_printf_float+0x33e>
 800a38c:	4613      	mov	r3, r2
 800a38e:	4631      	mov	r1, r6
 800a390:	4642      	mov	r2, r8
 800a392:	4628      	mov	r0, r5
 800a394:	47b8      	blx	r7
 800a396:	3001      	adds	r0, #1
 800a398:	d1c0      	bne.n	800a31c <_printf_float+0x2f4>
 800a39a:	e6a0      	b.n	800a0de <_printf_float+0xb6>
 800a39c:	2301      	movs	r3, #1
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800a3a4:	47b8      	blx	r7
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	f43f ae99 	beq.w	800a0de <_printf_float+0xb6>
 800a3ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3ae:	f10b 0b01 	add.w	fp, fp, #1
 800a3b2:	e7b9      	b.n	800a328 <_printf_float+0x300>
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	47b8      	blx	r7
 800a3be:	3001      	adds	r0, #1
 800a3c0:	d1bf      	bne.n	800a342 <_printf_float+0x31a>
 800a3c2:	e68c      	b.n	800a0de <_printf_float+0xb6>
 800a3c4:	464b      	mov	r3, r9
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	eb08 020a 	add.w	r2, r8, sl
 800a3ce:	47b8      	blx	r7
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d1c2      	bne.n	800a35a <_printf_float+0x332>
 800a3d4:	e683      	b.n	800a0de <_printf_float+0xb6>
 800a3d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3d8:	2a01      	cmp	r2, #1
 800a3da:	dc01      	bgt.n	800a3e0 <_printf_float+0x3b8>
 800a3dc:	07db      	lsls	r3, r3, #31
 800a3de:	d537      	bpl.n	800a450 <_printf_float+0x428>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4642      	mov	r2, r8
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	47b8      	blx	r7
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	f43f ae77 	beq.w	800a0de <_printf_float+0xb6>
 800a3f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	47b8      	blx	r7
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	f43f ae6f 	beq.w	800a0de <_printf_float+0xb6>
 800a400:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a404:	2200      	movs	r2, #0
 800a406:	2300      	movs	r3, #0
 800a408:	f7f6 fae6 	bl	80009d8 <__aeabi_dcmpeq>
 800a40c:	b9d8      	cbnz	r0, 800a446 <_printf_float+0x41e>
 800a40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a410:	f108 0201 	add.w	r2, r8, #1
 800a414:	3b01      	subs	r3, #1
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	d10e      	bne.n	800a43e <_printf_float+0x416>
 800a420:	e65d      	b.n	800a0de <_printf_float+0xb6>
 800a422:	2301      	movs	r3, #1
 800a424:	464a      	mov	r2, r9
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae56 	beq.w	800a0de <_printf_float+0xb6>
 800a432:	f108 0801 	add.w	r8, r8, #1
 800a436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a438:	3b01      	subs	r3, #1
 800a43a:	4543      	cmp	r3, r8
 800a43c:	dcf1      	bgt.n	800a422 <_printf_float+0x3fa>
 800a43e:	4653      	mov	r3, sl
 800a440:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a444:	e6e0      	b.n	800a208 <_printf_float+0x1e0>
 800a446:	f04f 0800 	mov.w	r8, #0
 800a44a:	f104 091a 	add.w	r9, r4, #26
 800a44e:	e7f2      	b.n	800a436 <_printf_float+0x40e>
 800a450:	2301      	movs	r3, #1
 800a452:	4642      	mov	r2, r8
 800a454:	e7df      	b.n	800a416 <_printf_float+0x3ee>
 800a456:	2301      	movs	r3, #1
 800a458:	464a      	mov	r2, r9
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	f43f ae3c 	beq.w	800a0de <_printf_float+0xb6>
 800a466:	f108 0801 	add.w	r8, r8, #1
 800a46a:	68e3      	ldr	r3, [r4, #12]
 800a46c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a46e:	1a5b      	subs	r3, r3, r1
 800a470:	4543      	cmp	r3, r8
 800a472:	dcf0      	bgt.n	800a456 <_printf_float+0x42e>
 800a474:	e6fd      	b.n	800a272 <_printf_float+0x24a>
 800a476:	f04f 0800 	mov.w	r8, #0
 800a47a:	f104 0919 	add.w	r9, r4, #25
 800a47e:	e7f4      	b.n	800a46a <_printf_float+0x442>

0800a480 <_printf_common>:
 800a480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a484:	4616      	mov	r6, r2
 800a486:	4699      	mov	r9, r3
 800a488:	688a      	ldr	r2, [r1, #8]
 800a48a:	690b      	ldr	r3, [r1, #16]
 800a48c:	4607      	mov	r7, r0
 800a48e:	4293      	cmp	r3, r2
 800a490:	bfb8      	it	lt
 800a492:	4613      	movlt	r3, r2
 800a494:	6033      	str	r3, [r6, #0]
 800a496:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a49a:	460c      	mov	r4, r1
 800a49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4a0:	b10a      	cbz	r2, 800a4a6 <_printf_common+0x26>
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	6033      	str	r3, [r6, #0]
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	0699      	lsls	r1, r3, #26
 800a4aa:	bf42      	ittt	mi
 800a4ac:	6833      	ldrmi	r3, [r6, #0]
 800a4ae:	3302      	addmi	r3, #2
 800a4b0:	6033      	strmi	r3, [r6, #0]
 800a4b2:	6825      	ldr	r5, [r4, #0]
 800a4b4:	f015 0506 	ands.w	r5, r5, #6
 800a4b8:	d106      	bne.n	800a4c8 <_printf_common+0x48>
 800a4ba:	f104 0a19 	add.w	sl, r4, #25
 800a4be:	68e3      	ldr	r3, [r4, #12]
 800a4c0:	6832      	ldr	r2, [r6, #0]
 800a4c2:	1a9b      	subs	r3, r3, r2
 800a4c4:	42ab      	cmp	r3, r5
 800a4c6:	dc28      	bgt.n	800a51a <_printf_common+0x9a>
 800a4c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4cc:	1e13      	subs	r3, r2, #0
 800a4ce:	6822      	ldr	r2, [r4, #0]
 800a4d0:	bf18      	it	ne
 800a4d2:	2301      	movne	r3, #1
 800a4d4:	0692      	lsls	r2, r2, #26
 800a4d6:	d42d      	bmi.n	800a534 <_printf_common+0xb4>
 800a4d8:	4649      	mov	r1, r9
 800a4da:	4638      	mov	r0, r7
 800a4dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4e0:	47c0      	blx	r8
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d020      	beq.n	800a528 <_printf_common+0xa8>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	68e5      	ldr	r5, [r4, #12]
 800a4ea:	f003 0306 	and.w	r3, r3, #6
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	bf18      	it	ne
 800a4f2:	2500      	movne	r5, #0
 800a4f4:	6832      	ldr	r2, [r6, #0]
 800a4f6:	f04f 0600 	mov.w	r6, #0
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	bf08      	it	eq
 800a4fe:	1aad      	subeq	r5, r5, r2
 800a500:	6922      	ldr	r2, [r4, #16]
 800a502:	bf08      	it	eq
 800a504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a508:	4293      	cmp	r3, r2
 800a50a:	bfc4      	itt	gt
 800a50c:	1a9b      	subgt	r3, r3, r2
 800a50e:	18ed      	addgt	r5, r5, r3
 800a510:	341a      	adds	r4, #26
 800a512:	42b5      	cmp	r5, r6
 800a514:	d11a      	bne.n	800a54c <_printf_common+0xcc>
 800a516:	2000      	movs	r0, #0
 800a518:	e008      	b.n	800a52c <_printf_common+0xac>
 800a51a:	2301      	movs	r3, #1
 800a51c:	4652      	mov	r2, sl
 800a51e:	4649      	mov	r1, r9
 800a520:	4638      	mov	r0, r7
 800a522:	47c0      	blx	r8
 800a524:	3001      	adds	r0, #1
 800a526:	d103      	bne.n	800a530 <_printf_common+0xb0>
 800a528:	f04f 30ff 	mov.w	r0, #4294967295
 800a52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a530:	3501      	adds	r5, #1
 800a532:	e7c4      	b.n	800a4be <_printf_common+0x3e>
 800a534:	2030      	movs	r0, #48	; 0x30
 800a536:	18e1      	adds	r1, r4, r3
 800a538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a53c:	1c5a      	adds	r2, r3, #1
 800a53e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a542:	4422      	add	r2, r4
 800a544:	3302      	adds	r3, #2
 800a546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a54a:	e7c5      	b.n	800a4d8 <_printf_common+0x58>
 800a54c:	2301      	movs	r3, #1
 800a54e:	4622      	mov	r2, r4
 800a550:	4649      	mov	r1, r9
 800a552:	4638      	mov	r0, r7
 800a554:	47c0      	blx	r8
 800a556:	3001      	adds	r0, #1
 800a558:	d0e6      	beq.n	800a528 <_printf_common+0xa8>
 800a55a:	3601      	adds	r6, #1
 800a55c:	e7d9      	b.n	800a512 <_printf_common+0x92>
	...

0800a560 <_printf_i>:
 800a560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a564:	460c      	mov	r4, r1
 800a566:	7e27      	ldrb	r7, [r4, #24]
 800a568:	4691      	mov	r9, r2
 800a56a:	2f78      	cmp	r7, #120	; 0x78
 800a56c:	4680      	mov	r8, r0
 800a56e:	469a      	mov	sl, r3
 800a570:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a572:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a576:	d807      	bhi.n	800a588 <_printf_i+0x28>
 800a578:	2f62      	cmp	r7, #98	; 0x62
 800a57a:	d80a      	bhi.n	800a592 <_printf_i+0x32>
 800a57c:	2f00      	cmp	r7, #0
 800a57e:	f000 80d9 	beq.w	800a734 <_printf_i+0x1d4>
 800a582:	2f58      	cmp	r7, #88	; 0x58
 800a584:	f000 80a4 	beq.w	800a6d0 <_printf_i+0x170>
 800a588:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a58c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a590:	e03a      	b.n	800a608 <_printf_i+0xa8>
 800a592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a596:	2b15      	cmp	r3, #21
 800a598:	d8f6      	bhi.n	800a588 <_printf_i+0x28>
 800a59a:	a001      	add	r0, pc, #4	; (adr r0, 800a5a0 <_printf_i+0x40>)
 800a59c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a5a0:	0800a5f9 	.word	0x0800a5f9
 800a5a4:	0800a60d 	.word	0x0800a60d
 800a5a8:	0800a589 	.word	0x0800a589
 800a5ac:	0800a589 	.word	0x0800a589
 800a5b0:	0800a589 	.word	0x0800a589
 800a5b4:	0800a589 	.word	0x0800a589
 800a5b8:	0800a60d 	.word	0x0800a60d
 800a5bc:	0800a589 	.word	0x0800a589
 800a5c0:	0800a589 	.word	0x0800a589
 800a5c4:	0800a589 	.word	0x0800a589
 800a5c8:	0800a589 	.word	0x0800a589
 800a5cc:	0800a71b 	.word	0x0800a71b
 800a5d0:	0800a63d 	.word	0x0800a63d
 800a5d4:	0800a6fd 	.word	0x0800a6fd
 800a5d8:	0800a589 	.word	0x0800a589
 800a5dc:	0800a589 	.word	0x0800a589
 800a5e0:	0800a73d 	.word	0x0800a73d
 800a5e4:	0800a589 	.word	0x0800a589
 800a5e8:	0800a63d 	.word	0x0800a63d
 800a5ec:	0800a589 	.word	0x0800a589
 800a5f0:	0800a589 	.word	0x0800a589
 800a5f4:	0800a705 	.word	0x0800a705
 800a5f8:	680b      	ldr	r3, [r1, #0]
 800a5fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5fe:	1d1a      	adds	r2, r3, #4
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	600a      	str	r2, [r1, #0]
 800a604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a608:	2301      	movs	r3, #1
 800a60a:	e0a4      	b.n	800a756 <_printf_i+0x1f6>
 800a60c:	6825      	ldr	r5, [r4, #0]
 800a60e:	6808      	ldr	r0, [r1, #0]
 800a610:	062e      	lsls	r6, r5, #24
 800a612:	f100 0304 	add.w	r3, r0, #4
 800a616:	d50a      	bpl.n	800a62e <_printf_i+0xce>
 800a618:	6805      	ldr	r5, [r0, #0]
 800a61a:	600b      	str	r3, [r1, #0]
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	da03      	bge.n	800a628 <_printf_i+0xc8>
 800a620:	232d      	movs	r3, #45	; 0x2d
 800a622:	426d      	negs	r5, r5
 800a624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a628:	230a      	movs	r3, #10
 800a62a:	485e      	ldr	r0, [pc, #376]	; (800a7a4 <_printf_i+0x244>)
 800a62c:	e019      	b.n	800a662 <_printf_i+0x102>
 800a62e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a632:	6805      	ldr	r5, [r0, #0]
 800a634:	600b      	str	r3, [r1, #0]
 800a636:	bf18      	it	ne
 800a638:	b22d      	sxthne	r5, r5
 800a63a:	e7ef      	b.n	800a61c <_printf_i+0xbc>
 800a63c:	680b      	ldr	r3, [r1, #0]
 800a63e:	6825      	ldr	r5, [r4, #0]
 800a640:	1d18      	adds	r0, r3, #4
 800a642:	6008      	str	r0, [r1, #0]
 800a644:	0628      	lsls	r0, r5, #24
 800a646:	d501      	bpl.n	800a64c <_printf_i+0xec>
 800a648:	681d      	ldr	r5, [r3, #0]
 800a64a:	e002      	b.n	800a652 <_printf_i+0xf2>
 800a64c:	0669      	lsls	r1, r5, #25
 800a64e:	d5fb      	bpl.n	800a648 <_printf_i+0xe8>
 800a650:	881d      	ldrh	r5, [r3, #0]
 800a652:	2f6f      	cmp	r7, #111	; 0x6f
 800a654:	bf0c      	ite	eq
 800a656:	2308      	moveq	r3, #8
 800a658:	230a      	movne	r3, #10
 800a65a:	4852      	ldr	r0, [pc, #328]	; (800a7a4 <_printf_i+0x244>)
 800a65c:	2100      	movs	r1, #0
 800a65e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a662:	6866      	ldr	r6, [r4, #4]
 800a664:	2e00      	cmp	r6, #0
 800a666:	bfa8      	it	ge
 800a668:	6821      	ldrge	r1, [r4, #0]
 800a66a:	60a6      	str	r6, [r4, #8]
 800a66c:	bfa4      	itt	ge
 800a66e:	f021 0104 	bicge.w	r1, r1, #4
 800a672:	6021      	strge	r1, [r4, #0]
 800a674:	b90d      	cbnz	r5, 800a67a <_printf_i+0x11a>
 800a676:	2e00      	cmp	r6, #0
 800a678:	d04d      	beq.n	800a716 <_printf_i+0x1b6>
 800a67a:	4616      	mov	r6, r2
 800a67c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a680:	fb03 5711 	mls	r7, r3, r1, r5
 800a684:	5dc7      	ldrb	r7, [r0, r7]
 800a686:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a68a:	462f      	mov	r7, r5
 800a68c:	42bb      	cmp	r3, r7
 800a68e:	460d      	mov	r5, r1
 800a690:	d9f4      	bls.n	800a67c <_printf_i+0x11c>
 800a692:	2b08      	cmp	r3, #8
 800a694:	d10b      	bne.n	800a6ae <_printf_i+0x14e>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	07df      	lsls	r7, r3, #31
 800a69a:	d508      	bpl.n	800a6ae <_printf_i+0x14e>
 800a69c:	6923      	ldr	r3, [r4, #16]
 800a69e:	6861      	ldr	r1, [r4, #4]
 800a6a0:	4299      	cmp	r1, r3
 800a6a2:	bfde      	ittt	le
 800a6a4:	2330      	movle	r3, #48	; 0x30
 800a6a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6ae:	1b92      	subs	r2, r2, r6
 800a6b0:	6122      	str	r2, [r4, #16]
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	f8cd a000 	str.w	sl, [sp]
 800a6bc:	aa03      	add	r2, sp, #12
 800a6be:	f7ff fedf 	bl	800a480 <_printf_common>
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	d14c      	bne.n	800a760 <_printf_i+0x200>
 800a6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ca:	b004      	add	sp, #16
 800a6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d0:	4834      	ldr	r0, [pc, #208]	; (800a7a4 <_printf_i+0x244>)
 800a6d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6d6:	680e      	ldr	r6, [r1, #0]
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	f856 5b04 	ldr.w	r5, [r6], #4
 800a6de:	061f      	lsls	r7, r3, #24
 800a6e0:	600e      	str	r6, [r1, #0]
 800a6e2:	d514      	bpl.n	800a70e <_printf_i+0x1ae>
 800a6e4:	07d9      	lsls	r1, r3, #31
 800a6e6:	bf44      	itt	mi
 800a6e8:	f043 0320 	orrmi.w	r3, r3, #32
 800a6ec:	6023      	strmi	r3, [r4, #0]
 800a6ee:	b91d      	cbnz	r5, 800a6f8 <_printf_i+0x198>
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	f023 0320 	bic.w	r3, r3, #32
 800a6f6:	6023      	str	r3, [r4, #0]
 800a6f8:	2310      	movs	r3, #16
 800a6fa:	e7af      	b.n	800a65c <_printf_i+0xfc>
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	f043 0320 	orr.w	r3, r3, #32
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	2378      	movs	r3, #120	; 0x78
 800a706:	4828      	ldr	r0, [pc, #160]	; (800a7a8 <_printf_i+0x248>)
 800a708:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a70c:	e7e3      	b.n	800a6d6 <_printf_i+0x176>
 800a70e:	065e      	lsls	r6, r3, #25
 800a710:	bf48      	it	mi
 800a712:	b2ad      	uxthmi	r5, r5
 800a714:	e7e6      	b.n	800a6e4 <_printf_i+0x184>
 800a716:	4616      	mov	r6, r2
 800a718:	e7bb      	b.n	800a692 <_printf_i+0x132>
 800a71a:	680b      	ldr	r3, [r1, #0]
 800a71c:	6826      	ldr	r6, [r4, #0]
 800a71e:	1d1d      	adds	r5, r3, #4
 800a720:	6960      	ldr	r0, [r4, #20]
 800a722:	600d      	str	r5, [r1, #0]
 800a724:	0635      	lsls	r5, r6, #24
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	d501      	bpl.n	800a72e <_printf_i+0x1ce>
 800a72a:	6018      	str	r0, [r3, #0]
 800a72c:	e002      	b.n	800a734 <_printf_i+0x1d4>
 800a72e:	0671      	lsls	r1, r6, #25
 800a730:	d5fb      	bpl.n	800a72a <_printf_i+0x1ca>
 800a732:	8018      	strh	r0, [r3, #0]
 800a734:	2300      	movs	r3, #0
 800a736:	4616      	mov	r6, r2
 800a738:	6123      	str	r3, [r4, #16]
 800a73a:	e7ba      	b.n	800a6b2 <_printf_i+0x152>
 800a73c:	680b      	ldr	r3, [r1, #0]
 800a73e:	1d1a      	adds	r2, r3, #4
 800a740:	600a      	str	r2, [r1, #0]
 800a742:	681e      	ldr	r6, [r3, #0]
 800a744:	2100      	movs	r1, #0
 800a746:	4630      	mov	r0, r6
 800a748:	6862      	ldr	r2, [r4, #4]
 800a74a:	f002 fb3d 	bl	800cdc8 <memchr>
 800a74e:	b108      	cbz	r0, 800a754 <_printf_i+0x1f4>
 800a750:	1b80      	subs	r0, r0, r6
 800a752:	6060      	str	r0, [r4, #4]
 800a754:	6863      	ldr	r3, [r4, #4]
 800a756:	6123      	str	r3, [r4, #16]
 800a758:	2300      	movs	r3, #0
 800a75a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a75e:	e7a8      	b.n	800a6b2 <_printf_i+0x152>
 800a760:	4632      	mov	r2, r6
 800a762:	4649      	mov	r1, r9
 800a764:	4640      	mov	r0, r8
 800a766:	6923      	ldr	r3, [r4, #16]
 800a768:	47d0      	blx	sl
 800a76a:	3001      	adds	r0, #1
 800a76c:	d0ab      	beq.n	800a6c6 <_printf_i+0x166>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	079b      	lsls	r3, r3, #30
 800a772:	d413      	bmi.n	800a79c <_printf_i+0x23c>
 800a774:	68e0      	ldr	r0, [r4, #12]
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	4298      	cmp	r0, r3
 800a77a:	bfb8      	it	lt
 800a77c:	4618      	movlt	r0, r3
 800a77e:	e7a4      	b.n	800a6ca <_printf_i+0x16a>
 800a780:	2301      	movs	r3, #1
 800a782:	4632      	mov	r2, r6
 800a784:	4649      	mov	r1, r9
 800a786:	4640      	mov	r0, r8
 800a788:	47d0      	blx	sl
 800a78a:	3001      	adds	r0, #1
 800a78c:	d09b      	beq.n	800a6c6 <_printf_i+0x166>
 800a78e:	3501      	adds	r5, #1
 800a790:	68e3      	ldr	r3, [r4, #12]
 800a792:	9903      	ldr	r1, [sp, #12]
 800a794:	1a5b      	subs	r3, r3, r1
 800a796:	42ab      	cmp	r3, r5
 800a798:	dcf2      	bgt.n	800a780 <_printf_i+0x220>
 800a79a:	e7eb      	b.n	800a774 <_printf_i+0x214>
 800a79c:	2500      	movs	r5, #0
 800a79e:	f104 0619 	add.w	r6, r4, #25
 800a7a2:	e7f5      	b.n	800a790 <_printf_i+0x230>
 800a7a4:	0800ebe6 	.word	0x0800ebe6
 800a7a8:	0800ebf7 	.word	0x0800ebf7

0800a7ac <_scanf_float>:
 800a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	b087      	sub	sp, #28
 800a7b2:	9303      	str	r3, [sp, #12]
 800a7b4:	688b      	ldr	r3, [r1, #8]
 800a7b6:	4617      	mov	r7, r2
 800a7b8:	1e5a      	subs	r2, r3, #1
 800a7ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a7be:	bf85      	ittet	hi
 800a7c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a7c4:	195b      	addhi	r3, r3, r5
 800a7c6:	2300      	movls	r3, #0
 800a7c8:	9302      	strhi	r3, [sp, #8]
 800a7ca:	bf88      	it	hi
 800a7cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a7d0:	468b      	mov	fp, r1
 800a7d2:	f04f 0500 	mov.w	r5, #0
 800a7d6:	bf8c      	ite	hi
 800a7d8:	608b      	strhi	r3, [r1, #8]
 800a7da:	9302      	strls	r3, [sp, #8]
 800a7dc:	680b      	ldr	r3, [r1, #0]
 800a7de:	4680      	mov	r8, r0
 800a7e0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a7e4:	f84b 3b1c 	str.w	r3, [fp], #28
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	465e      	mov	r6, fp
 800a7ec:	46aa      	mov	sl, r5
 800a7ee:	46a9      	mov	r9, r5
 800a7f0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a7f4:	9501      	str	r5, [sp, #4]
 800a7f6:	68a2      	ldr	r2, [r4, #8]
 800a7f8:	b152      	cbz	r2, 800a810 <_scanf_float+0x64>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b4e      	cmp	r3, #78	; 0x4e
 800a800:	d864      	bhi.n	800a8cc <_scanf_float+0x120>
 800a802:	2b40      	cmp	r3, #64	; 0x40
 800a804:	d83c      	bhi.n	800a880 <_scanf_float+0xd4>
 800a806:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a80a:	b2c8      	uxtb	r0, r1
 800a80c:	280e      	cmp	r0, #14
 800a80e:	d93a      	bls.n	800a886 <_scanf_float+0xda>
 800a810:	f1b9 0f00 	cmp.w	r9, #0
 800a814:	d003      	beq.n	800a81e <_scanf_float+0x72>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a822:	f1ba 0f01 	cmp.w	sl, #1
 800a826:	f200 8113 	bhi.w	800aa50 <_scanf_float+0x2a4>
 800a82a:	455e      	cmp	r6, fp
 800a82c:	f200 8105 	bhi.w	800aa3a <_scanf_float+0x28e>
 800a830:	2501      	movs	r5, #1
 800a832:	4628      	mov	r0, r5
 800a834:	b007      	add	sp, #28
 800a836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a83e:	2a0d      	cmp	r2, #13
 800a840:	d8e6      	bhi.n	800a810 <_scanf_float+0x64>
 800a842:	a101      	add	r1, pc, #4	; (adr r1, 800a848 <_scanf_float+0x9c>)
 800a844:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a848:	0800a987 	.word	0x0800a987
 800a84c:	0800a811 	.word	0x0800a811
 800a850:	0800a811 	.word	0x0800a811
 800a854:	0800a811 	.word	0x0800a811
 800a858:	0800a9e7 	.word	0x0800a9e7
 800a85c:	0800a9bf 	.word	0x0800a9bf
 800a860:	0800a811 	.word	0x0800a811
 800a864:	0800a811 	.word	0x0800a811
 800a868:	0800a995 	.word	0x0800a995
 800a86c:	0800a811 	.word	0x0800a811
 800a870:	0800a811 	.word	0x0800a811
 800a874:	0800a811 	.word	0x0800a811
 800a878:	0800a811 	.word	0x0800a811
 800a87c:	0800a94d 	.word	0x0800a94d
 800a880:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a884:	e7db      	b.n	800a83e <_scanf_float+0x92>
 800a886:	290e      	cmp	r1, #14
 800a888:	d8c2      	bhi.n	800a810 <_scanf_float+0x64>
 800a88a:	a001      	add	r0, pc, #4	; (adr r0, 800a890 <_scanf_float+0xe4>)
 800a88c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a890:	0800a93f 	.word	0x0800a93f
 800a894:	0800a811 	.word	0x0800a811
 800a898:	0800a93f 	.word	0x0800a93f
 800a89c:	0800a9d3 	.word	0x0800a9d3
 800a8a0:	0800a811 	.word	0x0800a811
 800a8a4:	0800a8ed 	.word	0x0800a8ed
 800a8a8:	0800a929 	.word	0x0800a929
 800a8ac:	0800a929 	.word	0x0800a929
 800a8b0:	0800a929 	.word	0x0800a929
 800a8b4:	0800a929 	.word	0x0800a929
 800a8b8:	0800a929 	.word	0x0800a929
 800a8bc:	0800a929 	.word	0x0800a929
 800a8c0:	0800a929 	.word	0x0800a929
 800a8c4:	0800a929 	.word	0x0800a929
 800a8c8:	0800a929 	.word	0x0800a929
 800a8cc:	2b6e      	cmp	r3, #110	; 0x6e
 800a8ce:	d809      	bhi.n	800a8e4 <_scanf_float+0x138>
 800a8d0:	2b60      	cmp	r3, #96	; 0x60
 800a8d2:	d8b2      	bhi.n	800a83a <_scanf_float+0x8e>
 800a8d4:	2b54      	cmp	r3, #84	; 0x54
 800a8d6:	d077      	beq.n	800a9c8 <_scanf_float+0x21c>
 800a8d8:	2b59      	cmp	r3, #89	; 0x59
 800a8da:	d199      	bne.n	800a810 <_scanf_float+0x64>
 800a8dc:	2d07      	cmp	r5, #7
 800a8de:	d197      	bne.n	800a810 <_scanf_float+0x64>
 800a8e0:	2508      	movs	r5, #8
 800a8e2:	e029      	b.n	800a938 <_scanf_float+0x18c>
 800a8e4:	2b74      	cmp	r3, #116	; 0x74
 800a8e6:	d06f      	beq.n	800a9c8 <_scanf_float+0x21c>
 800a8e8:	2b79      	cmp	r3, #121	; 0x79
 800a8ea:	e7f6      	b.n	800a8da <_scanf_float+0x12e>
 800a8ec:	6821      	ldr	r1, [r4, #0]
 800a8ee:	05c8      	lsls	r0, r1, #23
 800a8f0:	d51a      	bpl.n	800a928 <_scanf_float+0x17c>
 800a8f2:	9b02      	ldr	r3, [sp, #8]
 800a8f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a8f8:	6021      	str	r1, [r4, #0]
 800a8fa:	f109 0901 	add.w	r9, r9, #1
 800a8fe:	b11b      	cbz	r3, 800a908 <_scanf_float+0x15c>
 800a900:	3b01      	subs	r3, #1
 800a902:	3201      	adds	r2, #1
 800a904:	9302      	str	r3, [sp, #8]
 800a906:	60a2      	str	r2, [r4, #8]
 800a908:	68a3      	ldr	r3, [r4, #8]
 800a90a:	3b01      	subs	r3, #1
 800a90c:	60a3      	str	r3, [r4, #8]
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	3301      	adds	r3, #1
 800a912:	6123      	str	r3, [r4, #16]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3b01      	subs	r3, #1
 800a918:	2b00      	cmp	r3, #0
 800a91a:	607b      	str	r3, [r7, #4]
 800a91c:	f340 8084 	ble.w	800aa28 <_scanf_float+0x27c>
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	603b      	str	r3, [r7, #0]
 800a926:	e766      	b.n	800a7f6 <_scanf_float+0x4a>
 800a928:	eb1a 0f05 	cmn.w	sl, r5
 800a92c:	f47f af70 	bne.w	800a810 <_scanf_float+0x64>
 800a930:	6822      	ldr	r2, [r4, #0]
 800a932:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a936:	6022      	str	r2, [r4, #0]
 800a938:	f806 3b01 	strb.w	r3, [r6], #1
 800a93c:	e7e4      	b.n	800a908 <_scanf_float+0x15c>
 800a93e:	6822      	ldr	r2, [r4, #0]
 800a940:	0610      	lsls	r0, r2, #24
 800a942:	f57f af65 	bpl.w	800a810 <_scanf_float+0x64>
 800a946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a94a:	e7f4      	b.n	800a936 <_scanf_float+0x18a>
 800a94c:	f1ba 0f00 	cmp.w	sl, #0
 800a950:	d10e      	bne.n	800a970 <_scanf_float+0x1c4>
 800a952:	f1b9 0f00 	cmp.w	r9, #0
 800a956:	d10e      	bne.n	800a976 <_scanf_float+0x1ca>
 800a958:	6822      	ldr	r2, [r4, #0]
 800a95a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a95e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a962:	d108      	bne.n	800a976 <_scanf_float+0x1ca>
 800a964:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a968:	f04f 0a01 	mov.w	sl, #1
 800a96c:	6022      	str	r2, [r4, #0]
 800a96e:	e7e3      	b.n	800a938 <_scanf_float+0x18c>
 800a970:	f1ba 0f02 	cmp.w	sl, #2
 800a974:	d055      	beq.n	800aa22 <_scanf_float+0x276>
 800a976:	2d01      	cmp	r5, #1
 800a978:	d002      	beq.n	800a980 <_scanf_float+0x1d4>
 800a97a:	2d04      	cmp	r5, #4
 800a97c:	f47f af48 	bne.w	800a810 <_scanf_float+0x64>
 800a980:	3501      	adds	r5, #1
 800a982:	b2ed      	uxtb	r5, r5
 800a984:	e7d8      	b.n	800a938 <_scanf_float+0x18c>
 800a986:	f1ba 0f01 	cmp.w	sl, #1
 800a98a:	f47f af41 	bne.w	800a810 <_scanf_float+0x64>
 800a98e:	f04f 0a02 	mov.w	sl, #2
 800a992:	e7d1      	b.n	800a938 <_scanf_float+0x18c>
 800a994:	b97d      	cbnz	r5, 800a9b6 <_scanf_float+0x20a>
 800a996:	f1b9 0f00 	cmp.w	r9, #0
 800a99a:	f47f af3c 	bne.w	800a816 <_scanf_float+0x6a>
 800a99e:	6822      	ldr	r2, [r4, #0]
 800a9a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a9a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9a8:	f47f af39 	bne.w	800a81e <_scanf_float+0x72>
 800a9ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a9b0:	2501      	movs	r5, #1
 800a9b2:	6022      	str	r2, [r4, #0]
 800a9b4:	e7c0      	b.n	800a938 <_scanf_float+0x18c>
 800a9b6:	2d03      	cmp	r5, #3
 800a9b8:	d0e2      	beq.n	800a980 <_scanf_float+0x1d4>
 800a9ba:	2d05      	cmp	r5, #5
 800a9bc:	e7de      	b.n	800a97c <_scanf_float+0x1d0>
 800a9be:	2d02      	cmp	r5, #2
 800a9c0:	f47f af26 	bne.w	800a810 <_scanf_float+0x64>
 800a9c4:	2503      	movs	r5, #3
 800a9c6:	e7b7      	b.n	800a938 <_scanf_float+0x18c>
 800a9c8:	2d06      	cmp	r5, #6
 800a9ca:	f47f af21 	bne.w	800a810 <_scanf_float+0x64>
 800a9ce:	2507      	movs	r5, #7
 800a9d0:	e7b2      	b.n	800a938 <_scanf_float+0x18c>
 800a9d2:	6822      	ldr	r2, [r4, #0]
 800a9d4:	0591      	lsls	r1, r2, #22
 800a9d6:	f57f af1b 	bpl.w	800a810 <_scanf_float+0x64>
 800a9da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a9de:	6022      	str	r2, [r4, #0]
 800a9e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9e4:	e7a8      	b.n	800a938 <_scanf_float+0x18c>
 800a9e6:	6822      	ldr	r2, [r4, #0]
 800a9e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a9ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a9f0:	d006      	beq.n	800aa00 <_scanf_float+0x254>
 800a9f2:	0550      	lsls	r0, r2, #21
 800a9f4:	f57f af0c 	bpl.w	800a810 <_scanf_float+0x64>
 800a9f8:	f1b9 0f00 	cmp.w	r9, #0
 800a9fc:	f43f af0f 	beq.w	800a81e <_scanf_float+0x72>
 800aa00:	0591      	lsls	r1, r2, #22
 800aa02:	bf58      	it	pl
 800aa04:	9901      	ldrpl	r1, [sp, #4]
 800aa06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa0a:	bf58      	it	pl
 800aa0c:	eba9 0101 	subpl.w	r1, r9, r1
 800aa10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aa14:	f04f 0900 	mov.w	r9, #0
 800aa18:	bf58      	it	pl
 800aa1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa1e:	6022      	str	r2, [r4, #0]
 800aa20:	e78a      	b.n	800a938 <_scanf_float+0x18c>
 800aa22:	f04f 0a03 	mov.w	sl, #3
 800aa26:	e787      	b.n	800a938 <_scanf_float+0x18c>
 800aa28:	4639      	mov	r1, r7
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa30:	4798      	blx	r3
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f43f aedf 	beq.w	800a7f6 <_scanf_float+0x4a>
 800aa38:	e6ea      	b.n	800a810 <_scanf_float+0x64>
 800aa3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa3e:	463a      	mov	r2, r7
 800aa40:	4640      	mov	r0, r8
 800aa42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa46:	4798      	blx	r3
 800aa48:	6923      	ldr	r3, [r4, #16]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	e6ec      	b.n	800a82a <_scanf_float+0x7e>
 800aa50:	1e6b      	subs	r3, r5, #1
 800aa52:	2b06      	cmp	r3, #6
 800aa54:	d825      	bhi.n	800aaa2 <_scanf_float+0x2f6>
 800aa56:	2d02      	cmp	r5, #2
 800aa58:	d836      	bhi.n	800aac8 <_scanf_float+0x31c>
 800aa5a:	455e      	cmp	r6, fp
 800aa5c:	f67f aee8 	bls.w	800a830 <_scanf_float+0x84>
 800aa60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa64:	463a      	mov	r2, r7
 800aa66:	4640      	mov	r0, r8
 800aa68:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa6c:	4798      	blx	r3
 800aa6e:	6923      	ldr	r3, [r4, #16]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	6123      	str	r3, [r4, #16]
 800aa74:	e7f1      	b.n	800aa5a <_scanf_float+0x2ae>
 800aa76:	9802      	ldr	r0, [sp, #8]
 800aa78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aa80:	463a      	mov	r2, r7
 800aa82:	9002      	str	r0, [sp, #8]
 800aa84:	4640      	mov	r0, r8
 800aa86:	4798      	blx	r3
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	6123      	str	r3, [r4, #16]
 800aa8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa92:	fa5f fa8a 	uxtb.w	sl, sl
 800aa96:	f1ba 0f02 	cmp.w	sl, #2
 800aa9a:	d1ec      	bne.n	800aa76 <_scanf_float+0x2ca>
 800aa9c:	3d03      	subs	r5, #3
 800aa9e:	b2ed      	uxtb	r5, r5
 800aaa0:	1b76      	subs	r6, r6, r5
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	05da      	lsls	r2, r3, #23
 800aaa6:	d52f      	bpl.n	800ab08 <_scanf_float+0x35c>
 800aaa8:	055b      	lsls	r3, r3, #21
 800aaaa:	d510      	bpl.n	800aace <_scanf_float+0x322>
 800aaac:	455e      	cmp	r6, fp
 800aaae:	f67f aebf 	bls.w	800a830 <_scanf_float+0x84>
 800aab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aab6:	463a      	mov	r2, r7
 800aab8:	4640      	mov	r0, r8
 800aaba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aabe:	4798      	blx	r3
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	6123      	str	r3, [r4, #16]
 800aac6:	e7f1      	b.n	800aaac <_scanf_float+0x300>
 800aac8:	46aa      	mov	sl, r5
 800aaca:	9602      	str	r6, [sp, #8]
 800aacc:	e7df      	b.n	800aa8e <_scanf_float+0x2e2>
 800aace:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aad2:	6923      	ldr	r3, [r4, #16]
 800aad4:	2965      	cmp	r1, #101	; 0x65
 800aad6:	f103 33ff 	add.w	r3, r3, #4294967295
 800aada:	f106 35ff 	add.w	r5, r6, #4294967295
 800aade:	6123      	str	r3, [r4, #16]
 800aae0:	d00c      	beq.n	800aafc <_scanf_float+0x350>
 800aae2:	2945      	cmp	r1, #69	; 0x45
 800aae4:	d00a      	beq.n	800aafc <_scanf_float+0x350>
 800aae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aaea:	463a      	mov	r2, r7
 800aaec:	4640      	mov	r0, r8
 800aaee:	4798      	blx	r3
 800aaf0:	6923      	ldr	r3, [r4, #16]
 800aaf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	1eb5      	subs	r5, r6, #2
 800aafa:	6123      	str	r3, [r4, #16]
 800aafc:	463a      	mov	r2, r7
 800aafe:	4640      	mov	r0, r8
 800ab00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab04:	4798      	blx	r3
 800ab06:	462e      	mov	r6, r5
 800ab08:	6825      	ldr	r5, [r4, #0]
 800ab0a:	f015 0510 	ands.w	r5, r5, #16
 800ab0e:	d159      	bne.n	800abc4 <_scanf_float+0x418>
 800ab10:	7035      	strb	r5, [r6, #0]
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab1c:	d11c      	bne.n	800ab58 <_scanf_float+0x3ac>
 800ab1e:	9b01      	ldr	r3, [sp, #4]
 800ab20:	454b      	cmp	r3, r9
 800ab22:	eba3 0209 	sub.w	r2, r3, r9
 800ab26:	d124      	bne.n	800ab72 <_scanf_float+0x3c6>
 800ab28:	2200      	movs	r2, #0
 800ab2a:	4659      	mov	r1, fp
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	f000 fe8b 	bl	800b848 <_strtod_r>
 800ab32:	f8d4 c000 	ldr.w	ip, [r4]
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	f01c 0f02 	tst.w	ip, #2
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	460f      	mov	r7, r1
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	d021      	beq.n	800ab88 <_scanf_float+0x3dc>
 800ab44:	9903      	ldr	r1, [sp, #12]
 800ab46:	1d1a      	adds	r2, r3, #4
 800ab48:	600a      	str	r2, [r1, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	e9c3 6700 	strd	r6, r7, [r3]
 800ab50:	68e3      	ldr	r3, [r4, #12]
 800ab52:	3301      	adds	r3, #1
 800ab54:	60e3      	str	r3, [r4, #12]
 800ab56:	e66c      	b.n	800a832 <_scanf_float+0x86>
 800ab58:	9b04      	ldr	r3, [sp, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0e4      	beq.n	800ab28 <_scanf_float+0x37c>
 800ab5e:	9905      	ldr	r1, [sp, #20]
 800ab60:	230a      	movs	r3, #10
 800ab62:	462a      	mov	r2, r5
 800ab64:	4640      	mov	r0, r8
 800ab66:	3101      	adds	r1, #1
 800ab68:	f000 fefa 	bl	800b960 <_strtol_r>
 800ab6c:	9b04      	ldr	r3, [sp, #16]
 800ab6e:	9e05      	ldr	r6, [sp, #20]
 800ab70:	1ac2      	subs	r2, r0, r3
 800ab72:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ab76:	429e      	cmp	r6, r3
 800ab78:	bf28      	it	cs
 800ab7a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ab7e:	4630      	mov	r0, r6
 800ab80:	4911      	ldr	r1, [pc, #68]	; (800abc8 <_scanf_float+0x41c>)
 800ab82:	f000 f829 	bl	800abd8 <siprintf>
 800ab86:	e7cf      	b.n	800ab28 <_scanf_float+0x37c>
 800ab88:	f01c 0f04 	tst.w	ip, #4
 800ab8c:	f103 0e04 	add.w	lr, r3, #4
 800ab90:	d003      	beq.n	800ab9a <_scanf_float+0x3ee>
 800ab92:	9903      	ldr	r1, [sp, #12]
 800ab94:	f8c1 e000 	str.w	lr, [r1]
 800ab98:	e7d7      	b.n	800ab4a <_scanf_float+0x39e>
 800ab9a:	9a03      	ldr	r2, [sp, #12]
 800ab9c:	f8c2 e000 	str.w	lr, [r2]
 800aba0:	f8d3 8000 	ldr.w	r8, [r3]
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	f7f5 ff48 	bl	8000a3c <__aeabi_dcmpun>
 800abac:	b128      	cbz	r0, 800abba <_scanf_float+0x40e>
 800abae:	4807      	ldr	r0, [pc, #28]	; (800abcc <_scanf_float+0x420>)
 800abb0:	f000 f80e 	bl	800abd0 <nanf>
 800abb4:	f8c8 0000 	str.w	r0, [r8]
 800abb8:	e7ca      	b.n	800ab50 <_scanf_float+0x3a4>
 800abba:	4630      	mov	r0, r6
 800abbc:	4639      	mov	r1, r7
 800abbe:	f7f5 ff9b 	bl	8000af8 <__aeabi_d2f>
 800abc2:	e7f7      	b.n	800abb4 <_scanf_float+0x408>
 800abc4:	2500      	movs	r5, #0
 800abc6:	e634      	b.n	800a832 <_scanf_float+0x86>
 800abc8:	0800ec08 	.word	0x0800ec08
 800abcc:	0800f020 	.word	0x0800f020

0800abd0 <nanf>:
 800abd0:	4800      	ldr	r0, [pc, #0]	; (800abd4 <nanf+0x4>)
 800abd2:	4770      	bx	lr
 800abd4:	7fc00000 	.word	0x7fc00000

0800abd8 <siprintf>:
 800abd8:	b40e      	push	{r1, r2, r3}
 800abda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abde:	b500      	push	{lr}
 800abe0:	b09c      	sub	sp, #112	; 0x70
 800abe2:	ab1d      	add	r3, sp, #116	; 0x74
 800abe4:	9002      	str	r0, [sp, #8]
 800abe6:	9006      	str	r0, [sp, #24]
 800abe8:	9107      	str	r1, [sp, #28]
 800abea:	9104      	str	r1, [sp, #16]
 800abec:	4808      	ldr	r0, [pc, #32]	; (800ac10 <siprintf+0x38>)
 800abee:	4909      	ldr	r1, [pc, #36]	; (800ac14 <siprintf+0x3c>)
 800abf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800abf4:	9105      	str	r1, [sp, #20]
 800abf6:	6800      	ldr	r0, [r0, #0]
 800abf8:	a902      	add	r1, sp, #8
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	f002 feba 	bl	800d974 <_svfiprintf_r>
 800ac00:	2200      	movs	r2, #0
 800ac02:	9b02      	ldr	r3, [sp, #8]
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	b01c      	add	sp, #112	; 0x70
 800ac08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac0c:	b003      	add	sp, #12
 800ac0e:	4770      	bx	lr
 800ac10:	20000014 	.word	0x20000014
 800ac14:	ffff0208 	.word	0xffff0208

0800ac18 <sulp>:
 800ac18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	4690      	mov	r8, r2
 800ac20:	f002 fc50 	bl	800d4c4 <__ulp>
 800ac24:	4604      	mov	r4, r0
 800ac26:	460d      	mov	r5, r1
 800ac28:	f1b8 0f00 	cmp.w	r8, #0
 800ac2c:	d011      	beq.n	800ac52 <sulp+0x3a>
 800ac2e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ac32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	dd0b      	ble.n	800ac52 <sulp+0x3a>
 800ac3a:	2400      	movs	r4, #0
 800ac3c:	051b      	lsls	r3, r3, #20
 800ac3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ac46:	4622      	mov	r2, r4
 800ac48:	462b      	mov	r3, r5
 800ac4a:	f7f5 fc5d 	bl	8000508 <__aeabi_dmul>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	460d      	mov	r5, r1
 800ac52:	4620      	mov	r0, r4
 800ac54:	4629      	mov	r1, r5
 800ac56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac5a:	0000      	movs	r0, r0
 800ac5c:	0000      	movs	r0, r0
	...

0800ac60 <_strtod_l>:
 800ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	469b      	mov	fp, r3
 800ac66:	2300      	movs	r3, #0
 800ac68:	b0a1      	sub	sp, #132	; 0x84
 800ac6a:	931c      	str	r3, [sp, #112]	; 0x70
 800ac6c:	4ba1      	ldr	r3, [pc, #644]	; (800aef4 <_strtod_l+0x294>)
 800ac6e:	4682      	mov	sl, r0
 800ac70:	681f      	ldr	r7, [r3, #0]
 800ac72:	460e      	mov	r6, r1
 800ac74:	4638      	mov	r0, r7
 800ac76:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac78:	f7f5 fa82 	bl	8000180 <strlen>
 800ac7c:	f04f 0800 	mov.w	r8, #0
 800ac80:	4604      	mov	r4, r0
 800ac82:	f04f 0900 	mov.w	r9, #0
 800ac86:	961b      	str	r6, [sp, #108]	; 0x6c
 800ac88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac8a:	781a      	ldrb	r2, [r3, #0]
 800ac8c:	2a2b      	cmp	r2, #43	; 0x2b
 800ac8e:	d04c      	beq.n	800ad2a <_strtod_l+0xca>
 800ac90:	d83a      	bhi.n	800ad08 <_strtod_l+0xa8>
 800ac92:	2a0d      	cmp	r2, #13
 800ac94:	d833      	bhi.n	800acfe <_strtod_l+0x9e>
 800ac96:	2a08      	cmp	r2, #8
 800ac98:	d833      	bhi.n	800ad02 <_strtod_l+0xa2>
 800ac9a:	2a00      	cmp	r2, #0
 800ac9c:	d03d      	beq.n	800ad1a <_strtod_l+0xba>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	930c      	str	r3, [sp, #48]	; 0x30
 800aca2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800aca4:	782b      	ldrb	r3, [r5, #0]
 800aca6:	2b30      	cmp	r3, #48	; 0x30
 800aca8:	f040 80af 	bne.w	800ae0a <_strtod_l+0x1aa>
 800acac:	786b      	ldrb	r3, [r5, #1]
 800acae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800acb2:	2b58      	cmp	r3, #88	; 0x58
 800acb4:	d16c      	bne.n	800ad90 <_strtod_l+0x130>
 800acb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acb8:	4650      	mov	r0, sl
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	ab1c      	add	r3, sp, #112	; 0x70
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	4a8d      	ldr	r2, [pc, #564]	; (800aef8 <_strtod_l+0x298>)
 800acc2:	f8cd b008 	str.w	fp, [sp, #8]
 800acc6:	ab1d      	add	r3, sp, #116	; 0x74
 800acc8:	a91b      	add	r1, sp, #108	; 0x6c
 800acca:	f001 fd61 	bl	800c790 <__gethex>
 800acce:	f010 0607 	ands.w	r6, r0, #7
 800acd2:	4604      	mov	r4, r0
 800acd4:	d005      	beq.n	800ace2 <_strtod_l+0x82>
 800acd6:	2e06      	cmp	r6, #6
 800acd8:	d129      	bne.n	800ad2e <_strtod_l+0xce>
 800acda:	2300      	movs	r3, #0
 800acdc:	3501      	adds	r5, #1
 800acde:	951b      	str	r5, [sp, #108]	; 0x6c
 800ace0:	930c      	str	r3, [sp, #48]	; 0x30
 800ace2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f040 8596 	bne.w	800b816 <_strtod_l+0xbb6>
 800acea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acec:	b1d3      	cbz	r3, 800ad24 <_strtod_l+0xc4>
 800acee:	4642      	mov	r2, r8
 800acf0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800acf4:	4610      	mov	r0, r2
 800acf6:	4619      	mov	r1, r3
 800acf8:	b021      	add	sp, #132	; 0x84
 800acfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acfe:	2a20      	cmp	r2, #32
 800ad00:	d1cd      	bne.n	800ac9e <_strtod_l+0x3e>
 800ad02:	3301      	adds	r3, #1
 800ad04:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad06:	e7bf      	b.n	800ac88 <_strtod_l+0x28>
 800ad08:	2a2d      	cmp	r2, #45	; 0x2d
 800ad0a:	d1c8      	bne.n	800ac9e <_strtod_l+0x3e>
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	920c      	str	r2, [sp, #48]	; 0x30
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad14:	785b      	ldrb	r3, [r3, #1]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1c3      	bne.n	800aca2 <_strtod_l+0x42>
 800ad1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad1c:	961b      	str	r6, [sp, #108]	; 0x6c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f040 8577 	bne.w	800b812 <_strtod_l+0xbb2>
 800ad24:	4642      	mov	r2, r8
 800ad26:	464b      	mov	r3, r9
 800ad28:	e7e4      	b.n	800acf4 <_strtod_l+0x94>
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	e7ef      	b.n	800ad0e <_strtod_l+0xae>
 800ad2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ad30:	b13a      	cbz	r2, 800ad42 <_strtod_l+0xe2>
 800ad32:	2135      	movs	r1, #53	; 0x35
 800ad34:	a81e      	add	r0, sp, #120	; 0x78
 800ad36:	f002 fcc9 	bl	800d6cc <__copybits>
 800ad3a:	4650      	mov	r0, sl
 800ad3c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad3e:	f002 f891 	bl	800ce64 <_Bfree>
 800ad42:	3e01      	subs	r6, #1
 800ad44:	2e05      	cmp	r6, #5
 800ad46:	d807      	bhi.n	800ad58 <_strtod_l+0xf8>
 800ad48:	e8df f006 	tbb	[pc, r6]
 800ad4c:	1d180b0e 	.word	0x1d180b0e
 800ad50:	030e      	.short	0x030e
 800ad52:	f04f 0900 	mov.w	r9, #0
 800ad56:	46c8      	mov	r8, r9
 800ad58:	0721      	lsls	r1, r4, #28
 800ad5a:	d5c2      	bpl.n	800ace2 <_strtod_l+0x82>
 800ad5c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ad60:	e7bf      	b.n	800ace2 <_strtod_l+0x82>
 800ad62:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800ad66:	e7f7      	b.n	800ad58 <_strtod_l+0xf8>
 800ad68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ad6a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800ad6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ad76:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ad7a:	e7ed      	b.n	800ad58 <_strtod_l+0xf8>
 800ad7c:	f04f 0800 	mov.w	r8, #0
 800ad80:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800aefc <_strtod_l+0x29c>
 800ad84:	e7e8      	b.n	800ad58 <_strtod_l+0xf8>
 800ad86:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ad8a:	f04f 38ff 	mov.w	r8, #4294967295
 800ad8e:	e7e3      	b.n	800ad58 <_strtod_l+0xf8>
 800ad90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad96:	785b      	ldrb	r3, [r3, #1]
 800ad98:	2b30      	cmp	r3, #48	; 0x30
 800ad9a:	d0f9      	beq.n	800ad90 <_strtod_l+0x130>
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0a0      	beq.n	800ace2 <_strtod_l+0x82>
 800ada0:	2301      	movs	r3, #1
 800ada2:	9307      	str	r3, [sp, #28]
 800ada4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ada6:	220a      	movs	r2, #10
 800ada8:	9308      	str	r3, [sp, #32]
 800adaa:	2300      	movs	r3, #0
 800adac:	469b      	mov	fp, r3
 800adae:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800adb2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800adb4:	7805      	ldrb	r5, [r0, #0]
 800adb6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800adba:	b2d9      	uxtb	r1, r3
 800adbc:	2909      	cmp	r1, #9
 800adbe:	d926      	bls.n	800ae0e <_strtod_l+0x1ae>
 800adc0:	4622      	mov	r2, r4
 800adc2:	4639      	mov	r1, r7
 800adc4:	f002 feec 	bl	800dba0 <strncmp>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d032      	beq.n	800ae32 <_strtod_l+0x1d2>
 800adcc:	2000      	movs	r0, #0
 800adce:	462b      	mov	r3, r5
 800add0:	465c      	mov	r4, fp
 800add2:	4602      	mov	r2, r0
 800add4:	9004      	str	r0, [sp, #16]
 800add6:	2b65      	cmp	r3, #101	; 0x65
 800add8:	d001      	beq.n	800adde <_strtod_l+0x17e>
 800adda:	2b45      	cmp	r3, #69	; 0x45
 800addc:	d113      	bne.n	800ae06 <_strtod_l+0x1a6>
 800adde:	b91c      	cbnz	r4, 800ade8 <_strtod_l+0x188>
 800ade0:	9b07      	ldr	r3, [sp, #28]
 800ade2:	4303      	orrs	r3, r0
 800ade4:	d099      	beq.n	800ad1a <_strtod_l+0xba>
 800ade6:	2400      	movs	r4, #0
 800ade8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800adea:	1c73      	adds	r3, r6, #1
 800adec:	931b      	str	r3, [sp, #108]	; 0x6c
 800adee:	7873      	ldrb	r3, [r6, #1]
 800adf0:	2b2b      	cmp	r3, #43	; 0x2b
 800adf2:	d078      	beq.n	800aee6 <_strtod_l+0x286>
 800adf4:	2b2d      	cmp	r3, #45	; 0x2d
 800adf6:	d07b      	beq.n	800aef0 <_strtod_l+0x290>
 800adf8:	2700      	movs	r7, #0
 800adfa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800adfe:	2909      	cmp	r1, #9
 800ae00:	f240 8082 	bls.w	800af08 <_strtod_l+0x2a8>
 800ae04:	961b      	str	r6, [sp, #108]	; 0x6c
 800ae06:	2500      	movs	r5, #0
 800ae08:	e09e      	b.n	800af48 <_strtod_l+0x2e8>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e7c9      	b.n	800ada2 <_strtod_l+0x142>
 800ae0e:	f1bb 0f08 	cmp.w	fp, #8
 800ae12:	bfd5      	itete	le
 800ae14:	9906      	ldrle	r1, [sp, #24]
 800ae16:	9905      	ldrgt	r1, [sp, #20]
 800ae18:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ae20:	f100 0001 	add.w	r0, r0, #1
 800ae24:	bfd4      	ite	le
 800ae26:	9306      	strle	r3, [sp, #24]
 800ae28:	9305      	strgt	r3, [sp, #20]
 800ae2a:	f10b 0b01 	add.w	fp, fp, #1
 800ae2e:	901b      	str	r0, [sp, #108]	; 0x6c
 800ae30:	e7bf      	b.n	800adb2 <_strtod_l+0x152>
 800ae32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae34:	191a      	adds	r2, r3, r4
 800ae36:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae38:	5d1b      	ldrb	r3, [r3, r4]
 800ae3a:	f1bb 0f00 	cmp.w	fp, #0
 800ae3e:	d036      	beq.n	800aeae <_strtod_l+0x24e>
 800ae40:	465c      	mov	r4, fp
 800ae42:	9004      	str	r0, [sp, #16]
 800ae44:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ae48:	2a09      	cmp	r2, #9
 800ae4a:	d912      	bls.n	800ae72 <_strtod_l+0x212>
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	e7c2      	b.n	800add6 <_strtod_l+0x176>
 800ae50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae52:	3001      	adds	r0, #1
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae58:	785b      	ldrb	r3, [r3, #1]
 800ae5a:	2b30      	cmp	r3, #48	; 0x30
 800ae5c:	d0f8      	beq.n	800ae50 <_strtod_l+0x1f0>
 800ae5e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ae62:	2a08      	cmp	r2, #8
 800ae64:	f200 84dc 	bhi.w	800b820 <_strtod_l+0xbc0>
 800ae68:	9004      	str	r0, [sp, #16]
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ae70:	9208      	str	r2, [sp, #32]
 800ae72:	3b30      	subs	r3, #48	; 0x30
 800ae74:	f100 0201 	add.w	r2, r0, #1
 800ae78:	d013      	beq.n	800aea2 <_strtod_l+0x242>
 800ae7a:	9904      	ldr	r1, [sp, #16]
 800ae7c:	1905      	adds	r5, r0, r4
 800ae7e:	4411      	add	r1, r2
 800ae80:	9104      	str	r1, [sp, #16]
 800ae82:	4622      	mov	r2, r4
 800ae84:	210a      	movs	r1, #10
 800ae86:	42aa      	cmp	r2, r5
 800ae88:	d113      	bne.n	800aeb2 <_strtod_l+0x252>
 800ae8a:	1822      	adds	r2, r4, r0
 800ae8c:	2a08      	cmp	r2, #8
 800ae8e:	f104 0401 	add.w	r4, r4, #1
 800ae92:	4404      	add	r4, r0
 800ae94:	dc1b      	bgt.n	800aece <_strtod_l+0x26e>
 800ae96:	220a      	movs	r2, #10
 800ae98:	9906      	ldr	r1, [sp, #24]
 800ae9a:	fb02 3301 	mla	r3, r2, r1, r3
 800ae9e:	9306      	str	r3, [sp, #24]
 800aea0:	2200      	movs	r2, #0
 800aea2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aea4:	4610      	mov	r0, r2
 800aea6:	1c59      	adds	r1, r3, #1
 800aea8:	911b      	str	r1, [sp, #108]	; 0x6c
 800aeaa:	785b      	ldrb	r3, [r3, #1]
 800aeac:	e7ca      	b.n	800ae44 <_strtod_l+0x1e4>
 800aeae:	4658      	mov	r0, fp
 800aeb0:	e7d3      	b.n	800ae5a <_strtod_l+0x1fa>
 800aeb2:	2a08      	cmp	r2, #8
 800aeb4:	dc04      	bgt.n	800aec0 <_strtod_l+0x260>
 800aeb6:	9f06      	ldr	r7, [sp, #24]
 800aeb8:	434f      	muls	r7, r1
 800aeba:	9706      	str	r7, [sp, #24]
 800aebc:	3201      	adds	r2, #1
 800aebe:	e7e2      	b.n	800ae86 <_strtod_l+0x226>
 800aec0:	1c57      	adds	r7, r2, #1
 800aec2:	2f10      	cmp	r7, #16
 800aec4:	bfde      	ittt	le
 800aec6:	9f05      	ldrle	r7, [sp, #20]
 800aec8:	434f      	mulle	r7, r1
 800aeca:	9705      	strle	r7, [sp, #20]
 800aecc:	e7f6      	b.n	800aebc <_strtod_l+0x25c>
 800aece:	2c10      	cmp	r4, #16
 800aed0:	bfdf      	itttt	le
 800aed2:	220a      	movle	r2, #10
 800aed4:	9905      	ldrle	r1, [sp, #20]
 800aed6:	fb02 3301 	mlale	r3, r2, r1, r3
 800aeda:	9305      	strle	r3, [sp, #20]
 800aedc:	e7e0      	b.n	800aea0 <_strtod_l+0x240>
 800aede:	2300      	movs	r3, #0
 800aee0:	2201      	movs	r2, #1
 800aee2:	9304      	str	r3, [sp, #16]
 800aee4:	e77c      	b.n	800ade0 <_strtod_l+0x180>
 800aee6:	2700      	movs	r7, #0
 800aee8:	1cb3      	adds	r3, r6, #2
 800aeea:	931b      	str	r3, [sp, #108]	; 0x6c
 800aeec:	78b3      	ldrb	r3, [r6, #2]
 800aeee:	e784      	b.n	800adfa <_strtod_l+0x19a>
 800aef0:	2701      	movs	r7, #1
 800aef2:	e7f9      	b.n	800aee8 <_strtod_l+0x288>
 800aef4:	0800ee60 	.word	0x0800ee60
 800aef8:	0800ec10 	.word	0x0800ec10
 800aefc:	7ff00000 	.word	0x7ff00000
 800af00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af02:	1c59      	adds	r1, r3, #1
 800af04:	911b      	str	r1, [sp, #108]	; 0x6c
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	2b30      	cmp	r3, #48	; 0x30
 800af0a:	d0f9      	beq.n	800af00 <_strtod_l+0x2a0>
 800af0c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800af10:	2908      	cmp	r1, #8
 800af12:	f63f af78 	bhi.w	800ae06 <_strtod_l+0x1a6>
 800af16:	f04f 0e0a 	mov.w	lr, #10
 800af1a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800af1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af20:	9309      	str	r3, [sp, #36]	; 0x24
 800af22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af24:	1c59      	adds	r1, r3, #1
 800af26:	911b      	str	r1, [sp, #108]	; 0x6c
 800af28:	785b      	ldrb	r3, [r3, #1]
 800af2a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800af2e:	2d09      	cmp	r5, #9
 800af30:	d935      	bls.n	800af9e <_strtod_l+0x33e>
 800af32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800af34:	1b49      	subs	r1, r1, r5
 800af36:	2908      	cmp	r1, #8
 800af38:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800af3c:	dc02      	bgt.n	800af44 <_strtod_l+0x2e4>
 800af3e:	4565      	cmp	r5, ip
 800af40:	bfa8      	it	ge
 800af42:	4665      	movge	r5, ip
 800af44:	b107      	cbz	r7, 800af48 <_strtod_l+0x2e8>
 800af46:	426d      	negs	r5, r5
 800af48:	2c00      	cmp	r4, #0
 800af4a:	d14c      	bne.n	800afe6 <_strtod_l+0x386>
 800af4c:	9907      	ldr	r1, [sp, #28]
 800af4e:	4301      	orrs	r1, r0
 800af50:	f47f aec7 	bne.w	800ace2 <_strtod_l+0x82>
 800af54:	2a00      	cmp	r2, #0
 800af56:	f47f aee0 	bne.w	800ad1a <_strtod_l+0xba>
 800af5a:	2b69      	cmp	r3, #105	; 0x69
 800af5c:	d026      	beq.n	800afac <_strtod_l+0x34c>
 800af5e:	dc23      	bgt.n	800afa8 <_strtod_l+0x348>
 800af60:	2b49      	cmp	r3, #73	; 0x49
 800af62:	d023      	beq.n	800afac <_strtod_l+0x34c>
 800af64:	2b4e      	cmp	r3, #78	; 0x4e
 800af66:	f47f aed8 	bne.w	800ad1a <_strtod_l+0xba>
 800af6a:	499c      	ldr	r1, [pc, #624]	; (800b1dc <_strtod_l+0x57c>)
 800af6c:	a81b      	add	r0, sp, #108	; 0x6c
 800af6e:	f001 fe5d 	bl	800cc2c <__match>
 800af72:	2800      	cmp	r0, #0
 800af74:	f43f aed1 	beq.w	800ad1a <_strtod_l+0xba>
 800af78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	2b28      	cmp	r3, #40	; 0x28
 800af7e:	d12c      	bne.n	800afda <_strtod_l+0x37a>
 800af80:	4997      	ldr	r1, [pc, #604]	; (800b1e0 <_strtod_l+0x580>)
 800af82:	aa1e      	add	r2, sp, #120	; 0x78
 800af84:	a81b      	add	r0, sp, #108	; 0x6c
 800af86:	f001 fe65 	bl	800cc54 <__hexnan>
 800af8a:	2805      	cmp	r0, #5
 800af8c:	d125      	bne.n	800afda <_strtod_l+0x37a>
 800af8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800af90:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800af94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800af98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800af9c:	e6a1      	b.n	800ace2 <_strtod_l+0x82>
 800af9e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800afa2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800afa6:	e7bc      	b.n	800af22 <_strtod_l+0x2c2>
 800afa8:	2b6e      	cmp	r3, #110	; 0x6e
 800afaa:	e7dc      	b.n	800af66 <_strtod_l+0x306>
 800afac:	498d      	ldr	r1, [pc, #564]	; (800b1e4 <_strtod_l+0x584>)
 800afae:	a81b      	add	r0, sp, #108	; 0x6c
 800afb0:	f001 fe3c 	bl	800cc2c <__match>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	f43f aeb0 	beq.w	800ad1a <_strtod_l+0xba>
 800afba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afbc:	498a      	ldr	r1, [pc, #552]	; (800b1e8 <_strtod_l+0x588>)
 800afbe:	3b01      	subs	r3, #1
 800afc0:	a81b      	add	r0, sp, #108	; 0x6c
 800afc2:	931b      	str	r3, [sp, #108]	; 0x6c
 800afc4:	f001 fe32 	bl	800cc2c <__match>
 800afc8:	b910      	cbnz	r0, 800afd0 <_strtod_l+0x370>
 800afca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afcc:	3301      	adds	r3, #1
 800afce:	931b      	str	r3, [sp, #108]	; 0x6c
 800afd0:	f04f 0800 	mov.w	r8, #0
 800afd4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800b1f8 <_strtod_l+0x598>
 800afd8:	e683      	b.n	800ace2 <_strtod_l+0x82>
 800afda:	4884      	ldr	r0, [pc, #528]	; (800b1ec <_strtod_l+0x58c>)
 800afdc:	f002 fdca 	bl	800db74 <nan>
 800afe0:	4680      	mov	r8, r0
 800afe2:	4689      	mov	r9, r1
 800afe4:	e67d      	b.n	800ace2 <_strtod_l+0x82>
 800afe6:	9b04      	ldr	r3, [sp, #16]
 800afe8:	f1bb 0f00 	cmp.w	fp, #0
 800afec:	bf08      	it	eq
 800afee:	46a3      	moveq	fp, r4
 800aff0:	1aeb      	subs	r3, r5, r3
 800aff2:	2c10      	cmp	r4, #16
 800aff4:	9806      	ldr	r0, [sp, #24]
 800aff6:	4626      	mov	r6, r4
 800aff8:	9307      	str	r3, [sp, #28]
 800affa:	bfa8      	it	ge
 800affc:	2610      	movge	r6, #16
 800affe:	f7f5 fa09 	bl	8000414 <__aeabi_ui2d>
 800b002:	2c09      	cmp	r4, #9
 800b004:	4680      	mov	r8, r0
 800b006:	4689      	mov	r9, r1
 800b008:	dd13      	ble.n	800b032 <_strtod_l+0x3d2>
 800b00a:	4b79      	ldr	r3, [pc, #484]	; (800b1f0 <_strtod_l+0x590>)
 800b00c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b010:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b014:	f7f5 fa78 	bl	8000508 <__aeabi_dmul>
 800b018:	4680      	mov	r8, r0
 800b01a:	9805      	ldr	r0, [sp, #20]
 800b01c:	4689      	mov	r9, r1
 800b01e:	f7f5 f9f9 	bl	8000414 <__aeabi_ui2d>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4640      	mov	r0, r8
 800b028:	4649      	mov	r1, r9
 800b02a:	f7f5 f8b7 	bl	800019c <__adddf3>
 800b02e:	4680      	mov	r8, r0
 800b030:	4689      	mov	r9, r1
 800b032:	2c0f      	cmp	r4, #15
 800b034:	dc36      	bgt.n	800b0a4 <_strtod_l+0x444>
 800b036:	9b07      	ldr	r3, [sp, #28]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f43f ae52 	beq.w	800ace2 <_strtod_l+0x82>
 800b03e:	dd22      	ble.n	800b086 <_strtod_l+0x426>
 800b040:	2b16      	cmp	r3, #22
 800b042:	dc09      	bgt.n	800b058 <_strtod_l+0x3f8>
 800b044:	4c6a      	ldr	r4, [pc, #424]	; (800b1f0 <_strtod_l+0x590>)
 800b046:	4642      	mov	r2, r8
 800b048:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800b04c:	464b      	mov	r3, r9
 800b04e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b052:	f7f5 fa59 	bl	8000508 <__aeabi_dmul>
 800b056:	e7c3      	b.n	800afe0 <_strtod_l+0x380>
 800b058:	9a07      	ldr	r2, [sp, #28]
 800b05a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b05e:	4293      	cmp	r3, r2
 800b060:	db20      	blt.n	800b0a4 <_strtod_l+0x444>
 800b062:	4d63      	ldr	r5, [pc, #396]	; (800b1f0 <_strtod_l+0x590>)
 800b064:	f1c4 040f 	rsb	r4, r4, #15
 800b068:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b06c:	4642      	mov	r2, r8
 800b06e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b072:	464b      	mov	r3, r9
 800b074:	f7f5 fa48 	bl	8000508 <__aeabi_dmul>
 800b078:	9b07      	ldr	r3, [sp, #28]
 800b07a:	1b1c      	subs	r4, r3, r4
 800b07c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b080:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b084:	e7e5      	b.n	800b052 <_strtod_l+0x3f2>
 800b086:	9b07      	ldr	r3, [sp, #28]
 800b088:	3316      	adds	r3, #22
 800b08a:	db0b      	blt.n	800b0a4 <_strtod_l+0x444>
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	4a58      	ldr	r2, [pc, #352]	; (800b1f0 <_strtod_l+0x590>)
 800b090:	1b5d      	subs	r5, r3, r5
 800b092:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b096:	4640      	mov	r0, r8
 800b098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b09c:	4649      	mov	r1, r9
 800b09e:	f7f5 fb5d 	bl	800075c <__aeabi_ddiv>
 800b0a2:	e79d      	b.n	800afe0 <_strtod_l+0x380>
 800b0a4:	9b07      	ldr	r3, [sp, #28]
 800b0a6:	1ba6      	subs	r6, r4, r6
 800b0a8:	441e      	add	r6, r3
 800b0aa:	2e00      	cmp	r6, #0
 800b0ac:	dd71      	ble.n	800b192 <_strtod_l+0x532>
 800b0ae:	f016 030f 	ands.w	r3, r6, #15
 800b0b2:	d00a      	beq.n	800b0ca <_strtod_l+0x46a>
 800b0b4:	494e      	ldr	r1, [pc, #312]	; (800b1f0 <_strtod_l+0x590>)
 800b0b6:	4642      	mov	r2, r8
 800b0b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c0:	464b      	mov	r3, r9
 800b0c2:	f7f5 fa21 	bl	8000508 <__aeabi_dmul>
 800b0c6:	4680      	mov	r8, r0
 800b0c8:	4689      	mov	r9, r1
 800b0ca:	f036 060f 	bics.w	r6, r6, #15
 800b0ce:	d050      	beq.n	800b172 <_strtod_l+0x512>
 800b0d0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800b0d4:	dd27      	ble.n	800b126 <_strtod_l+0x4c6>
 800b0d6:	f04f 0b00 	mov.w	fp, #0
 800b0da:	f8cd b010 	str.w	fp, [sp, #16]
 800b0de:	f8cd b020 	str.w	fp, [sp, #32]
 800b0e2:	f8cd b018 	str.w	fp, [sp, #24]
 800b0e6:	2322      	movs	r3, #34	; 0x22
 800b0e8:	f04f 0800 	mov.w	r8, #0
 800b0ec:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b1f8 <_strtod_l+0x598>
 800b0f0:	f8ca 3000 	str.w	r3, [sl]
 800b0f4:	9b08      	ldr	r3, [sp, #32]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f43f adf3 	beq.w	800ace2 <_strtod_l+0x82>
 800b0fc:	4650      	mov	r0, sl
 800b0fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b100:	f001 feb0 	bl	800ce64 <_Bfree>
 800b104:	4650      	mov	r0, sl
 800b106:	9906      	ldr	r1, [sp, #24]
 800b108:	f001 feac 	bl	800ce64 <_Bfree>
 800b10c:	4650      	mov	r0, sl
 800b10e:	9904      	ldr	r1, [sp, #16]
 800b110:	f001 fea8 	bl	800ce64 <_Bfree>
 800b114:	4650      	mov	r0, sl
 800b116:	9908      	ldr	r1, [sp, #32]
 800b118:	f001 fea4 	bl	800ce64 <_Bfree>
 800b11c:	4659      	mov	r1, fp
 800b11e:	4650      	mov	r0, sl
 800b120:	f001 fea0 	bl	800ce64 <_Bfree>
 800b124:	e5dd      	b.n	800ace2 <_strtod_l+0x82>
 800b126:	2300      	movs	r3, #0
 800b128:	4640      	mov	r0, r8
 800b12a:	4649      	mov	r1, r9
 800b12c:	461f      	mov	r7, r3
 800b12e:	1136      	asrs	r6, r6, #4
 800b130:	2e01      	cmp	r6, #1
 800b132:	dc21      	bgt.n	800b178 <_strtod_l+0x518>
 800b134:	b10b      	cbz	r3, 800b13a <_strtod_l+0x4da>
 800b136:	4680      	mov	r8, r0
 800b138:	4689      	mov	r9, r1
 800b13a:	4b2e      	ldr	r3, [pc, #184]	; (800b1f4 <_strtod_l+0x594>)
 800b13c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b140:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b144:	4642      	mov	r2, r8
 800b146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b14a:	464b      	mov	r3, r9
 800b14c:	f7f5 f9dc 	bl	8000508 <__aeabi_dmul>
 800b150:	4b29      	ldr	r3, [pc, #164]	; (800b1f8 <_strtod_l+0x598>)
 800b152:	460a      	mov	r2, r1
 800b154:	400b      	ands	r3, r1
 800b156:	4929      	ldr	r1, [pc, #164]	; (800b1fc <_strtod_l+0x59c>)
 800b158:	4680      	mov	r8, r0
 800b15a:	428b      	cmp	r3, r1
 800b15c:	d8bb      	bhi.n	800b0d6 <_strtod_l+0x476>
 800b15e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b162:	428b      	cmp	r3, r1
 800b164:	bf86      	itte	hi
 800b166:	f04f 38ff 	movhi.w	r8, #4294967295
 800b16a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b200 <_strtod_l+0x5a0>
 800b16e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b172:	2300      	movs	r3, #0
 800b174:	9305      	str	r3, [sp, #20]
 800b176:	e07e      	b.n	800b276 <_strtod_l+0x616>
 800b178:	07f2      	lsls	r2, r6, #31
 800b17a:	d507      	bpl.n	800b18c <_strtod_l+0x52c>
 800b17c:	4b1d      	ldr	r3, [pc, #116]	; (800b1f4 <_strtod_l+0x594>)
 800b17e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	f7f5 f9bf 	bl	8000508 <__aeabi_dmul>
 800b18a:	2301      	movs	r3, #1
 800b18c:	3701      	adds	r7, #1
 800b18e:	1076      	asrs	r6, r6, #1
 800b190:	e7ce      	b.n	800b130 <_strtod_l+0x4d0>
 800b192:	d0ee      	beq.n	800b172 <_strtod_l+0x512>
 800b194:	4276      	negs	r6, r6
 800b196:	f016 020f 	ands.w	r2, r6, #15
 800b19a:	d00a      	beq.n	800b1b2 <_strtod_l+0x552>
 800b19c:	4b14      	ldr	r3, [pc, #80]	; (800b1f0 <_strtod_l+0x590>)
 800b19e:	4640      	mov	r0, r8
 800b1a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	f7f5 fad7 	bl	800075c <__aeabi_ddiv>
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	4689      	mov	r9, r1
 800b1b2:	1136      	asrs	r6, r6, #4
 800b1b4:	d0dd      	beq.n	800b172 <_strtod_l+0x512>
 800b1b6:	2e1f      	cmp	r6, #31
 800b1b8:	dd24      	ble.n	800b204 <_strtod_l+0x5a4>
 800b1ba:	f04f 0b00 	mov.w	fp, #0
 800b1be:	f8cd b010 	str.w	fp, [sp, #16]
 800b1c2:	f8cd b020 	str.w	fp, [sp, #32]
 800b1c6:	f8cd b018 	str.w	fp, [sp, #24]
 800b1ca:	2322      	movs	r3, #34	; 0x22
 800b1cc:	f04f 0800 	mov.w	r8, #0
 800b1d0:	f04f 0900 	mov.w	r9, #0
 800b1d4:	f8ca 3000 	str.w	r3, [sl]
 800b1d8:	e78c      	b.n	800b0f4 <_strtod_l+0x494>
 800b1da:	bf00      	nop
 800b1dc:	0800ebe1 	.word	0x0800ebe1
 800b1e0:	0800ec24 	.word	0x0800ec24
 800b1e4:	0800ebd9 	.word	0x0800ebd9
 800b1e8:	0800ed64 	.word	0x0800ed64
 800b1ec:	0800f020 	.word	0x0800f020
 800b1f0:	0800ef00 	.word	0x0800ef00
 800b1f4:	0800eed8 	.word	0x0800eed8
 800b1f8:	7ff00000 	.word	0x7ff00000
 800b1fc:	7ca00000 	.word	0x7ca00000
 800b200:	7fefffff 	.word	0x7fefffff
 800b204:	f016 0310 	ands.w	r3, r6, #16
 800b208:	bf18      	it	ne
 800b20a:	236a      	movne	r3, #106	; 0x6a
 800b20c:	4640      	mov	r0, r8
 800b20e:	9305      	str	r3, [sp, #20]
 800b210:	4649      	mov	r1, r9
 800b212:	2300      	movs	r3, #0
 800b214:	4fb2      	ldr	r7, [pc, #712]	; (800b4e0 <_strtod_l+0x880>)
 800b216:	07f2      	lsls	r2, r6, #31
 800b218:	d504      	bpl.n	800b224 <_strtod_l+0x5c4>
 800b21a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b21e:	f7f5 f973 	bl	8000508 <__aeabi_dmul>
 800b222:	2301      	movs	r3, #1
 800b224:	1076      	asrs	r6, r6, #1
 800b226:	f107 0708 	add.w	r7, r7, #8
 800b22a:	d1f4      	bne.n	800b216 <_strtod_l+0x5b6>
 800b22c:	b10b      	cbz	r3, 800b232 <_strtod_l+0x5d2>
 800b22e:	4680      	mov	r8, r0
 800b230:	4689      	mov	r9, r1
 800b232:	9b05      	ldr	r3, [sp, #20]
 800b234:	b1bb      	cbz	r3, 800b266 <_strtod_l+0x606>
 800b236:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800b23a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b23e:	2b00      	cmp	r3, #0
 800b240:	4649      	mov	r1, r9
 800b242:	dd10      	ble.n	800b266 <_strtod_l+0x606>
 800b244:	2b1f      	cmp	r3, #31
 800b246:	f340 812b 	ble.w	800b4a0 <_strtod_l+0x840>
 800b24a:	2b34      	cmp	r3, #52	; 0x34
 800b24c:	bfd8      	it	le
 800b24e:	f04f 32ff 	movle.w	r2, #4294967295
 800b252:	f04f 0800 	mov.w	r8, #0
 800b256:	bfcf      	iteee	gt
 800b258:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b25c:	3b20      	suble	r3, #32
 800b25e:	fa02 f303 	lslle.w	r3, r2, r3
 800b262:	ea03 0901 	andle.w	r9, r3, r1
 800b266:	2200      	movs	r2, #0
 800b268:	2300      	movs	r3, #0
 800b26a:	4640      	mov	r0, r8
 800b26c:	4649      	mov	r1, r9
 800b26e:	f7f5 fbb3 	bl	80009d8 <__aeabi_dcmpeq>
 800b272:	2800      	cmp	r0, #0
 800b274:	d1a1      	bne.n	800b1ba <_strtod_l+0x55a>
 800b276:	9b06      	ldr	r3, [sp, #24]
 800b278:	465a      	mov	r2, fp
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	4650      	mov	r0, sl
 800b27e:	4623      	mov	r3, r4
 800b280:	9908      	ldr	r1, [sp, #32]
 800b282:	f001 fe5b 	bl	800cf3c <__s2b>
 800b286:	9008      	str	r0, [sp, #32]
 800b288:	2800      	cmp	r0, #0
 800b28a:	f43f af24 	beq.w	800b0d6 <_strtod_l+0x476>
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	f04f 0b00 	mov.w	fp, #0
 800b294:	1b5d      	subs	r5, r3, r5
 800b296:	9b07      	ldr	r3, [sp, #28]
 800b298:	f8cd b010 	str.w	fp, [sp, #16]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bfb4      	ite	lt
 800b2a0:	462b      	movlt	r3, r5
 800b2a2:	2300      	movge	r3, #0
 800b2a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b2a6:	9b07      	ldr	r3, [sp, #28]
 800b2a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b2ac:	9316      	str	r3, [sp, #88]	; 0x58
 800b2ae:	9b08      	ldr	r3, [sp, #32]
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	6859      	ldr	r1, [r3, #4]
 800b2b4:	f001 fd96 	bl	800cde4 <_Balloc>
 800b2b8:	9006      	str	r0, [sp, #24]
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	f43f af13 	beq.w	800b0e6 <_strtod_l+0x486>
 800b2c0:	9b08      	ldr	r3, [sp, #32]
 800b2c2:	300c      	adds	r0, #12
 800b2c4:	691a      	ldr	r2, [r3, #16]
 800b2c6:	f103 010c 	add.w	r1, r3, #12
 800b2ca:	3202      	adds	r2, #2
 800b2cc:	0092      	lsls	r2, r2, #2
 800b2ce:	f7fe fddd 	bl	8009e8c <memcpy>
 800b2d2:	ab1e      	add	r3, sp, #120	; 0x78
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	ab1d      	add	r3, sp, #116	; 0x74
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	4642      	mov	r2, r8
 800b2dc:	464b      	mov	r3, r9
 800b2de:	4650      	mov	r0, sl
 800b2e0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800b2e4:	f002 f968 	bl	800d5b8 <__d2b>
 800b2e8:	901c      	str	r0, [sp, #112]	; 0x70
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	f43f aefb 	beq.w	800b0e6 <_strtod_l+0x486>
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	f001 feba 	bl	800d06c <__i2b>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	9004      	str	r0, [sp, #16]
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f43f aef2 	beq.w	800b0e6 <_strtod_l+0x486>
 800b302:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b304:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b306:	2d00      	cmp	r5, #0
 800b308:	bfab      	itete	ge
 800b30a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b30c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b30e:	18ee      	addge	r6, r5, r3
 800b310:	1b5c      	sublt	r4, r3, r5
 800b312:	9b05      	ldr	r3, [sp, #20]
 800b314:	bfa8      	it	ge
 800b316:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800b318:	eba5 0503 	sub.w	r5, r5, r3
 800b31c:	4415      	add	r5, r2
 800b31e:	4b71      	ldr	r3, [pc, #452]	; (800b4e4 <_strtod_l+0x884>)
 800b320:	f105 35ff 	add.w	r5, r5, #4294967295
 800b324:	bfb8      	it	lt
 800b326:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b328:	429d      	cmp	r5, r3
 800b32a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b32e:	f280 80c9 	bge.w	800b4c4 <_strtod_l+0x864>
 800b332:	1b5b      	subs	r3, r3, r5
 800b334:	2b1f      	cmp	r3, #31
 800b336:	f04f 0701 	mov.w	r7, #1
 800b33a:	eba2 0203 	sub.w	r2, r2, r3
 800b33e:	f300 80b6 	bgt.w	800b4ae <_strtod_l+0x84e>
 800b342:	2500      	movs	r5, #0
 800b344:	fa07 f303 	lsl.w	r3, r7, r3
 800b348:	930f      	str	r3, [sp, #60]	; 0x3c
 800b34a:	18b7      	adds	r7, r6, r2
 800b34c:	9b05      	ldr	r3, [sp, #20]
 800b34e:	42be      	cmp	r6, r7
 800b350:	4414      	add	r4, r2
 800b352:	441c      	add	r4, r3
 800b354:	4633      	mov	r3, r6
 800b356:	bfa8      	it	ge
 800b358:	463b      	movge	r3, r7
 800b35a:	42a3      	cmp	r3, r4
 800b35c:	bfa8      	it	ge
 800b35e:	4623      	movge	r3, r4
 800b360:	2b00      	cmp	r3, #0
 800b362:	bfc2      	ittt	gt
 800b364:	1aff      	subgt	r7, r7, r3
 800b366:	1ae4      	subgt	r4, r4, r3
 800b368:	1af6      	subgt	r6, r6, r3
 800b36a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dd17      	ble.n	800b3a0 <_strtod_l+0x740>
 800b370:	461a      	mov	r2, r3
 800b372:	4650      	mov	r0, sl
 800b374:	9904      	ldr	r1, [sp, #16]
 800b376:	f001 ff33 	bl	800d1e0 <__pow5mult>
 800b37a:	9004      	str	r0, [sp, #16]
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f43f aeb2 	beq.w	800b0e6 <_strtod_l+0x486>
 800b382:	4601      	mov	r1, r0
 800b384:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b386:	4650      	mov	r0, sl
 800b388:	f001 fe86 	bl	800d098 <__multiply>
 800b38c:	9009      	str	r0, [sp, #36]	; 0x24
 800b38e:	2800      	cmp	r0, #0
 800b390:	f43f aea9 	beq.w	800b0e6 <_strtod_l+0x486>
 800b394:	4650      	mov	r0, sl
 800b396:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b398:	f001 fd64 	bl	800ce64 <_Bfree>
 800b39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b39e:	931c      	str	r3, [sp, #112]	; 0x70
 800b3a0:	2f00      	cmp	r7, #0
 800b3a2:	f300 8093 	bgt.w	800b4cc <_strtod_l+0x86c>
 800b3a6:	9b07      	ldr	r3, [sp, #28]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	dd08      	ble.n	800b3be <_strtod_l+0x75e>
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3b0:	9906      	ldr	r1, [sp, #24]
 800b3b2:	f001 ff15 	bl	800d1e0 <__pow5mult>
 800b3b6:	9006      	str	r0, [sp, #24]
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	f43f ae94 	beq.w	800b0e6 <_strtod_l+0x486>
 800b3be:	2c00      	cmp	r4, #0
 800b3c0:	dd08      	ble.n	800b3d4 <_strtod_l+0x774>
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	9906      	ldr	r1, [sp, #24]
 800b3c8:	f001 ff64 	bl	800d294 <__lshift>
 800b3cc:	9006      	str	r0, [sp, #24]
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	f43f ae89 	beq.w	800b0e6 <_strtod_l+0x486>
 800b3d4:	2e00      	cmp	r6, #0
 800b3d6:	dd08      	ble.n	800b3ea <_strtod_l+0x78a>
 800b3d8:	4632      	mov	r2, r6
 800b3da:	4650      	mov	r0, sl
 800b3dc:	9904      	ldr	r1, [sp, #16]
 800b3de:	f001 ff59 	bl	800d294 <__lshift>
 800b3e2:	9004      	str	r0, [sp, #16]
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	f43f ae7e 	beq.w	800b0e6 <_strtod_l+0x486>
 800b3ea:	4650      	mov	r0, sl
 800b3ec:	9a06      	ldr	r2, [sp, #24]
 800b3ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3f0:	f001 ffd8 	bl	800d3a4 <__mdiff>
 800b3f4:	4683      	mov	fp, r0
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	f43f ae75 	beq.w	800b0e6 <_strtod_l+0x486>
 800b3fc:	2400      	movs	r4, #0
 800b3fe:	68c3      	ldr	r3, [r0, #12]
 800b400:	9904      	ldr	r1, [sp, #16]
 800b402:	60c4      	str	r4, [r0, #12]
 800b404:	930d      	str	r3, [sp, #52]	; 0x34
 800b406:	f001 ffb1 	bl	800d36c <__mcmp>
 800b40a:	42a0      	cmp	r0, r4
 800b40c:	da70      	bge.n	800b4f0 <_strtod_l+0x890>
 800b40e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b410:	ea53 0308 	orrs.w	r3, r3, r8
 800b414:	f040 8096 	bne.w	800b544 <_strtod_l+0x8e4>
 800b418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f040 8091 	bne.w	800b544 <_strtod_l+0x8e4>
 800b422:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b426:	0d1b      	lsrs	r3, r3, #20
 800b428:	051b      	lsls	r3, r3, #20
 800b42a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b42e:	f240 8089 	bls.w	800b544 <_strtod_l+0x8e4>
 800b432:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b436:	b923      	cbnz	r3, 800b442 <_strtod_l+0x7e2>
 800b438:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	f340 8081 	ble.w	800b544 <_strtod_l+0x8e4>
 800b442:	4659      	mov	r1, fp
 800b444:	2201      	movs	r2, #1
 800b446:	4650      	mov	r0, sl
 800b448:	f001 ff24 	bl	800d294 <__lshift>
 800b44c:	9904      	ldr	r1, [sp, #16]
 800b44e:	4683      	mov	fp, r0
 800b450:	f001 ff8c 	bl	800d36c <__mcmp>
 800b454:	2800      	cmp	r0, #0
 800b456:	dd75      	ble.n	800b544 <_strtod_l+0x8e4>
 800b458:	9905      	ldr	r1, [sp, #20]
 800b45a:	464b      	mov	r3, r9
 800b45c:	4a22      	ldr	r2, [pc, #136]	; (800b4e8 <_strtod_l+0x888>)
 800b45e:	2900      	cmp	r1, #0
 800b460:	f000 8091 	beq.w	800b586 <_strtod_l+0x926>
 800b464:	ea02 0109 	and.w	r1, r2, r9
 800b468:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b46c:	f300 808b 	bgt.w	800b586 <_strtod_l+0x926>
 800b470:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b474:	f77f aea9 	ble.w	800b1ca <_strtod_l+0x56a>
 800b478:	2300      	movs	r3, #0
 800b47a:	4a1c      	ldr	r2, [pc, #112]	; (800b4ec <_strtod_l+0x88c>)
 800b47c:	4640      	mov	r0, r8
 800b47e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b482:	4649      	mov	r1, r9
 800b484:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b488:	f7f5 f83e 	bl	8000508 <__aeabi_dmul>
 800b48c:	460b      	mov	r3, r1
 800b48e:	4303      	orrs	r3, r0
 800b490:	bf08      	it	eq
 800b492:	2322      	moveq	r3, #34	; 0x22
 800b494:	4680      	mov	r8, r0
 800b496:	4689      	mov	r9, r1
 800b498:	bf08      	it	eq
 800b49a:	f8ca 3000 	streq.w	r3, [sl]
 800b49e:	e62d      	b.n	800b0fc <_strtod_l+0x49c>
 800b4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a8:	ea03 0808 	and.w	r8, r3, r8
 800b4ac:	e6db      	b.n	800b266 <_strtod_l+0x606>
 800b4ae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b4b2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b4b6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b4ba:	35e2      	adds	r5, #226	; 0xe2
 800b4bc:	fa07 f505 	lsl.w	r5, r7, r5
 800b4c0:	970f      	str	r7, [sp, #60]	; 0x3c
 800b4c2:	e742      	b.n	800b34a <_strtod_l+0x6ea>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	2500      	movs	r5, #0
 800b4c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4ca:	e73e      	b.n	800b34a <_strtod_l+0x6ea>
 800b4cc:	463a      	mov	r2, r7
 800b4ce:	4650      	mov	r0, sl
 800b4d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b4d2:	f001 fedf 	bl	800d294 <__lshift>
 800b4d6:	901c      	str	r0, [sp, #112]	; 0x70
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	f47f af64 	bne.w	800b3a6 <_strtod_l+0x746>
 800b4de:	e602      	b.n	800b0e6 <_strtod_l+0x486>
 800b4e0:	0800ec38 	.word	0x0800ec38
 800b4e4:	fffffc02 	.word	0xfffffc02
 800b4e8:	7ff00000 	.word	0x7ff00000
 800b4ec:	39500000 	.word	0x39500000
 800b4f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b4f4:	d166      	bne.n	800b5c4 <_strtod_l+0x964>
 800b4f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4fc:	b35a      	cbz	r2, 800b556 <_strtod_l+0x8f6>
 800b4fe:	4a9c      	ldr	r2, [pc, #624]	; (800b770 <_strtod_l+0xb10>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d12c      	bne.n	800b55e <_strtod_l+0x8fe>
 800b504:	9b05      	ldr	r3, [sp, #20]
 800b506:	4640      	mov	r0, r8
 800b508:	b303      	cbz	r3, 800b54c <_strtod_l+0x8ec>
 800b50a:	464b      	mov	r3, r9
 800b50c:	4a99      	ldr	r2, [pc, #612]	; (800b774 <_strtod_l+0xb14>)
 800b50e:	f04f 31ff 	mov.w	r1, #4294967295
 800b512:	401a      	ands	r2, r3
 800b514:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b518:	d81b      	bhi.n	800b552 <_strtod_l+0x8f2>
 800b51a:	0d12      	lsrs	r2, r2, #20
 800b51c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b520:	fa01 f303 	lsl.w	r3, r1, r3
 800b524:	4298      	cmp	r0, r3
 800b526:	d11a      	bne.n	800b55e <_strtod_l+0x8fe>
 800b528:	4b93      	ldr	r3, [pc, #588]	; (800b778 <_strtod_l+0xb18>)
 800b52a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d102      	bne.n	800b536 <_strtod_l+0x8d6>
 800b530:	3001      	adds	r0, #1
 800b532:	f43f add8 	beq.w	800b0e6 <_strtod_l+0x486>
 800b536:	f04f 0800 	mov.w	r8, #0
 800b53a:	4b8e      	ldr	r3, [pc, #568]	; (800b774 <_strtod_l+0xb14>)
 800b53c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b53e:	401a      	ands	r2, r3
 800b540:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b544:	9b05      	ldr	r3, [sp, #20]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d196      	bne.n	800b478 <_strtod_l+0x818>
 800b54a:	e5d7      	b.n	800b0fc <_strtod_l+0x49c>
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295
 800b550:	e7e8      	b.n	800b524 <_strtod_l+0x8c4>
 800b552:	460b      	mov	r3, r1
 800b554:	e7e6      	b.n	800b524 <_strtod_l+0x8c4>
 800b556:	ea53 0308 	orrs.w	r3, r3, r8
 800b55a:	f43f af7d 	beq.w	800b458 <_strtod_l+0x7f8>
 800b55e:	b1e5      	cbz	r5, 800b59a <_strtod_l+0x93a>
 800b560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b562:	421d      	tst	r5, r3
 800b564:	d0ee      	beq.n	800b544 <_strtod_l+0x8e4>
 800b566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b568:	4640      	mov	r0, r8
 800b56a:	4649      	mov	r1, r9
 800b56c:	9a05      	ldr	r2, [sp, #20]
 800b56e:	b1c3      	cbz	r3, 800b5a2 <_strtod_l+0x942>
 800b570:	f7ff fb52 	bl	800ac18 <sulp>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b57c:	f7f4 fe0e 	bl	800019c <__adddf3>
 800b580:	4680      	mov	r8, r0
 800b582:	4689      	mov	r9, r1
 800b584:	e7de      	b.n	800b544 <_strtod_l+0x8e4>
 800b586:	4013      	ands	r3, r2
 800b588:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b58c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b590:	f04f 38ff 	mov.w	r8, #4294967295
 800b594:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b598:	e7d4      	b.n	800b544 <_strtod_l+0x8e4>
 800b59a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b59c:	ea13 0f08 	tst.w	r3, r8
 800b5a0:	e7e0      	b.n	800b564 <_strtod_l+0x904>
 800b5a2:	f7ff fb39 	bl	800ac18 <sulp>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b5ae:	f7f4 fdf3 	bl	8000198 <__aeabi_dsub>
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4689      	mov	r9, r1
 800b5ba:	f7f5 fa0d 	bl	80009d8 <__aeabi_dcmpeq>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d0c0      	beq.n	800b544 <_strtod_l+0x8e4>
 800b5c2:	e602      	b.n	800b1ca <_strtod_l+0x56a>
 800b5c4:	4658      	mov	r0, fp
 800b5c6:	9904      	ldr	r1, [sp, #16]
 800b5c8:	f002 f852 	bl	800d670 <__ratio>
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	460f      	mov	r7, r1
 800b5d6:	f7f5 fa13 	bl	8000a00 <__aeabi_dcmple>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d075      	beq.n	800b6ca <_strtod_l+0xa6a>
 800b5de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d047      	beq.n	800b674 <_strtod_l+0xa14>
 800b5e4:	2600      	movs	r6, #0
 800b5e6:	4f65      	ldr	r7, [pc, #404]	; (800b77c <_strtod_l+0xb1c>)
 800b5e8:	4d64      	ldr	r5, [pc, #400]	; (800b77c <_strtod_l+0xb1c>)
 800b5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5f0:	0d1b      	lsrs	r3, r3, #20
 800b5f2:	051b      	lsls	r3, r3, #20
 800b5f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5f8:	4b61      	ldr	r3, [pc, #388]	; (800b780 <_strtod_l+0xb20>)
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	f040 80c8 	bne.w	800b790 <_strtod_l+0xb30>
 800b600:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b604:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b60a:	4640      	mov	r0, r8
 800b60c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b610:	4649      	mov	r1, r9
 800b612:	f001 ff57 	bl	800d4c4 <__ulp>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	4630      	mov	r0, r6
 800b61c:	4639      	mov	r1, r7
 800b61e:	f7f4 ff73 	bl	8000508 <__aeabi_dmul>
 800b622:	4642      	mov	r2, r8
 800b624:	464b      	mov	r3, r9
 800b626:	f7f4 fdb9 	bl	800019c <__adddf3>
 800b62a:	460b      	mov	r3, r1
 800b62c:	4951      	ldr	r1, [pc, #324]	; (800b774 <_strtod_l+0xb14>)
 800b62e:	4a55      	ldr	r2, [pc, #340]	; (800b784 <_strtod_l+0xb24>)
 800b630:	4019      	ands	r1, r3
 800b632:	4291      	cmp	r1, r2
 800b634:	4680      	mov	r8, r0
 800b636:	d95e      	bls.n	800b6f6 <_strtod_l+0xa96>
 800b638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b63a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b63e:	4293      	cmp	r3, r2
 800b640:	d103      	bne.n	800b64a <_strtod_l+0x9ea>
 800b642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b644:	3301      	adds	r3, #1
 800b646:	f43f ad4e 	beq.w	800b0e6 <_strtod_l+0x486>
 800b64a:	f04f 38ff 	mov.w	r8, #4294967295
 800b64e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b778 <_strtod_l+0xb18>
 800b652:	4650      	mov	r0, sl
 800b654:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b656:	f001 fc05 	bl	800ce64 <_Bfree>
 800b65a:	4650      	mov	r0, sl
 800b65c:	9906      	ldr	r1, [sp, #24]
 800b65e:	f001 fc01 	bl	800ce64 <_Bfree>
 800b662:	4650      	mov	r0, sl
 800b664:	9904      	ldr	r1, [sp, #16]
 800b666:	f001 fbfd 	bl	800ce64 <_Bfree>
 800b66a:	4659      	mov	r1, fp
 800b66c:	4650      	mov	r0, sl
 800b66e:	f001 fbf9 	bl	800ce64 <_Bfree>
 800b672:	e61c      	b.n	800b2ae <_strtod_l+0x64e>
 800b674:	f1b8 0f00 	cmp.w	r8, #0
 800b678:	d119      	bne.n	800b6ae <_strtod_l+0xa4e>
 800b67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b680:	b9e3      	cbnz	r3, 800b6bc <_strtod_l+0xa5c>
 800b682:	2200      	movs	r2, #0
 800b684:	4630      	mov	r0, r6
 800b686:	4639      	mov	r1, r7
 800b688:	4b3c      	ldr	r3, [pc, #240]	; (800b77c <_strtod_l+0xb1c>)
 800b68a:	f7f5 f9af 	bl	80009ec <__aeabi_dcmplt>
 800b68e:	b9c8      	cbnz	r0, 800b6c4 <_strtod_l+0xa64>
 800b690:	2200      	movs	r2, #0
 800b692:	4630      	mov	r0, r6
 800b694:	4639      	mov	r1, r7
 800b696:	4b3c      	ldr	r3, [pc, #240]	; (800b788 <_strtod_l+0xb28>)
 800b698:	f7f4 ff36 	bl	8000508 <__aeabi_dmul>
 800b69c:	4604      	mov	r4, r0
 800b69e:	460d      	mov	r5, r1
 800b6a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b6a4:	9418      	str	r4, [sp, #96]	; 0x60
 800b6a6:	9319      	str	r3, [sp, #100]	; 0x64
 800b6a8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800b6ac:	e79d      	b.n	800b5ea <_strtod_l+0x98a>
 800b6ae:	f1b8 0f01 	cmp.w	r8, #1
 800b6b2:	d103      	bne.n	800b6bc <_strtod_l+0xa5c>
 800b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f43f ad87 	beq.w	800b1ca <_strtod_l+0x56a>
 800b6bc:	2600      	movs	r6, #0
 800b6be:	2400      	movs	r4, #0
 800b6c0:	4f32      	ldr	r7, [pc, #200]	; (800b78c <_strtod_l+0xb2c>)
 800b6c2:	e791      	b.n	800b5e8 <_strtod_l+0x988>
 800b6c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b6c6:	4d30      	ldr	r5, [pc, #192]	; (800b788 <_strtod_l+0xb28>)
 800b6c8:	e7ea      	b.n	800b6a0 <_strtod_l+0xa40>
 800b6ca:	4b2f      	ldr	r3, [pc, #188]	; (800b788 <_strtod_l+0xb28>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	f7f4 ff19 	bl	8000508 <__aeabi_dmul>
 800b6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6d8:	4604      	mov	r4, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	b933      	cbnz	r3, 800b6ec <_strtod_l+0xa8c>
 800b6de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6e2:	9010      	str	r0, [sp, #64]	; 0x40
 800b6e4:	9311      	str	r3, [sp, #68]	; 0x44
 800b6e6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b6ea:	e77e      	b.n	800b5ea <_strtod_l+0x98a>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b6f4:	e7f7      	b.n	800b6e6 <_strtod_l+0xa86>
 800b6f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b6fa:	9b05      	ldr	r3, [sp, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1a8      	bne.n	800b652 <_strtod_l+0x9f2>
 800b700:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b704:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b706:	0d1b      	lsrs	r3, r3, #20
 800b708:	051b      	lsls	r3, r3, #20
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d1a1      	bne.n	800b652 <_strtod_l+0x9f2>
 800b70e:	4620      	mov	r0, r4
 800b710:	4629      	mov	r1, r5
 800b712:	f7f5 fd73 	bl	80011fc <__aeabi_d2lz>
 800b716:	f7f4 fec9 	bl	80004ac <__aeabi_l2d>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4620      	mov	r0, r4
 800b720:	4629      	mov	r1, r5
 800b722:	f7f4 fd39 	bl	8000198 <__aeabi_dsub>
 800b726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b72c:	ea43 0308 	orr.w	r3, r3, r8
 800b730:	4313      	orrs	r3, r2
 800b732:	4604      	mov	r4, r0
 800b734:	460d      	mov	r5, r1
 800b736:	d066      	beq.n	800b806 <_strtod_l+0xba6>
 800b738:	a309      	add	r3, pc, #36	; (adr r3, 800b760 <_strtod_l+0xb00>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	f7f5 f955 	bl	80009ec <__aeabi_dcmplt>
 800b742:	2800      	cmp	r0, #0
 800b744:	f47f acda 	bne.w	800b0fc <_strtod_l+0x49c>
 800b748:	a307      	add	r3, pc, #28	; (adr r3, 800b768 <_strtod_l+0xb08>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	4620      	mov	r0, r4
 800b750:	4629      	mov	r1, r5
 800b752:	f7f5 f969 	bl	8000a28 <__aeabi_dcmpgt>
 800b756:	2800      	cmp	r0, #0
 800b758:	f43f af7b 	beq.w	800b652 <_strtod_l+0x9f2>
 800b75c:	e4ce      	b.n	800b0fc <_strtod_l+0x49c>
 800b75e:	bf00      	nop
 800b760:	94a03595 	.word	0x94a03595
 800b764:	3fdfffff 	.word	0x3fdfffff
 800b768:	35afe535 	.word	0x35afe535
 800b76c:	3fe00000 	.word	0x3fe00000
 800b770:	000fffff 	.word	0x000fffff
 800b774:	7ff00000 	.word	0x7ff00000
 800b778:	7fefffff 	.word	0x7fefffff
 800b77c:	3ff00000 	.word	0x3ff00000
 800b780:	7fe00000 	.word	0x7fe00000
 800b784:	7c9fffff 	.word	0x7c9fffff
 800b788:	3fe00000 	.word	0x3fe00000
 800b78c:	bff00000 	.word	0xbff00000
 800b790:	9b05      	ldr	r3, [sp, #20]
 800b792:	b313      	cbz	r3, 800b7da <_strtod_l+0xb7a>
 800b794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b796:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b79a:	d81e      	bhi.n	800b7da <_strtod_l+0xb7a>
 800b79c:	a326      	add	r3, pc, #152	; (adr r3, 800b838 <_strtod_l+0xbd8>)
 800b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	f7f5 f92b 	bl	8000a00 <__aeabi_dcmple>
 800b7aa:	b190      	cbz	r0, 800b7d2 <_strtod_l+0xb72>
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f7f5 f982 	bl	8000ab8 <__aeabi_d2uiz>
 800b7b4:	2801      	cmp	r0, #1
 800b7b6:	bf38      	it	cc
 800b7b8:	2001      	movcc	r0, #1
 800b7ba:	f7f4 fe2b 	bl	8000414 <__aeabi_ui2d>
 800b7be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	460d      	mov	r5, r1
 800b7c4:	b9d3      	cbnz	r3, 800b7fc <_strtod_l+0xb9c>
 800b7c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7ca:	9012      	str	r0, [sp, #72]	; 0x48
 800b7cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800b7ce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b7d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b7d4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b7d8:	1a9f      	subs	r7, r3, r2
 800b7da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7de:	f001 fe71 	bl	800d4c4 <__ulp>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	f7f4 fe8d 	bl	8000508 <__aeabi_dmul>
 800b7ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b7f2:	f7f4 fcd3 	bl	800019c <__adddf3>
 800b7f6:	4680      	mov	r8, r0
 800b7f8:	4689      	mov	r9, r1
 800b7fa:	e77e      	b.n	800b6fa <_strtod_l+0xa9a>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b804:	e7e3      	b.n	800b7ce <_strtod_l+0xb6e>
 800b806:	a30e      	add	r3, pc, #56	; (adr r3, 800b840 <_strtod_l+0xbe0>)
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f7f5 f8ee 	bl	80009ec <__aeabi_dcmplt>
 800b810:	e7a1      	b.n	800b756 <_strtod_l+0xaf6>
 800b812:	2300      	movs	r3, #0
 800b814:	930c      	str	r3, [sp, #48]	; 0x30
 800b816:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b818:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b81a:	6013      	str	r3, [r2, #0]
 800b81c:	f7ff ba65 	b.w	800acea <_strtod_l+0x8a>
 800b820:	2b65      	cmp	r3, #101	; 0x65
 800b822:	f43f ab5c 	beq.w	800aede <_strtod_l+0x27e>
 800b826:	2b45      	cmp	r3, #69	; 0x45
 800b828:	f43f ab59 	beq.w	800aede <_strtod_l+0x27e>
 800b82c:	2201      	movs	r2, #1
 800b82e:	f7ff bb8d 	b.w	800af4c <_strtod_l+0x2ec>
 800b832:	bf00      	nop
 800b834:	f3af 8000 	nop.w
 800b838:	ffc00000 	.word	0xffc00000
 800b83c:	41dfffff 	.word	0x41dfffff
 800b840:	94a03595 	.word	0x94a03595
 800b844:	3fcfffff 	.word	0x3fcfffff

0800b848 <_strtod_r>:
 800b848:	4b01      	ldr	r3, [pc, #4]	; (800b850 <_strtod_r+0x8>)
 800b84a:	f7ff ba09 	b.w	800ac60 <_strtod_l>
 800b84e:	bf00      	nop
 800b850:	2000007c 	.word	0x2000007c

0800b854 <_strtol_l.isra.0>:
 800b854:	2b01      	cmp	r3, #1
 800b856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b85a:	4686      	mov	lr, r0
 800b85c:	d001      	beq.n	800b862 <_strtol_l.isra.0+0xe>
 800b85e:	2b24      	cmp	r3, #36	; 0x24
 800b860:	d906      	bls.n	800b870 <_strtol_l.isra.0+0x1c>
 800b862:	f000 ff27 	bl	800c6b4 <__errno>
 800b866:	2316      	movs	r3, #22
 800b868:	6003      	str	r3, [r0, #0]
 800b86a:	2000      	movs	r0, #0
 800b86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b870:	468c      	mov	ip, r1
 800b872:	4e3a      	ldr	r6, [pc, #232]	; (800b95c <_strtol_l.isra.0+0x108>)
 800b874:	4660      	mov	r0, ip
 800b876:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b87a:	5da5      	ldrb	r5, [r4, r6]
 800b87c:	f015 0508 	ands.w	r5, r5, #8
 800b880:	d1f8      	bne.n	800b874 <_strtol_l.isra.0+0x20>
 800b882:	2c2d      	cmp	r4, #45	; 0x2d
 800b884:	d133      	bne.n	800b8ee <_strtol_l.isra.0+0x9a>
 800b886:	f04f 0801 	mov.w	r8, #1
 800b88a:	f89c 4000 	ldrb.w	r4, [ip]
 800b88e:	f100 0c02 	add.w	ip, r0, #2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d05d      	beq.n	800b952 <_strtol_l.isra.0+0xfe>
 800b896:	2b10      	cmp	r3, #16
 800b898:	d10c      	bne.n	800b8b4 <_strtol_l.isra.0+0x60>
 800b89a:	2c30      	cmp	r4, #48	; 0x30
 800b89c:	d10a      	bne.n	800b8b4 <_strtol_l.isra.0+0x60>
 800b89e:	f89c 0000 	ldrb.w	r0, [ip]
 800b8a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b8a6:	2858      	cmp	r0, #88	; 0x58
 800b8a8:	d14e      	bne.n	800b948 <_strtol_l.isra.0+0xf4>
 800b8aa:	2310      	movs	r3, #16
 800b8ac:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b8b0:	f10c 0c02 	add.w	ip, ip, #2
 800b8b4:	2500      	movs	r5, #0
 800b8b6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800b8ba:	3f01      	subs	r7, #1
 800b8bc:	fbb7 f9f3 	udiv	r9, r7, r3
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	fb03 7a19 	mls	sl, r3, r9, r7
 800b8c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b8ca:	2e09      	cmp	r6, #9
 800b8cc:	d818      	bhi.n	800b900 <_strtol_l.isra.0+0xac>
 800b8ce:	4634      	mov	r4, r6
 800b8d0:	42a3      	cmp	r3, r4
 800b8d2:	dd24      	ble.n	800b91e <_strtol_l.isra.0+0xca>
 800b8d4:	2d00      	cmp	r5, #0
 800b8d6:	db1f      	blt.n	800b918 <_strtol_l.isra.0+0xc4>
 800b8d8:	4581      	cmp	r9, r0
 800b8da:	d31d      	bcc.n	800b918 <_strtol_l.isra.0+0xc4>
 800b8dc:	d101      	bne.n	800b8e2 <_strtol_l.isra.0+0x8e>
 800b8de:	45a2      	cmp	sl, r4
 800b8e0:	db1a      	blt.n	800b918 <_strtol_l.isra.0+0xc4>
 800b8e2:	2501      	movs	r5, #1
 800b8e4:	fb00 4003 	mla	r0, r0, r3, r4
 800b8e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b8ec:	e7eb      	b.n	800b8c6 <_strtol_l.isra.0+0x72>
 800b8ee:	2c2b      	cmp	r4, #43	; 0x2b
 800b8f0:	bf08      	it	eq
 800b8f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b8f6:	46a8      	mov	r8, r5
 800b8f8:	bf08      	it	eq
 800b8fa:	f100 0c02 	addeq.w	ip, r0, #2
 800b8fe:	e7c8      	b.n	800b892 <_strtol_l.isra.0+0x3e>
 800b900:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b904:	2e19      	cmp	r6, #25
 800b906:	d801      	bhi.n	800b90c <_strtol_l.isra.0+0xb8>
 800b908:	3c37      	subs	r4, #55	; 0x37
 800b90a:	e7e1      	b.n	800b8d0 <_strtol_l.isra.0+0x7c>
 800b90c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b910:	2e19      	cmp	r6, #25
 800b912:	d804      	bhi.n	800b91e <_strtol_l.isra.0+0xca>
 800b914:	3c57      	subs	r4, #87	; 0x57
 800b916:	e7db      	b.n	800b8d0 <_strtol_l.isra.0+0x7c>
 800b918:	f04f 35ff 	mov.w	r5, #4294967295
 800b91c:	e7e4      	b.n	800b8e8 <_strtol_l.isra.0+0x94>
 800b91e:	2d00      	cmp	r5, #0
 800b920:	da08      	bge.n	800b934 <_strtol_l.isra.0+0xe0>
 800b922:	2322      	movs	r3, #34	; 0x22
 800b924:	4638      	mov	r0, r7
 800b926:	f8ce 3000 	str.w	r3, [lr]
 800b92a:	2a00      	cmp	r2, #0
 800b92c:	d09e      	beq.n	800b86c <_strtol_l.isra.0+0x18>
 800b92e:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b932:	e007      	b.n	800b944 <_strtol_l.isra.0+0xf0>
 800b934:	f1b8 0f00 	cmp.w	r8, #0
 800b938:	d000      	beq.n	800b93c <_strtol_l.isra.0+0xe8>
 800b93a:	4240      	negs	r0, r0
 800b93c:	2a00      	cmp	r2, #0
 800b93e:	d095      	beq.n	800b86c <_strtol_l.isra.0+0x18>
 800b940:	2d00      	cmp	r5, #0
 800b942:	d1f4      	bne.n	800b92e <_strtol_l.isra.0+0xda>
 800b944:	6011      	str	r1, [r2, #0]
 800b946:	e791      	b.n	800b86c <_strtol_l.isra.0+0x18>
 800b948:	2430      	movs	r4, #48	; 0x30
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1b2      	bne.n	800b8b4 <_strtol_l.isra.0+0x60>
 800b94e:	2308      	movs	r3, #8
 800b950:	e7b0      	b.n	800b8b4 <_strtol_l.isra.0+0x60>
 800b952:	2c30      	cmp	r4, #48	; 0x30
 800b954:	d0a3      	beq.n	800b89e <_strtol_l.isra.0+0x4a>
 800b956:	230a      	movs	r3, #10
 800b958:	e7ac      	b.n	800b8b4 <_strtol_l.isra.0+0x60>
 800b95a:	bf00      	nop
 800b95c:	0800ec61 	.word	0x0800ec61

0800b960 <_strtol_r>:
 800b960:	f7ff bf78 	b.w	800b854 <_strtol_l.isra.0>

0800b964 <strtol>:
 800b964:	4613      	mov	r3, r2
 800b966:	460a      	mov	r2, r1
 800b968:	4601      	mov	r1, r0
 800b96a:	4802      	ldr	r0, [pc, #8]	; (800b974 <strtol+0x10>)
 800b96c:	6800      	ldr	r0, [r0, #0]
 800b96e:	f7ff bf71 	b.w	800b854 <_strtol_l.isra.0>
 800b972:	bf00      	nop
 800b974:	20000014 	.word	0x20000014

0800b978 <_vsiprintf_r>:
 800b978:	b500      	push	{lr}
 800b97a:	b09b      	sub	sp, #108	; 0x6c
 800b97c:	9100      	str	r1, [sp, #0]
 800b97e:	9104      	str	r1, [sp, #16]
 800b980:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b984:	9105      	str	r1, [sp, #20]
 800b986:	9102      	str	r1, [sp, #8]
 800b988:	4905      	ldr	r1, [pc, #20]	; (800b9a0 <_vsiprintf_r+0x28>)
 800b98a:	9103      	str	r1, [sp, #12]
 800b98c:	4669      	mov	r1, sp
 800b98e:	f001 fff1 	bl	800d974 <_svfiprintf_r>
 800b992:	2200      	movs	r2, #0
 800b994:	9b00      	ldr	r3, [sp, #0]
 800b996:	701a      	strb	r2, [r3, #0]
 800b998:	b01b      	add	sp, #108	; 0x6c
 800b99a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b99e:	bf00      	nop
 800b9a0:	ffff0208 	.word	0xffff0208

0800b9a4 <vsiprintf>:
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	460a      	mov	r2, r1
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	4802      	ldr	r0, [pc, #8]	; (800b9b4 <vsiprintf+0x10>)
 800b9ac:	6800      	ldr	r0, [r0, #0]
 800b9ae:	f7ff bfe3 	b.w	800b978 <_vsiprintf_r>
 800b9b2:	bf00      	nop
 800b9b4:	20000014 	.word	0x20000014

0800b9b8 <quorem>:
 800b9b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	6903      	ldr	r3, [r0, #16]
 800b9be:	690c      	ldr	r4, [r1, #16]
 800b9c0:	4607      	mov	r7, r0
 800b9c2:	42a3      	cmp	r3, r4
 800b9c4:	f2c0 8083 	blt.w	800bace <quorem+0x116>
 800b9c8:	3c01      	subs	r4, #1
 800b9ca:	f100 0514 	add.w	r5, r0, #20
 800b9ce:	f101 0814 	add.w	r8, r1, #20
 800b9d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b9ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9f0:	d332      	bcc.n	800ba58 <quorem+0xa0>
 800b9f2:	f04f 0e00 	mov.w	lr, #0
 800b9f6:	4640      	mov	r0, r8
 800b9f8:	46ac      	mov	ip, r5
 800b9fa:	46f2      	mov	sl, lr
 800b9fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba00:	b293      	uxth	r3, r2
 800ba02:	fb06 e303 	mla	r3, r6, r3, lr
 800ba06:	0c12      	lsrs	r2, r2, #16
 800ba08:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ba0c:	fb06 e202 	mla	r2, r6, r2, lr
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	ebaa 0303 	sub.w	r3, sl, r3
 800ba16:	f8dc a000 	ldr.w	sl, [ip]
 800ba1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba1e:	fa1f fa8a 	uxth.w	sl, sl
 800ba22:	4453      	add	r3, sl
 800ba24:	fa1f fa82 	uxth.w	sl, r2
 800ba28:	f8dc 2000 	ldr.w	r2, [ip]
 800ba2c:	4581      	cmp	r9, r0
 800ba2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ba32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba40:	f84c 3b04 	str.w	r3, [ip], #4
 800ba44:	d2da      	bcs.n	800b9fc <quorem+0x44>
 800ba46:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba4a:	b92b      	cbnz	r3, 800ba58 <quorem+0xa0>
 800ba4c:	9b01      	ldr	r3, [sp, #4]
 800ba4e:	3b04      	subs	r3, #4
 800ba50:	429d      	cmp	r5, r3
 800ba52:	461a      	mov	r2, r3
 800ba54:	d32f      	bcc.n	800bab6 <quorem+0xfe>
 800ba56:	613c      	str	r4, [r7, #16]
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f001 fc87 	bl	800d36c <__mcmp>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	db25      	blt.n	800baae <quorem+0xf6>
 800ba62:	4628      	mov	r0, r5
 800ba64:	f04f 0c00 	mov.w	ip, #0
 800ba68:	3601      	adds	r6, #1
 800ba6a:	f858 1b04 	ldr.w	r1, [r8], #4
 800ba6e:	f8d0 e000 	ldr.w	lr, [r0]
 800ba72:	b28b      	uxth	r3, r1
 800ba74:	ebac 0303 	sub.w	r3, ip, r3
 800ba78:	fa1f f28e 	uxth.w	r2, lr
 800ba7c:	4413      	add	r3, r2
 800ba7e:	0c0a      	lsrs	r2, r1, #16
 800ba80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba8e:	45c1      	cmp	r9, r8
 800ba90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba94:	f840 3b04 	str.w	r3, [r0], #4
 800ba98:	d2e7      	bcs.n	800ba6a <quorem+0xb2>
 800ba9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baa2:	b922      	cbnz	r2, 800baae <quorem+0xf6>
 800baa4:	3b04      	subs	r3, #4
 800baa6:	429d      	cmp	r5, r3
 800baa8:	461a      	mov	r2, r3
 800baaa:	d30a      	bcc.n	800bac2 <quorem+0x10a>
 800baac:	613c      	str	r4, [r7, #16]
 800baae:	4630      	mov	r0, r6
 800bab0:	b003      	add	sp, #12
 800bab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab6:	6812      	ldr	r2, [r2, #0]
 800bab8:	3b04      	subs	r3, #4
 800baba:	2a00      	cmp	r2, #0
 800babc:	d1cb      	bne.n	800ba56 <quorem+0x9e>
 800babe:	3c01      	subs	r4, #1
 800bac0:	e7c6      	b.n	800ba50 <quorem+0x98>
 800bac2:	6812      	ldr	r2, [r2, #0]
 800bac4:	3b04      	subs	r3, #4
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	d1f0      	bne.n	800baac <quorem+0xf4>
 800baca:	3c01      	subs	r4, #1
 800bacc:	e7eb      	b.n	800baa6 <quorem+0xee>
 800bace:	2000      	movs	r0, #0
 800bad0:	e7ee      	b.n	800bab0 <quorem+0xf8>
 800bad2:	0000      	movs	r0, r0
 800bad4:	0000      	movs	r0, r0
	...

0800bad8 <_dtoa_r>:
 800bad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	4616      	mov	r6, r2
 800bade:	461f      	mov	r7, r3
 800bae0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bae2:	b099      	sub	sp, #100	; 0x64
 800bae4:	4605      	mov	r5, r0
 800bae6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800baea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800baee:	b974      	cbnz	r4, 800bb0e <_dtoa_r+0x36>
 800baf0:	2010      	movs	r0, #16
 800baf2:	f001 f94f 	bl	800cd94 <malloc>
 800baf6:	4602      	mov	r2, r0
 800baf8:	6268      	str	r0, [r5, #36]	; 0x24
 800bafa:	b920      	cbnz	r0, 800bb06 <_dtoa_r+0x2e>
 800bafc:	21ea      	movs	r1, #234	; 0xea
 800bafe:	4bae      	ldr	r3, [pc, #696]	; (800bdb8 <_dtoa_r+0x2e0>)
 800bb00:	48ae      	ldr	r0, [pc, #696]	; (800bdbc <_dtoa_r+0x2e4>)
 800bb02:	f002 f86d 	bl	800dbe0 <__assert_func>
 800bb06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb0a:	6004      	str	r4, [r0, #0]
 800bb0c:	60c4      	str	r4, [r0, #12]
 800bb0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb10:	6819      	ldr	r1, [r3, #0]
 800bb12:	b151      	cbz	r1, 800bb2a <_dtoa_r+0x52>
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	2301      	movs	r3, #1
 800bb18:	4093      	lsls	r3, r2
 800bb1a:	604a      	str	r2, [r1, #4]
 800bb1c:	608b      	str	r3, [r1, #8]
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f001 f9a0 	bl	800ce64 <_Bfree>
 800bb24:	2200      	movs	r2, #0
 800bb26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	1e3b      	subs	r3, r7, #0
 800bb2c:	bfaf      	iteee	ge
 800bb2e:	2300      	movge	r3, #0
 800bb30:	2201      	movlt	r2, #1
 800bb32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bb36:	9305      	strlt	r3, [sp, #20]
 800bb38:	bfa8      	it	ge
 800bb3a:	f8c8 3000 	strge.w	r3, [r8]
 800bb3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bb42:	4b9f      	ldr	r3, [pc, #636]	; (800bdc0 <_dtoa_r+0x2e8>)
 800bb44:	bfb8      	it	lt
 800bb46:	f8c8 2000 	strlt.w	r2, [r8]
 800bb4a:	ea33 0309 	bics.w	r3, r3, r9
 800bb4e:	d119      	bne.n	800bb84 <_dtoa_r+0xac>
 800bb50:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb5c:	4333      	orrs	r3, r6
 800bb5e:	f000 8580 	beq.w	800c662 <_dtoa_r+0xb8a>
 800bb62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bb64:	b953      	cbnz	r3, 800bb7c <_dtoa_r+0xa4>
 800bb66:	4b97      	ldr	r3, [pc, #604]	; (800bdc4 <_dtoa_r+0x2ec>)
 800bb68:	e022      	b.n	800bbb0 <_dtoa_r+0xd8>
 800bb6a:	4b97      	ldr	r3, [pc, #604]	; (800bdc8 <_dtoa_r+0x2f0>)
 800bb6c:	9308      	str	r3, [sp, #32]
 800bb6e:	3308      	adds	r3, #8
 800bb70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	9808      	ldr	r0, [sp, #32]
 800bb76:	b019      	add	sp, #100	; 0x64
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7c:	4b91      	ldr	r3, [pc, #580]	; (800bdc4 <_dtoa_r+0x2ec>)
 800bb7e:	9308      	str	r3, [sp, #32]
 800bb80:	3303      	adds	r3, #3
 800bb82:	e7f5      	b.n	800bb70 <_dtoa_r+0x98>
 800bb84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bb88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bb8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb90:	2200      	movs	r2, #0
 800bb92:	2300      	movs	r3, #0
 800bb94:	f7f4 ff20 	bl	80009d8 <__aeabi_dcmpeq>
 800bb98:	4680      	mov	r8, r0
 800bb9a:	b158      	cbz	r0, 800bbb4 <_dtoa_r+0xdc>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 8559 	beq.w	800c65c <_dtoa_r+0xb84>
 800bbaa:	4888      	ldr	r0, [pc, #544]	; (800bdcc <_dtoa_r+0x2f4>)
 800bbac:	6018      	str	r0, [r3, #0]
 800bbae:	1e43      	subs	r3, r0, #1
 800bbb0:	9308      	str	r3, [sp, #32]
 800bbb2:	e7df      	b.n	800bb74 <_dtoa_r+0x9c>
 800bbb4:	ab16      	add	r3, sp, #88	; 0x58
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	ab17      	add	r3, sp, #92	; 0x5c
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bbc2:	f001 fcf9 	bl	800d5b8 <__d2b>
 800bbc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bbca:	4682      	mov	sl, r0
 800bbcc:	2c00      	cmp	r4, #0
 800bbce:	d07e      	beq.n	800bcce <_dtoa_r+0x1f6>
 800bbd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bbda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bbe2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bbe6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bbea:	2200      	movs	r2, #0
 800bbec:	4b78      	ldr	r3, [pc, #480]	; (800bdd0 <_dtoa_r+0x2f8>)
 800bbee:	f7f4 fad3 	bl	8000198 <__aeabi_dsub>
 800bbf2:	a36b      	add	r3, pc, #428	; (adr r3, 800bda0 <_dtoa_r+0x2c8>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f7f4 fc86 	bl	8000508 <__aeabi_dmul>
 800bbfc:	a36a      	add	r3, pc, #424	; (adr r3, 800bda8 <_dtoa_r+0x2d0>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	f7f4 facb 	bl	800019c <__adddf3>
 800bc06:	4606      	mov	r6, r0
 800bc08:	4620      	mov	r0, r4
 800bc0a:	460f      	mov	r7, r1
 800bc0c:	f7f4 fc12 	bl	8000434 <__aeabi_i2d>
 800bc10:	a367      	add	r3, pc, #412	; (adr r3, 800bdb0 <_dtoa_r+0x2d8>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 fc77 	bl	8000508 <__aeabi_dmul>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	f7f4 fabb 	bl	800019c <__adddf3>
 800bc26:	4606      	mov	r6, r0
 800bc28:	460f      	mov	r7, r1
 800bc2a:	f7f4 ff1d 	bl	8000a68 <__aeabi_d2iz>
 800bc2e:	2200      	movs	r2, #0
 800bc30:	4681      	mov	r9, r0
 800bc32:	2300      	movs	r3, #0
 800bc34:	4630      	mov	r0, r6
 800bc36:	4639      	mov	r1, r7
 800bc38:	f7f4 fed8 	bl	80009ec <__aeabi_dcmplt>
 800bc3c:	b148      	cbz	r0, 800bc52 <_dtoa_r+0x17a>
 800bc3e:	4648      	mov	r0, r9
 800bc40:	f7f4 fbf8 	bl	8000434 <__aeabi_i2d>
 800bc44:	4632      	mov	r2, r6
 800bc46:	463b      	mov	r3, r7
 800bc48:	f7f4 fec6 	bl	80009d8 <__aeabi_dcmpeq>
 800bc4c:	b908      	cbnz	r0, 800bc52 <_dtoa_r+0x17a>
 800bc4e:	f109 39ff 	add.w	r9, r9, #4294967295
 800bc52:	f1b9 0f16 	cmp.w	r9, #22
 800bc56:	d857      	bhi.n	800bd08 <_dtoa_r+0x230>
 800bc58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc5c:	4b5d      	ldr	r3, [pc, #372]	; (800bdd4 <_dtoa_r+0x2fc>)
 800bc5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	f7f4 fec1 	bl	80009ec <__aeabi_dcmplt>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d04e      	beq.n	800bd0c <_dtoa_r+0x234>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f109 39ff 	add.w	r9, r9, #4294967295
 800bc74:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bc78:	1b1c      	subs	r4, r3, r4
 800bc7a:	1e63      	subs	r3, r4, #1
 800bc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc7e:	bf49      	itett	mi
 800bc80:	f1c4 0301 	rsbmi	r3, r4, #1
 800bc84:	2300      	movpl	r3, #0
 800bc86:	9306      	strmi	r3, [sp, #24]
 800bc88:	2300      	movmi	r3, #0
 800bc8a:	bf54      	ite	pl
 800bc8c:	9306      	strpl	r3, [sp, #24]
 800bc8e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bc90:	f1b9 0f00 	cmp.w	r9, #0
 800bc94:	db3c      	blt.n	800bd10 <_dtoa_r+0x238>
 800bc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc98:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bc9c:	444b      	add	r3, r9
 800bc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bca0:	2300      	movs	r3, #0
 800bca2:	930a      	str	r3, [sp, #40]	; 0x28
 800bca4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bca6:	2b09      	cmp	r3, #9
 800bca8:	d86c      	bhi.n	800bd84 <_dtoa_r+0x2ac>
 800bcaa:	2b05      	cmp	r3, #5
 800bcac:	bfc4      	itt	gt
 800bcae:	3b04      	subgt	r3, #4
 800bcb0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bcb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bcb4:	bfc8      	it	gt
 800bcb6:	2400      	movgt	r4, #0
 800bcb8:	f1a3 0302 	sub.w	r3, r3, #2
 800bcbc:	bfd8      	it	le
 800bcbe:	2401      	movle	r4, #1
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	f200 808b 	bhi.w	800bddc <_dtoa_r+0x304>
 800bcc6:	e8df f003 	tbb	[pc, r3]
 800bcca:	4f2d      	.short	0x4f2d
 800bccc:	5b4d      	.short	0x5b4d
 800bcce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bcd2:	441c      	add	r4, r3
 800bcd4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bcd8:	2b20      	cmp	r3, #32
 800bcda:	bfc3      	ittte	gt
 800bcdc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bce0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800bce4:	fa09 f303 	lslgt.w	r3, r9, r3
 800bce8:	f1c3 0320 	rsble	r3, r3, #32
 800bcec:	bfc6      	itte	gt
 800bcee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bcf2:	4318      	orrgt	r0, r3
 800bcf4:	fa06 f003 	lslle.w	r0, r6, r3
 800bcf8:	f7f4 fb8c 	bl	8000414 <__aeabi_ui2d>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bd02:	3c01      	subs	r4, #1
 800bd04:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd06:	e770      	b.n	800bbea <_dtoa_r+0x112>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e7b3      	b.n	800bc74 <_dtoa_r+0x19c>
 800bd0c:	900f      	str	r0, [sp, #60]	; 0x3c
 800bd0e:	e7b2      	b.n	800bc76 <_dtoa_r+0x19e>
 800bd10:	9b06      	ldr	r3, [sp, #24]
 800bd12:	eba3 0309 	sub.w	r3, r3, r9
 800bd16:	9306      	str	r3, [sp, #24]
 800bd18:	f1c9 0300 	rsb	r3, r9, #0
 800bd1c:	930a      	str	r3, [sp, #40]	; 0x28
 800bd1e:	2300      	movs	r3, #0
 800bd20:	930e      	str	r3, [sp, #56]	; 0x38
 800bd22:	e7bf      	b.n	800bca4 <_dtoa_r+0x1cc>
 800bd24:	2300      	movs	r3, #0
 800bd26:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	dc59      	bgt.n	800bde2 <_dtoa_r+0x30a>
 800bd2e:	f04f 0b01 	mov.w	fp, #1
 800bd32:	465b      	mov	r3, fp
 800bd34:	f8cd b008 	str.w	fp, [sp, #8]
 800bd38:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bd40:	6042      	str	r2, [r0, #4]
 800bd42:	2204      	movs	r2, #4
 800bd44:	f102 0614 	add.w	r6, r2, #20
 800bd48:	429e      	cmp	r6, r3
 800bd4a:	6841      	ldr	r1, [r0, #4]
 800bd4c:	d94f      	bls.n	800bdee <_dtoa_r+0x316>
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f001 f848 	bl	800cde4 <_Balloc>
 800bd54:	9008      	str	r0, [sp, #32]
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d14d      	bne.n	800bdf6 <_dtoa_r+0x31e>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd60:	4b1d      	ldr	r3, [pc, #116]	; (800bdd8 <_dtoa_r+0x300>)
 800bd62:	e6cd      	b.n	800bb00 <_dtoa_r+0x28>
 800bd64:	2301      	movs	r3, #1
 800bd66:	e7de      	b.n	800bd26 <_dtoa_r+0x24e>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd6e:	eb09 0b03 	add.w	fp, r9, r3
 800bd72:	f10b 0301 	add.w	r3, fp, #1
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	9302      	str	r3, [sp, #8]
 800bd7a:	bfb8      	it	lt
 800bd7c:	2301      	movlt	r3, #1
 800bd7e:	e7dd      	b.n	800bd3c <_dtoa_r+0x264>
 800bd80:	2301      	movs	r3, #1
 800bd82:	e7f2      	b.n	800bd6a <_dtoa_r+0x292>
 800bd84:	2401      	movs	r4, #1
 800bd86:	2300      	movs	r3, #0
 800bd88:	940b      	str	r4, [sp, #44]	; 0x2c
 800bd8a:	9322      	str	r3, [sp, #136]	; 0x88
 800bd8c:	f04f 3bff 	mov.w	fp, #4294967295
 800bd90:	2200      	movs	r2, #0
 800bd92:	2312      	movs	r3, #18
 800bd94:	f8cd b008 	str.w	fp, [sp, #8]
 800bd98:	9223      	str	r2, [sp, #140]	; 0x8c
 800bd9a:	e7cf      	b.n	800bd3c <_dtoa_r+0x264>
 800bd9c:	f3af 8000 	nop.w
 800bda0:	636f4361 	.word	0x636f4361
 800bda4:	3fd287a7 	.word	0x3fd287a7
 800bda8:	8b60c8b3 	.word	0x8b60c8b3
 800bdac:	3fc68a28 	.word	0x3fc68a28
 800bdb0:	509f79fb 	.word	0x509f79fb
 800bdb4:	3fd34413 	.word	0x3fd34413
 800bdb8:	0800ed6e 	.word	0x0800ed6e
 800bdbc:	0800ed85 	.word	0x0800ed85
 800bdc0:	7ff00000 	.word	0x7ff00000
 800bdc4:	0800ed6a 	.word	0x0800ed6a
 800bdc8:	0800ed61 	.word	0x0800ed61
 800bdcc:	0800ebe5 	.word	0x0800ebe5
 800bdd0:	3ff80000 	.word	0x3ff80000
 800bdd4:	0800ef00 	.word	0x0800ef00
 800bdd8:	0800ede4 	.word	0x0800ede4
 800bddc:	2301      	movs	r3, #1
 800bdde:	930b      	str	r3, [sp, #44]	; 0x2c
 800bde0:	e7d4      	b.n	800bd8c <_dtoa_r+0x2b4>
 800bde2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800bde6:	465b      	mov	r3, fp
 800bde8:	f8cd b008 	str.w	fp, [sp, #8]
 800bdec:	e7a6      	b.n	800bd3c <_dtoa_r+0x264>
 800bdee:	3101      	adds	r1, #1
 800bdf0:	6041      	str	r1, [r0, #4]
 800bdf2:	0052      	lsls	r2, r2, #1
 800bdf4:	e7a6      	b.n	800bd44 <_dtoa_r+0x26c>
 800bdf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bdf8:	9a08      	ldr	r2, [sp, #32]
 800bdfa:	601a      	str	r2, [r3, #0]
 800bdfc:	9b02      	ldr	r3, [sp, #8]
 800bdfe:	2b0e      	cmp	r3, #14
 800be00:	f200 80a8 	bhi.w	800bf54 <_dtoa_r+0x47c>
 800be04:	2c00      	cmp	r4, #0
 800be06:	f000 80a5 	beq.w	800bf54 <_dtoa_r+0x47c>
 800be0a:	f1b9 0f00 	cmp.w	r9, #0
 800be0e:	dd34      	ble.n	800be7a <_dtoa_r+0x3a2>
 800be10:	4a9a      	ldr	r2, [pc, #616]	; (800c07c <_dtoa_r+0x5a4>)
 800be12:	f009 030f 	and.w	r3, r9, #15
 800be16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be1a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800be1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800be26:	ea4f 1429 	mov.w	r4, r9, asr #4
 800be2a:	d016      	beq.n	800be5a <_dtoa_r+0x382>
 800be2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be30:	4b93      	ldr	r3, [pc, #588]	; (800c080 <_dtoa_r+0x5a8>)
 800be32:	2703      	movs	r7, #3
 800be34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be38:	f7f4 fc90 	bl	800075c <__aeabi_ddiv>
 800be3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be40:	f004 040f 	and.w	r4, r4, #15
 800be44:	4e8e      	ldr	r6, [pc, #568]	; (800c080 <_dtoa_r+0x5a8>)
 800be46:	b954      	cbnz	r4, 800be5e <_dtoa_r+0x386>
 800be48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be50:	f7f4 fc84 	bl	800075c <__aeabi_ddiv>
 800be54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be58:	e029      	b.n	800beae <_dtoa_r+0x3d6>
 800be5a:	2702      	movs	r7, #2
 800be5c:	e7f2      	b.n	800be44 <_dtoa_r+0x36c>
 800be5e:	07e1      	lsls	r1, r4, #31
 800be60:	d508      	bpl.n	800be74 <_dtoa_r+0x39c>
 800be62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be66:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be6a:	f7f4 fb4d 	bl	8000508 <__aeabi_dmul>
 800be6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be72:	3701      	adds	r7, #1
 800be74:	1064      	asrs	r4, r4, #1
 800be76:	3608      	adds	r6, #8
 800be78:	e7e5      	b.n	800be46 <_dtoa_r+0x36e>
 800be7a:	f000 80a5 	beq.w	800bfc8 <_dtoa_r+0x4f0>
 800be7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be82:	f1c9 0400 	rsb	r4, r9, #0
 800be86:	4b7d      	ldr	r3, [pc, #500]	; (800c07c <_dtoa_r+0x5a4>)
 800be88:	f004 020f 	and.w	r2, r4, #15
 800be8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	f7f4 fb38 	bl	8000508 <__aeabi_dmul>
 800be98:	2702      	movs	r7, #2
 800be9a:	2300      	movs	r3, #0
 800be9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bea0:	4e77      	ldr	r6, [pc, #476]	; (800c080 <_dtoa_r+0x5a8>)
 800bea2:	1124      	asrs	r4, r4, #4
 800bea4:	2c00      	cmp	r4, #0
 800bea6:	f040 8084 	bne.w	800bfb2 <_dtoa_r+0x4da>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1d2      	bne.n	800be54 <_dtoa_r+0x37c>
 800beae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 808b 	beq.w	800bfcc <_dtoa_r+0x4f4>
 800beb6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800beba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bebe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bec2:	2200      	movs	r2, #0
 800bec4:	4b6f      	ldr	r3, [pc, #444]	; (800c084 <_dtoa_r+0x5ac>)
 800bec6:	f7f4 fd91 	bl	80009ec <__aeabi_dcmplt>
 800beca:	2800      	cmp	r0, #0
 800becc:	d07e      	beq.n	800bfcc <_dtoa_r+0x4f4>
 800bece:	9b02      	ldr	r3, [sp, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d07b      	beq.n	800bfcc <_dtoa_r+0x4f4>
 800bed4:	f1bb 0f00 	cmp.w	fp, #0
 800bed8:	dd38      	ble.n	800bf4c <_dtoa_r+0x474>
 800beda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bede:	2200      	movs	r2, #0
 800bee0:	4b69      	ldr	r3, [pc, #420]	; (800c088 <_dtoa_r+0x5b0>)
 800bee2:	f7f4 fb11 	bl	8000508 <__aeabi_dmul>
 800bee6:	465c      	mov	r4, fp
 800bee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beec:	f109 38ff 	add.w	r8, r9, #4294967295
 800bef0:	3701      	adds	r7, #1
 800bef2:	4638      	mov	r0, r7
 800bef4:	f7f4 fa9e 	bl	8000434 <__aeabi_i2d>
 800bef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800befc:	f7f4 fb04 	bl	8000508 <__aeabi_dmul>
 800bf00:	2200      	movs	r2, #0
 800bf02:	4b62      	ldr	r3, [pc, #392]	; (800c08c <_dtoa_r+0x5b4>)
 800bf04:	f7f4 f94a 	bl	800019c <__adddf3>
 800bf08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bf0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bf10:	9611      	str	r6, [sp, #68]	; 0x44
 800bf12:	2c00      	cmp	r4, #0
 800bf14:	d15d      	bne.n	800bfd2 <_dtoa_r+0x4fa>
 800bf16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	4b5c      	ldr	r3, [pc, #368]	; (800c090 <_dtoa_r+0x5b8>)
 800bf1e:	f7f4 f93b 	bl	8000198 <__aeabi_dsub>
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
 800bf26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf2a:	4633      	mov	r3, r6
 800bf2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bf2e:	f7f4 fd7b 	bl	8000a28 <__aeabi_dcmpgt>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	f040 829e 	bne.w	800c474 <_dtoa_r+0x99c>
 800bf38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bf3e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bf42:	f7f4 fd53 	bl	80009ec <__aeabi_dcmplt>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f040 8292 	bne.w	800c470 <_dtoa_r+0x998>
 800bf4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bf50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f2c0 8153 	blt.w	800c202 <_dtoa_r+0x72a>
 800bf5c:	f1b9 0f0e 	cmp.w	r9, #14
 800bf60:	f300 814f 	bgt.w	800c202 <_dtoa_r+0x72a>
 800bf64:	4b45      	ldr	r3, [pc, #276]	; (800c07c <_dtoa_r+0x5a4>)
 800bf66:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bf6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf6e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bf72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f280 80db 	bge.w	800c130 <_dtoa_r+0x658>
 800bf7a:	9b02      	ldr	r3, [sp, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f300 80d7 	bgt.w	800c130 <_dtoa_r+0x658>
 800bf82:	f040 8274 	bne.w	800c46e <_dtoa_r+0x996>
 800bf86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	4b40      	ldr	r3, [pc, #256]	; (800c090 <_dtoa_r+0x5b8>)
 800bf8e:	f7f4 fabb 	bl	8000508 <__aeabi_dmul>
 800bf92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf96:	f7f4 fd3d 	bl	8000a14 <__aeabi_dcmpge>
 800bf9a:	9c02      	ldr	r4, [sp, #8]
 800bf9c:	4626      	mov	r6, r4
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	f040 824a 	bne.w	800c438 <_dtoa_r+0x960>
 800bfa4:	2331      	movs	r3, #49	; 0x31
 800bfa6:	9f08      	ldr	r7, [sp, #32]
 800bfa8:	f109 0901 	add.w	r9, r9, #1
 800bfac:	f807 3b01 	strb.w	r3, [r7], #1
 800bfb0:	e246      	b.n	800c440 <_dtoa_r+0x968>
 800bfb2:	07e2      	lsls	r2, r4, #31
 800bfb4:	d505      	bpl.n	800bfc2 <_dtoa_r+0x4ea>
 800bfb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bfba:	f7f4 faa5 	bl	8000508 <__aeabi_dmul>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	3701      	adds	r7, #1
 800bfc2:	1064      	asrs	r4, r4, #1
 800bfc4:	3608      	adds	r6, #8
 800bfc6:	e76d      	b.n	800bea4 <_dtoa_r+0x3cc>
 800bfc8:	2702      	movs	r7, #2
 800bfca:	e770      	b.n	800beae <_dtoa_r+0x3d6>
 800bfcc:	46c8      	mov	r8, r9
 800bfce:	9c02      	ldr	r4, [sp, #8]
 800bfd0:	e78f      	b.n	800bef2 <_dtoa_r+0x41a>
 800bfd2:	9908      	ldr	r1, [sp, #32]
 800bfd4:	4b29      	ldr	r3, [pc, #164]	; (800c07c <_dtoa_r+0x5a4>)
 800bfd6:	4421      	add	r1, r4
 800bfd8:	9112      	str	r1, [sp, #72]	; 0x48
 800bfda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bfdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfe0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bfe4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	d055      	beq.n	800c098 <_dtoa_r+0x5c0>
 800bfec:	2000      	movs	r0, #0
 800bfee:	4929      	ldr	r1, [pc, #164]	; (800c094 <_dtoa_r+0x5bc>)
 800bff0:	f7f4 fbb4 	bl	800075c <__aeabi_ddiv>
 800bff4:	463b      	mov	r3, r7
 800bff6:	4632      	mov	r2, r6
 800bff8:	f7f4 f8ce 	bl	8000198 <__aeabi_dsub>
 800bffc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c000:	9f08      	ldr	r7, [sp, #32]
 800c002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c006:	f7f4 fd2f 	bl	8000a68 <__aeabi_d2iz>
 800c00a:	4604      	mov	r4, r0
 800c00c:	f7f4 fa12 	bl	8000434 <__aeabi_i2d>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c018:	f7f4 f8be 	bl	8000198 <__aeabi_dsub>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	3430      	adds	r4, #48	; 0x30
 800c022:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c02a:	f807 4b01 	strb.w	r4, [r7], #1
 800c02e:	f7f4 fcdd 	bl	80009ec <__aeabi_dcmplt>
 800c032:	2800      	cmp	r0, #0
 800c034:	d174      	bne.n	800c120 <_dtoa_r+0x648>
 800c036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c03a:	2000      	movs	r0, #0
 800c03c:	4911      	ldr	r1, [pc, #68]	; (800c084 <_dtoa_r+0x5ac>)
 800c03e:	f7f4 f8ab 	bl	8000198 <__aeabi_dsub>
 800c042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c046:	f7f4 fcd1 	bl	80009ec <__aeabi_dcmplt>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	f040 80b6 	bne.w	800c1bc <_dtoa_r+0x6e4>
 800c050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c052:	429f      	cmp	r7, r3
 800c054:	f43f af7a 	beq.w	800bf4c <_dtoa_r+0x474>
 800c058:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c05c:	2200      	movs	r2, #0
 800c05e:	4b0a      	ldr	r3, [pc, #40]	; (800c088 <_dtoa_r+0x5b0>)
 800c060:	f7f4 fa52 	bl	8000508 <__aeabi_dmul>
 800c064:	2200      	movs	r2, #0
 800c066:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c06a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c06e:	4b06      	ldr	r3, [pc, #24]	; (800c088 <_dtoa_r+0x5b0>)
 800c070:	f7f4 fa4a 	bl	8000508 <__aeabi_dmul>
 800c074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c078:	e7c3      	b.n	800c002 <_dtoa_r+0x52a>
 800c07a:	bf00      	nop
 800c07c:	0800ef00 	.word	0x0800ef00
 800c080:	0800eed8 	.word	0x0800eed8
 800c084:	3ff00000 	.word	0x3ff00000
 800c088:	40240000 	.word	0x40240000
 800c08c:	401c0000 	.word	0x401c0000
 800c090:	40140000 	.word	0x40140000
 800c094:	3fe00000 	.word	0x3fe00000
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	f7f4 fa34 	bl	8000508 <__aeabi_dmul>
 800c0a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0a6:	9c08      	ldr	r4, [sp, #32]
 800c0a8:	9314      	str	r3, [sp, #80]	; 0x50
 800c0aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ae:	f7f4 fcdb 	bl	8000a68 <__aeabi_d2iz>
 800c0b2:	9015      	str	r0, [sp, #84]	; 0x54
 800c0b4:	f7f4 f9be 	bl	8000434 <__aeabi_i2d>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0c0:	f7f4 f86a 	bl	8000198 <__aeabi_dsub>
 800c0c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	3330      	adds	r3, #48	; 0x30
 800c0ca:	f804 3b01 	strb.w	r3, [r4], #1
 800c0ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0d0:	460f      	mov	r7, r1
 800c0d2:	429c      	cmp	r4, r3
 800c0d4:	f04f 0200 	mov.w	r2, #0
 800c0d8:	d124      	bne.n	800c124 <_dtoa_r+0x64c>
 800c0da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0de:	4bb3      	ldr	r3, [pc, #716]	; (800c3ac <_dtoa_r+0x8d4>)
 800c0e0:	f7f4 f85c 	bl	800019c <__adddf3>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	4639      	mov	r1, r7
 800c0ec:	f7f4 fc9c 	bl	8000a28 <__aeabi_dcmpgt>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d162      	bne.n	800c1ba <_dtoa_r+0x6e2>
 800c0f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	49ac      	ldr	r1, [pc, #688]	; (800c3ac <_dtoa_r+0x8d4>)
 800c0fc:	f7f4 f84c 	bl	8000198 <__aeabi_dsub>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4630      	mov	r0, r6
 800c106:	4639      	mov	r1, r7
 800c108:	f7f4 fc70 	bl	80009ec <__aeabi_dcmplt>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	f43f af1d 	beq.w	800bf4c <_dtoa_r+0x474>
 800c112:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c114:	1e7b      	subs	r3, r7, #1
 800c116:	9314      	str	r3, [sp, #80]	; 0x50
 800c118:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c11c:	2b30      	cmp	r3, #48	; 0x30
 800c11e:	d0f8      	beq.n	800c112 <_dtoa_r+0x63a>
 800c120:	46c1      	mov	r9, r8
 800c122:	e03a      	b.n	800c19a <_dtoa_r+0x6c2>
 800c124:	4ba2      	ldr	r3, [pc, #648]	; (800c3b0 <_dtoa_r+0x8d8>)
 800c126:	f7f4 f9ef 	bl	8000508 <__aeabi_dmul>
 800c12a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c12e:	e7bc      	b.n	800c0aa <_dtoa_r+0x5d2>
 800c130:	9f08      	ldr	r7, [sp, #32]
 800c132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c13a:	f7f4 fb0f 	bl	800075c <__aeabi_ddiv>
 800c13e:	f7f4 fc93 	bl	8000a68 <__aeabi_d2iz>
 800c142:	4604      	mov	r4, r0
 800c144:	f7f4 f976 	bl	8000434 <__aeabi_i2d>
 800c148:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c14c:	f7f4 f9dc 	bl	8000508 <__aeabi_dmul>
 800c150:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c154:	460b      	mov	r3, r1
 800c156:	4602      	mov	r2, r0
 800c158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c15c:	f7f4 f81c 	bl	8000198 <__aeabi_dsub>
 800c160:	f807 6b01 	strb.w	r6, [r7], #1
 800c164:	9e08      	ldr	r6, [sp, #32]
 800c166:	9b02      	ldr	r3, [sp, #8]
 800c168:	1bbe      	subs	r6, r7, r6
 800c16a:	42b3      	cmp	r3, r6
 800c16c:	d13a      	bne.n	800c1e4 <_dtoa_r+0x70c>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	f7f4 f813 	bl	800019c <__adddf3>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c17e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c182:	f7f4 fc51 	bl	8000a28 <__aeabi_dcmpgt>
 800c186:	bb58      	cbnz	r0, 800c1e0 <_dtoa_r+0x708>
 800c188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c18c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c190:	f7f4 fc22 	bl	80009d8 <__aeabi_dcmpeq>
 800c194:	b108      	cbz	r0, 800c19a <_dtoa_r+0x6c2>
 800c196:	07e1      	lsls	r1, r4, #31
 800c198:	d422      	bmi.n	800c1e0 <_dtoa_r+0x708>
 800c19a:	4628      	mov	r0, r5
 800c19c:	4651      	mov	r1, sl
 800c19e:	f000 fe61 	bl	800ce64 <_Bfree>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	703b      	strb	r3, [r7, #0]
 800c1a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c1a8:	f109 0001 	add.w	r0, r9, #1
 800c1ac:	6018      	str	r0, [r3, #0]
 800c1ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f43f acdf 	beq.w	800bb74 <_dtoa_r+0x9c>
 800c1b6:	601f      	str	r7, [r3, #0]
 800c1b8:	e4dc      	b.n	800bb74 <_dtoa_r+0x9c>
 800c1ba:	4627      	mov	r7, r4
 800c1bc:	463b      	mov	r3, r7
 800c1be:	461f      	mov	r7, r3
 800c1c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1c4:	2a39      	cmp	r2, #57	; 0x39
 800c1c6:	d107      	bne.n	800c1d8 <_dtoa_r+0x700>
 800c1c8:	9a08      	ldr	r2, [sp, #32]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d1f7      	bne.n	800c1be <_dtoa_r+0x6e6>
 800c1ce:	2230      	movs	r2, #48	; 0x30
 800c1d0:	9908      	ldr	r1, [sp, #32]
 800c1d2:	f108 0801 	add.w	r8, r8, #1
 800c1d6:	700a      	strb	r2, [r1, #0]
 800c1d8:	781a      	ldrb	r2, [r3, #0]
 800c1da:	3201      	adds	r2, #1
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	e79f      	b.n	800c120 <_dtoa_r+0x648>
 800c1e0:	46c8      	mov	r8, r9
 800c1e2:	e7eb      	b.n	800c1bc <_dtoa_r+0x6e4>
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	4b72      	ldr	r3, [pc, #456]	; (800c3b0 <_dtoa_r+0x8d8>)
 800c1e8:	f7f4 f98e 	bl	8000508 <__aeabi_dmul>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f7f4 fbee 	bl	80009d8 <__aeabi_dcmpeq>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d098      	beq.n	800c132 <_dtoa_r+0x65a>
 800c200:	e7cb      	b.n	800c19a <_dtoa_r+0x6c2>
 800c202:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c204:	2a00      	cmp	r2, #0
 800c206:	f000 80cd 	beq.w	800c3a4 <_dtoa_r+0x8cc>
 800c20a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c20c:	2a01      	cmp	r2, #1
 800c20e:	f300 80af 	bgt.w	800c370 <_dtoa_r+0x898>
 800c212:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c214:	2a00      	cmp	r2, #0
 800c216:	f000 80a7 	beq.w	800c368 <_dtoa_r+0x890>
 800c21a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c21e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c220:	9f06      	ldr	r7, [sp, #24]
 800c222:	9a06      	ldr	r2, [sp, #24]
 800c224:	2101      	movs	r1, #1
 800c226:	441a      	add	r2, r3
 800c228:	9206      	str	r2, [sp, #24]
 800c22a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c22c:	4628      	mov	r0, r5
 800c22e:	441a      	add	r2, r3
 800c230:	9209      	str	r2, [sp, #36]	; 0x24
 800c232:	f000 ff1b 	bl	800d06c <__i2b>
 800c236:	4606      	mov	r6, r0
 800c238:	2f00      	cmp	r7, #0
 800c23a:	dd0c      	ble.n	800c256 <_dtoa_r+0x77e>
 800c23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dd09      	ble.n	800c256 <_dtoa_r+0x77e>
 800c242:	42bb      	cmp	r3, r7
 800c244:	bfa8      	it	ge
 800c246:	463b      	movge	r3, r7
 800c248:	9a06      	ldr	r2, [sp, #24]
 800c24a:	1aff      	subs	r7, r7, r3
 800c24c:	1ad2      	subs	r2, r2, r3
 800c24e:	9206      	str	r2, [sp, #24]
 800c250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	9309      	str	r3, [sp, #36]	; 0x24
 800c256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c258:	b1f3      	cbz	r3, 800c298 <_dtoa_r+0x7c0>
 800c25a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f000 80a9 	beq.w	800c3b4 <_dtoa_r+0x8dc>
 800c262:	2c00      	cmp	r4, #0
 800c264:	dd10      	ble.n	800c288 <_dtoa_r+0x7b0>
 800c266:	4631      	mov	r1, r6
 800c268:	4622      	mov	r2, r4
 800c26a:	4628      	mov	r0, r5
 800c26c:	f000 ffb8 	bl	800d1e0 <__pow5mult>
 800c270:	4652      	mov	r2, sl
 800c272:	4601      	mov	r1, r0
 800c274:	4606      	mov	r6, r0
 800c276:	4628      	mov	r0, r5
 800c278:	f000 ff0e 	bl	800d098 <__multiply>
 800c27c:	4680      	mov	r8, r0
 800c27e:	4651      	mov	r1, sl
 800c280:	4628      	mov	r0, r5
 800c282:	f000 fdef 	bl	800ce64 <_Bfree>
 800c286:	46c2      	mov	sl, r8
 800c288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c28a:	1b1a      	subs	r2, r3, r4
 800c28c:	d004      	beq.n	800c298 <_dtoa_r+0x7c0>
 800c28e:	4651      	mov	r1, sl
 800c290:	4628      	mov	r0, r5
 800c292:	f000 ffa5 	bl	800d1e0 <__pow5mult>
 800c296:	4682      	mov	sl, r0
 800c298:	2101      	movs	r1, #1
 800c29a:	4628      	mov	r0, r5
 800c29c:	f000 fee6 	bl	800d06c <__i2b>
 800c2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f340 8087 	ble.w	800c3b8 <_dtoa_r+0x8e0>
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	4601      	mov	r1, r0
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f000 ff96 	bl	800d1e0 <__pow5mult>
 800c2b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	f340 8080 	ble.w	800c3be <_dtoa_r+0x8e6>
 800c2be:	f04f 0800 	mov.w	r8, #0
 800c2c2:	6923      	ldr	r3, [r4, #16]
 800c2c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2c8:	6918      	ldr	r0, [r3, #16]
 800c2ca:	f000 fe81 	bl	800cfd0 <__hi0bits>
 800c2ce:	f1c0 0020 	rsb	r0, r0, #32
 800c2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2d4:	4418      	add	r0, r3
 800c2d6:	f010 001f 	ands.w	r0, r0, #31
 800c2da:	f000 8092 	beq.w	800c402 <_dtoa_r+0x92a>
 800c2de:	f1c0 0320 	rsb	r3, r0, #32
 800c2e2:	2b04      	cmp	r3, #4
 800c2e4:	f340 808a 	ble.w	800c3fc <_dtoa_r+0x924>
 800c2e8:	f1c0 001c 	rsb	r0, r0, #28
 800c2ec:	9b06      	ldr	r3, [sp, #24]
 800c2ee:	4407      	add	r7, r0
 800c2f0:	4403      	add	r3, r0
 800c2f2:	9306      	str	r3, [sp, #24]
 800c2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f6:	4403      	add	r3, r0
 800c2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fa:	9b06      	ldr	r3, [sp, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	dd05      	ble.n	800c30c <_dtoa_r+0x834>
 800c300:	4651      	mov	r1, sl
 800c302:	461a      	mov	r2, r3
 800c304:	4628      	mov	r0, r5
 800c306:	f000 ffc5 	bl	800d294 <__lshift>
 800c30a:	4682      	mov	sl, r0
 800c30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dd05      	ble.n	800c31e <_dtoa_r+0x846>
 800c312:	4621      	mov	r1, r4
 800c314:	461a      	mov	r2, r3
 800c316:	4628      	mov	r0, r5
 800c318:	f000 ffbc 	bl	800d294 <__lshift>
 800c31c:	4604      	mov	r4, r0
 800c31e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c320:	2b00      	cmp	r3, #0
 800c322:	d070      	beq.n	800c406 <_dtoa_r+0x92e>
 800c324:	4621      	mov	r1, r4
 800c326:	4650      	mov	r0, sl
 800c328:	f001 f820 	bl	800d36c <__mcmp>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	da6a      	bge.n	800c406 <_dtoa_r+0x92e>
 800c330:	2300      	movs	r3, #0
 800c332:	4651      	mov	r1, sl
 800c334:	220a      	movs	r2, #10
 800c336:	4628      	mov	r0, r5
 800c338:	f000 fdb6 	bl	800cea8 <__multadd>
 800c33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c33e:	4682      	mov	sl, r0
 800c340:	f109 39ff 	add.w	r9, r9, #4294967295
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 8193 	beq.w	800c670 <_dtoa_r+0xb98>
 800c34a:	4631      	mov	r1, r6
 800c34c:	2300      	movs	r3, #0
 800c34e:	220a      	movs	r2, #10
 800c350:	4628      	mov	r0, r5
 800c352:	f000 fda9 	bl	800cea8 <__multadd>
 800c356:	f1bb 0f00 	cmp.w	fp, #0
 800c35a:	4606      	mov	r6, r0
 800c35c:	f300 8093 	bgt.w	800c486 <_dtoa_r+0x9ae>
 800c360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c362:	2b02      	cmp	r3, #2
 800c364:	dc57      	bgt.n	800c416 <_dtoa_r+0x93e>
 800c366:	e08e      	b.n	800c486 <_dtoa_r+0x9ae>
 800c368:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c36a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c36e:	e756      	b.n	800c21e <_dtoa_r+0x746>
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	1e5c      	subs	r4, r3, #1
 800c374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c376:	42a3      	cmp	r3, r4
 800c378:	bfb7      	itett	lt
 800c37a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c37c:	1b1c      	subge	r4, r3, r4
 800c37e:	1ae2      	sublt	r2, r4, r3
 800c380:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c382:	bfbe      	ittt	lt
 800c384:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c386:	189b      	addlt	r3, r3, r2
 800c388:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c38a:	9b02      	ldr	r3, [sp, #8]
 800c38c:	bfb8      	it	lt
 800c38e:	2400      	movlt	r4, #0
 800c390:	2b00      	cmp	r3, #0
 800c392:	bfbb      	ittet	lt
 800c394:	9b06      	ldrlt	r3, [sp, #24]
 800c396:	9a02      	ldrlt	r2, [sp, #8]
 800c398:	9f06      	ldrge	r7, [sp, #24]
 800c39a:	1a9f      	sublt	r7, r3, r2
 800c39c:	bfac      	ite	ge
 800c39e:	9b02      	ldrge	r3, [sp, #8]
 800c3a0:	2300      	movlt	r3, #0
 800c3a2:	e73e      	b.n	800c222 <_dtoa_r+0x74a>
 800c3a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3a6:	9f06      	ldr	r7, [sp, #24]
 800c3a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c3aa:	e745      	b.n	800c238 <_dtoa_r+0x760>
 800c3ac:	3fe00000 	.word	0x3fe00000
 800c3b0:	40240000 	.word	0x40240000
 800c3b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3b6:	e76a      	b.n	800c28e <_dtoa_r+0x7b6>
 800c3b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	dc19      	bgt.n	800c3f2 <_dtoa_r+0x91a>
 800c3be:	9b04      	ldr	r3, [sp, #16]
 800c3c0:	b9bb      	cbnz	r3, 800c3f2 <_dtoa_r+0x91a>
 800c3c2:	9b05      	ldr	r3, [sp, #20]
 800c3c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3c8:	b99b      	cbnz	r3, 800c3f2 <_dtoa_r+0x91a>
 800c3ca:	9b05      	ldr	r3, [sp, #20]
 800c3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3d0:	0d1b      	lsrs	r3, r3, #20
 800c3d2:	051b      	lsls	r3, r3, #20
 800c3d4:	b183      	cbz	r3, 800c3f8 <_dtoa_r+0x920>
 800c3d6:	f04f 0801 	mov.w	r8, #1
 800c3da:	9b06      	ldr	r3, [sp, #24]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	9306      	str	r3, [sp, #24]
 800c3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f47f af6a 	bne.w	800c2c2 <_dtoa_r+0x7ea>
 800c3ee:	2001      	movs	r0, #1
 800c3f0:	e76f      	b.n	800c2d2 <_dtoa_r+0x7fa>
 800c3f2:	f04f 0800 	mov.w	r8, #0
 800c3f6:	e7f6      	b.n	800c3e6 <_dtoa_r+0x90e>
 800c3f8:	4698      	mov	r8, r3
 800c3fa:	e7f4      	b.n	800c3e6 <_dtoa_r+0x90e>
 800c3fc:	f43f af7d 	beq.w	800c2fa <_dtoa_r+0x822>
 800c400:	4618      	mov	r0, r3
 800c402:	301c      	adds	r0, #28
 800c404:	e772      	b.n	800c2ec <_dtoa_r+0x814>
 800c406:	9b02      	ldr	r3, [sp, #8]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	dc36      	bgt.n	800c47a <_dtoa_r+0x9a2>
 800c40c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c40e:	2b02      	cmp	r3, #2
 800c410:	dd33      	ble.n	800c47a <_dtoa_r+0x9a2>
 800c412:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c416:	f1bb 0f00 	cmp.w	fp, #0
 800c41a:	d10d      	bne.n	800c438 <_dtoa_r+0x960>
 800c41c:	4621      	mov	r1, r4
 800c41e:	465b      	mov	r3, fp
 800c420:	2205      	movs	r2, #5
 800c422:	4628      	mov	r0, r5
 800c424:	f000 fd40 	bl	800cea8 <__multadd>
 800c428:	4601      	mov	r1, r0
 800c42a:	4604      	mov	r4, r0
 800c42c:	4650      	mov	r0, sl
 800c42e:	f000 ff9d 	bl	800d36c <__mcmp>
 800c432:	2800      	cmp	r0, #0
 800c434:	f73f adb6 	bgt.w	800bfa4 <_dtoa_r+0x4cc>
 800c438:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c43a:	9f08      	ldr	r7, [sp, #32]
 800c43c:	ea6f 0903 	mvn.w	r9, r3
 800c440:	f04f 0800 	mov.w	r8, #0
 800c444:	4621      	mov	r1, r4
 800c446:	4628      	mov	r0, r5
 800c448:	f000 fd0c 	bl	800ce64 <_Bfree>
 800c44c:	2e00      	cmp	r6, #0
 800c44e:	f43f aea4 	beq.w	800c19a <_dtoa_r+0x6c2>
 800c452:	f1b8 0f00 	cmp.w	r8, #0
 800c456:	d005      	beq.n	800c464 <_dtoa_r+0x98c>
 800c458:	45b0      	cmp	r8, r6
 800c45a:	d003      	beq.n	800c464 <_dtoa_r+0x98c>
 800c45c:	4641      	mov	r1, r8
 800c45e:	4628      	mov	r0, r5
 800c460:	f000 fd00 	bl	800ce64 <_Bfree>
 800c464:	4631      	mov	r1, r6
 800c466:	4628      	mov	r0, r5
 800c468:	f000 fcfc 	bl	800ce64 <_Bfree>
 800c46c:	e695      	b.n	800c19a <_dtoa_r+0x6c2>
 800c46e:	2400      	movs	r4, #0
 800c470:	4626      	mov	r6, r4
 800c472:	e7e1      	b.n	800c438 <_dtoa_r+0x960>
 800c474:	46c1      	mov	r9, r8
 800c476:	4626      	mov	r6, r4
 800c478:	e594      	b.n	800bfa4 <_dtoa_r+0x4cc>
 800c47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c47c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 80fc 	beq.w	800c67e <_dtoa_r+0xba6>
 800c486:	2f00      	cmp	r7, #0
 800c488:	dd05      	ble.n	800c496 <_dtoa_r+0x9be>
 800c48a:	4631      	mov	r1, r6
 800c48c:	463a      	mov	r2, r7
 800c48e:	4628      	mov	r0, r5
 800c490:	f000 ff00 	bl	800d294 <__lshift>
 800c494:	4606      	mov	r6, r0
 800c496:	f1b8 0f00 	cmp.w	r8, #0
 800c49a:	d05c      	beq.n	800c556 <_dtoa_r+0xa7e>
 800c49c:	4628      	mov	r0, r5
 800c49e:	6871      	ldr	r1, [r6, #4]
 800c4a0:	f000 fca0 	bl	800cde4 <_Balloc>
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	b928      	cbnz	r0, 800c4b4 <_dtoa_r+0x9dc>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c4ae:	4b7e      	ldr	r3, [pc, #504]	; (800c6a8 <_dtoa_r+0xbd0>)
 800c4b0:	f7ff bb26 	b.w	800bb00 <_dtoa_r+0x28>
 800c4b4:	6932      	ldr	r2, [r6, #16]
 800c4b6:	f106 010c 	add.w	r1, r6, #12
 800c4ba:	3202      	adds	r2, #2
 800c4bc:	0092      	lsls	r2, r2, #2
 800c4be:	300c      	adds	r0, #12
 800c4c0:	f7fd fce4 	bl	8009e8c <memcpy>
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	4639      	mov	r1, r7
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 fee3 	bl	800d294 <__lshift>
 800c4ce:	46b0      	mov	r8, r6
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	9b08      	ldr	r3, [sp, #32]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	9302      	str	r3, [sp, #8]
 800c4d8:	9b08      	ldr	r3, [sp, #32]
 800c4da:	445b      	add	r3, fp
 800c4dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c4de:	9b04      	ldr	r3, [sp, #16]
 800c4e0:	f003 0301 	and.w	r3, r3, #1
 800c4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e6:	9b02      	ldr	r3, [sp, #8]
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	4650      	mov	r0, sl
 800c4ec:	f103 3bff 	add.w	fp, r3, #4294967295
 800c4f0:	f7ff fa62 	bl	800b9b8 <quorem>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	4641      	mov	r1, r8
 800c4f8:	3330      	adds	r3, #48	; 0x30
 800c4fa:	9004      	str	r0, [sp, #16]
 800c4fc:	4650      	mov	r0, sl
 800c4fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800c500:	f000 ff34 	bl	800d36c <__mcmp>
 800c504:	4632      	mov	r2, r6
 800c506:	9006      	str	r0, [sp, #24]
 800c508:	4621      	mov	r1, r4
 800c50a:	4628      	mov	r0, r5
 800c50c:	f000 ff4a 	bl	800d3a4 <__mdiff>
 800c510:	68c2      	ldr	r2, [r0, #12]
 800c512:	4607      	mov	r7, r0
 800c514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c516:	bb02      	cbnz	r2, 800c55a <_dtoa_r+0xa82>
 800c518:	4601      	mov	r1, r0
 800c51a:	4650      	mov	r0, sl
 800c51c:	f000 ff26 	bl	800d36c <__mcmp>
 800c520:	4602      	mov	r2, r0
 800c522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c524:	4639      	mov	r1, r7
 800c526:	4628      	mov	r0, r5
 800c528:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c52c:	f000 fc9a 	bl	800ce64 <_Bfree>
 800c530:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c534:	9f02      	ldr	r7, [sp, #8]
 800c536:	ea43 0102 	orr.w	r1, r3, r2
 800c53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c53c:	430b      	orrs	r3, r1
 800c53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c540:	d10d      	bne.n	800c55e <_dtoa_r+0xa86>
 800c542:	2b39      	cmp	r3, #57	; 0x39
 800c544:	d027      	beq.n	800c596 <_dtoa_r+0xabe>
 800c546:	9a06      	ldr	r2, [sp, #24]
 800c548:	2a00      	cmp	r2, #0
 800c54a:	dd01      	ble.n	800c550 <_dtoa_r+0xa78>
 800c54c:	9b04      	ldr	r3, [sp, #16]
 800c54e:	3331      	adds	r3, #49	; 0x31
 800c550:	f88b 3000 	strb.w	r3, [fp]
 800c554:	e776      	b.n	800c444 <_dtoa_r+0x96c>
 800c556:	4630      	mov	r0, r6
 800c558:	e7b9      	b.n	800c4ce <_dtoa_r+0x9f6>
 800c55a:	2201      	movs	r2, #1
 800c55c:	e7e2      	b.n	800c524 <_dtoa_r+0xa4c>
 800c55e:	9906      	ldr	r1, [sp, #24]
 800c560:	2900      	cmp	r1, #0
 800c562:	db04      	blt.n	800c56e <_dtoa_r+0xa96>
 800c564:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c566:	4301      	orrs	r1, r0
 800c568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c56a:	4301      	orrs	r1, r0
 800c56c:	d120      	bne.n	800c5b0 <_dtoa_r+0xad8>
 800c56e:	2a00      	cmp	r2, #0
 800c570:	ddee      	ble.n	800c550 <_dtoa_r+0xa78>
 800c572:	4651      	mov	r1, sl
 800c574:	2201      	movs	r2, #1
 800c576:	4628      	mov	r0, r5
 800c578:	9302      	str	r3, [sp, #8]
 800c57a:	f000 fe8b 	bl	800d294 <__lshift>
 800c57e:	4621      	mov	r1, r4
 800c580:	4682      	mov	sl, r0
 800c582:	f000 fef3 	bl	800d36c <__mcmp>
 800c586:	2800      	cmp	r0, #0
 800c588:	9b02      	ldr	r3, [sp, #8]
 800c58a:	dc02      	bgt.n	800c592 <_dtoa_r+0xaba>
 800c58c:	d1e0      	bne.n	800c550 <_dtoa_r+0xa78>
 800c58e:	07da      	lsls	r2, r3, #31
 800c590:	d5de      	bpl.n	800c550 <_dtoa_r+0xa78>
 800c592:	2b39      	cmp	r3, #57	; 0x39
 800c594:	d1da      	bne.n	800c54c <_dtoa_r+0xa74>
 800c596:	2339      	movs	r3, #57	; 0x39
 800c598:	f88b 3000 	strb.w	r3, [fp]
 800c59c:	463b      	mov	r3, r7
 800c59e:	461f      	mov	r7, r3
 800c5a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	2a39      	cmp	r2, #57	; 0x39
 800c5a8:	d050      	beq.n	800c64c <_dtoa_r+0xb74>
 800c5aa:	3201      	adds	r2, #1
 800c5ac:	701a      	strb	r2, [r3, #0]
 800c5ae:	e749      	b.n	800c444 <_dtoa_r+0x96c>
 800c5b0:	2a00      	cmp	r2, #0
 800c5b2:	dd03      	ble.n	800c5bc <_dtoa_r+0xae4>
 800c5b4:	2b39      	cmp	r3, #57	; 0x39
 800c5b6:	d0ee      	beq.n	800c596 <_dtoa_r+0xabe>
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	e7c9      	b.n	800c550 <_dtoa_r+0xa78>
 800c5bc:	9a02      	ldr	r2, [sp, #8]
 800c5be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c5c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c5c4:	428a      	cmp	r2, r1
 800c5c6:	d02a      	beq.n	800c61e <_dtoa_r+0xb46>
 800c5c8:	4651      	mov	r1, sl
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	220a      	movs	r2, #10
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f000 fc6a 	bl	800cea8 <__multadd>
 800c5d4:	45b0      	cmp	r8, r6
 800c5d6:	4682      	mov	sl, r0
 800c5d8:	f04f 0300 	mov.w	r3, #0
 800c5dc:	f04f 020a 	mov.w	r2, #10
 800c5e0:	4641      	mov	r1, r8
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	d107      	bne.n	800c5f6 <_dtoa_r+0xb1e>
 800c5e6:	f000 fc5f 	bl	800cea8 <__multadd>
 800c5ea:	4680      	mov	r8, r0
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	9b02      	ldr	r3, [sp, #8]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	9302      	str	r3, [sp, #8]
 800c5f4:	e777      	b.n	800c4e6 <_dtoa_r+0xa0e>
 800c5f6:	f000 fc57 	bl	800cea8 <__multadd>
 800c5fa:	4631      	mov	r1, r6
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	2300      	movs	r3, #0
 800c600:	220a      	movs	r2, #10
 800c602:	4628      	mov	r0, r5
 800c604:	f000 fc50 	bl	800cea8 <__multadd>
 800c608:	4606      	mov	r6, r0
 800c60a:	e7f0      	b.n	800c5ee <_dtoa_r+0xb16>
 800c60c:	f1bb 0f00 	cmp.w	fp, #0
 800c610:	bfcc      	ite	gt
 800c612:	465f      	movgt	r7, fp
 800c614:	2701      	movle	r7, #1
 800c616:	f04f 0800 	mov.w	r8, #0
 800c61a:	9a08      	ldr	r2, [sp, #32]
 800c61c:	4417      	add	r7, r2
 800c61e:	4651      	mov	r1, sl
 800c620:	2201      	movs	r2, #1
 800c622:	4628      	mov	r0, r5
 800c624:	9302      	str	r3, [sp, #8]
 800c626:	f000 fe35 	bl	800d294 <__lshift>
 800c62a:	4621      	mov	r1, r4
 800c62c:	4682      	mov	sl, r0
 800c62e:	f000 fe9d 	bl	800d36c <__mcmp>
 800c632:	2800      	cmp	r0, #0
 800c634:	dcb2      	bgt.n	800c59c <_dtoa_r+0xac4>
 800c636:	d102      	bne.n	800c63e <_dtoa_r+0xb66>
 800c638:	9b02      	ldr	r3, [sp, #8]
 800c63a:	07db      	lsls	r3, r3, #31
 800c63c:	d4ae      	bmi.n	800c59c <_dtoa_r+0xac4>
 800c63e:	463b      	mov	r3, r7
 800c640:	461f      	mov	r7, r3
 800c642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c646:	2a30      	cmp	r2, #48	; 0x30
 800c648:	d0fa      	beq.n	800c640 <_dtoa_r+0xb68>
 800c64a:	e6fb      	b.n	800c444 <_dtoa_r+0x96c>
 800c64c:	9a08      	ldr	r2, [sp, #32]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d1a5      	bne.n	800c59e <_dtoa_r+0xac6>
 800c652:	2331      	movs	r3, #49	; 0x31
 800c654:	f109 0901 	add.w	r9, r9, #1
 800c658:	7013      	strb	r3, [r2, #0]
 800c65a:	e6f3      	b.n	800c444 <_dtoa_r+0x96c>
 800c65c:	4b13      	ldr	r3, [pc, #76]	; (800c6ac <_dtoa_r+0xbd4>)
 800c65e:	f7ff baa7 	b.w	800bbb0 <_dtoa_r+0xd8>
 800c662:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c664:	2b00      	cmp	r3, #0
 800c666:	f47f aa80 	bne.w	800bb6a <_dtoa_r+0x92>
 800c66a:	4b11      	ldr	r3, [pc, #68]	; (800c6b0 <_dtoa_r+0xbd8>)
 800c66c:	f7ff baa0 	b.w	800bbb0 <_dtoa_r+0xd8>
 800c670:	f1bb 0f00 	cmp.w	fp, #0
 800c674:	dc03      	bgt.n	800c67e <_dtoa_r+0xba6>
 800c676:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c678:	2b02      	cmp	r3, #2
 800c67a:	f73f aecc 	bgt.w	800c416 <_dtoa_r+0x93e>
 800c67e:	9f08      	ldr	r7, [sp, #32]
 800c680:	4621      	mov	r1, r4
 800c682:	4650      	mov	r0, sl
 800c684:	f7ff f998 	bl	800b9b8 <quorem>
 800c688:	9a08      	ldr	r2, [sp, #32]
 800c68a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c68e:	f807 3b01 	strb.w	r3, [r7], #1
 800c692:	1aba      	subs	r2, r7, r2
 800c694:	4593      	cmp	fp, r2
 800c696:	ddb9      	ble.n	800c60c <_dtoa_r+0xb34>
 800c698:	4651      	mov	r1, sl
 800c69a:	2300      	movs	r3, #0
 800c69c:	220a      	movs	r2, #10
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f000 fc02 	bl	800cea8 <__multadd>
 800c6a4:	4682      	mov	sl, r0
 800c6a6:	e7eb      	b.n	800c680 <_dtoa_r+0xba8>
 800c6a8:	0800ede4 	.word	0x0800ede4
 800c6ac:	0800ebe4 	.word	0x0800ebe4
 800c6b0:	0800ed61 	.word	0x0800ed61

0800c6b4 <__errno>:
 800c6b4:	4b01      	ldr	r3, [pc, #4]	; (800c6bc <__errno+0x8>)
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	20000014 	.word	0x20000014

0800c6c0 <rshift>:
 800c6c0:	6903      	ldr	r3, [r0, #16]
 800c6c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c6ca:	f100 0414 	add.w	r4, r0, #20
 800c6ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c6d2:	dd46      	ble.n	800c762 <rshift+0xa2>
 800c6d4:	f011 011f 	ands.w	r1, r1, #31
 800c6d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c6dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c6e0:	d10c      	bne.n	800c6fc <rshift+0x3c>
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	f100 0710 	add.w	r7, r0, #16
 800c6e8:	42b1      	cmp	r1, r6
 800c6ea:	d335      	bcc.n	800c758 <rshift+0x98>
 800c6ec:	1a9b      	subs	r3, r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	1eea      	subs	r2, r5, #3
 800c6f2:	4296      	cmp	r6, r2
 800c6f4:	bf38      	it	cc
 800c6f6:	2300      	movcc	r3, #0
 800c6f8:	4423      	add	r3, r4
 800c6fa:	e015      	b.n	800c728 <rshift+0x68>
 800c6fc:	46a1      	mov	r9, r4
 800c6fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c702:	f1c1 0820 	rsb	r8, r1, #32
 800c706:	40cf      	lsrs	r7, r1
 800c708:	f105 0e04 	add.w	lr, r5, #4
 800c70c:	4576      	cmp	r6, lr
 800c70e:	46f4      	mov	ip, lr
 800c710:	d816      	bhi.n	800c740 <rshift+0x80>
 800c712:	1a9b      	subs	r3, r3, r2
 800c714:	009a      	lsls	r2, r3, #2
 800c716:	3a04      	subs	r2, #4
 800c718:	3501      	adds	r5, #1
 800c71a:	42ae      	cmp	r6, r5
 800c71c:	bf38      	it	cc
 800c71e:	2200      	movcc	r2, #0
 800c720:	18a3      	adds	r3, r4, r2
 800c722:	50a7      	str	r7, [r4, r2]
 800c724:	b107      	cbz	r7, 800c728 <rshift+0x68>
 800c726:	3304      	adds	r3, #4
 800c728:	42a3      	cmp	r3, r4
 800c72a:	eba3 0204 	sub.w	r2, r3, r4
 800c72e:	bf08      	it	eq
 800c730:	2300      	moveq	r3, #0
 800c732:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c736:	6102      	str	r2, [r0, #16]
 800c738:	bf08      	it	eq
 800c73a:	6143      	streq	r3, [r0, #20]
 800c73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c740:	f8dc c000 	ldr.w	ip, [ip]
 800c744:	fa0c fc08 	lsl.w	ip, ip, r8
 800c748:	ea4c 0707 	orr.w	r7, ip, r7
 800c74c:	f849 7b04 	str.w	r7, [r9], #4
 800c750:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c754:	40cf      	lsrs	r7, r1
 800c756:	e7d9      	b.n	800c70c <rshift+0x4c>
 800c758:	f851 cb04 	ldr.w	ip, [r1], #4
 800c75c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c760:	e7c2      	b.n	800c6e8 <rshift+0x28>
 800c762:	4623      	mov	r3, r4
 800c764:	e7e0      	b.n	800c728 <rshift+0x68>

0800c766 <__hexdig_fun>:
 800c766:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c76a:	2b09      	cmp	r3, #9
 800c76c:	d802      	bhi.n	800c774 <__hexdig_fun+0xe>
 800c76e:	3820      	subs	r0, #32
 800c770:	b2c0      	uxtb	r0, r0
 800c772:	4770      	bx	lr
 800c774:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c778:	2b05      	cmp	r3, #5
 800c77a:	d801      	bhi.n	800c780 <__hexdig_fun+0x1a>
 800c77c:	3847      	subs	r0, #71	; 0x47
 800c77e:	e7f7      	b.n	800c770 <__hexdig_fun+0xa>
 800c780:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c784:	2b05      	cmp	r3, #5
 800c786:	d801      	bhi.n	800c78c <__hexdig_fun+0x26>
 800c788:	3827      	subs	r0, #39	; 0x27
 800c78a:	e7f1      	b.n	800c770 <__hexdig_fun+0xa>
 800c78c:	2000      	movs	r0, #0
 800c78e:	4770      	bx	lr

0800c790 <__gethex>:
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	b08b      	sub	sp, #44	; 0x2c
 800c796:	9306      	str	r3, [sp, #24]
 800c798:	4bb9      	ldr	r3, [pc, #740]	; (800ca80 <__gethex+0x2f0>)
 800c79a:	9002      	str	r0, [sp, #8]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	468b      	mov	fp, r1
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	4690      	mov	r8, r2
 800c7a4:	9303      	str	r3, [sp, #12]
 800c7a6:	f7f3 fceb 	bl	8000180 <strlen>
 800c7aa:	4682      	mov	sl, r0
 800c7ac:	9b03      	ldr	r3, [sp, #12]
 800c7ae:	f8db 2000 	ldr.w	r2, [fp]
 800c7b2:	4403      	add	r3, r0
 800c7b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c7b8:	9307      	str	r3, [sp, #28]
 800c7ba:	1c93      	adds	r3, r2, #2
 800c7bc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c7c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c7c4:	32fe      	adds	r2, #254	; 0xfe
 800c7c6:	18d1      	adds	r1, r2, r3
 800c7c8:	461f      	mov	r7, r3
 800c7ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c7ce:	9101      	str	r1, [sp, #4]
 800c7d0:	2830      	cmp	r0, #48	; 0x30
 800c7d2:	d0f8      	beq.n	800c7c6 <__gethex+0x36>
 800c7d4:	f7ff ffc7 	bl	800c766 <__hexdig_fun>
 800c7d8:	4604      	mov	r4, r0
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d13a      	bne.n	800c854 <__gethex+0xc4>
 800c7de:	4652      	mov	r2, sl
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	9903      	ldr	r1, [sp, #12]
 800c7e4:	f001 f9dc 	bl	800dba0 <strncmp>
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d166      	bne.n	800c8bc <__gethex+0x12c>
 800c7ee:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c7f2:	eb07 060a 	add.w	r6, r7, sl
 800c7f6:	f7ff ffb6 	bl	800c766 <__hexdig_fun>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d060      	beq.n	800c8c0 <__gethex+0x130>
 800c7fe:	4633      	mov	r3, r6
 800c800:	7818      	ldrb	r0, [r3, #0]
 800c802:	461f      	mov	r7, r3
 800c804:	2830      	cmp	r0, #48	; 0x30
 800c806:	f103 0301 	add.w	r3, r3, #1
 800c80a:	d0f9      	beq.n	800c800 <__gethex+0x70>
 800c80c:	f7ff ffab 	bl	800c766 <__hexdig_fun>
 800c810:	2301      	movs	r3, #1
 800c812:	fab0 f480 	clz	r4, r0
 800c816:	4635      	mov	r5, r6
 800c818:	0964      	lsrs	r4, r4, #5
 800c81a:	9301      	str	r3, [sp, #4]
 800c81c:	463a      	mov	r2, r7
 800c81e:	4616      	mov	r6, r2
 800c820:	7830      	ldrb	r0, [r6, #0]
 800c822:	3201      	adds	r2, #1
 800c824:	f7ff ff9f 	bl	800c766 <__hexdig_fun>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d1f8      	bne.n	800c81e <__gethex+0x8e>
 800c82c:	4652      	mov	r2, sl
 800c82e:	4630      	mov	r0, r6
 800c830:	9903      	ldr	r1, [sp, #12]
 800c832:	f001 f9b5 	bl	800dba0 <strncmp>
 800c836:	b980      	cbnz	r0, 800c85a <__gethex+0xca>
 800c838:	b94d      	cbnz	r5, 800c84e <__gethex+0xbe>
 800c83a:	eb06 050a 	add.w	r5, r6, sl
 800c83e:	462a      	mov	r2, r5
 800c840:	4616      	mov	r6, r2
 800c842:	7830      	ldrb	r0, [r6, #0]
 800c844:	3201      	adds	r2, #1
 800c846:	f7ff ff8e 	bl	800c766 <__hexdig_fun>
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d1f8      	bne.n	800c840 <__gethex+0xb0>
 800c84e:	1bad      	subs	r5, r5, r6
 800c850:	00ad      	lsls	r5, r5, #2
 800c852:	e004      	b.n	800c85e <__gethex+0xce>
 800c854:	2400      	movs	r4, #0
 800c856:	4625      	mov	r5, r4
 800c858:	e7e0      	b.n	800c81c <__gethex+0x8c>
 800c85a:	2d00      	cmp	r5, #0
 800c85c:	d1f7      	bne.n	800c84e <__gethex+0xbe>
 800c85e:	7833      	ldrb	r3, [r6, #0]
 800c860:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c864:	2b50      	cmp	r3, #80	; 0x50
 800c866:	d139      	bne.n	800c8dc <__gethex+0x14c>
 800c868:	7873      	ldrb	r3, [r6, #1]
 800c86a:	2b2b      	cmp	r3, #43	; 0x2b
 800c86c:	d02a      	beq.n	800c8c4 <__gethex+0x134>
 800c86e:	2b2d      	cmp	r3, #45	; 0x2d
 800c870:	d02c      	beq.n	800c8cc <__gethex+0x13c>
 800c872:	f04f 0900 	mov.w	r9, #0
 800c876:	1c71      	adds	r1, r6, #1
 800c878:	7808      	ldrb	r0, [r1, #0]
 800c87a:	f7ff ff74 	bl	800c766 <__hexdig_fun>
 800c87e:	1e43      	subs	r3, r0, #1
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b18      	cmp	r3, #24
 800c884:	d82a      	bhi.n	800c8dc <__gethex+0x14c>
 800c886:	f1a0 0210 	sub.w	r2, r0, #16
 800c88a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c88e:	f7ff ff6a 	bl	800c766 <__hexdig_fun>
 800c892:	1e43      	subs	r3, r0, #1
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b18      	cmp	r3, #24
 800c898:	d91b      	bls.n	800c8d2 <__gethex+0x142>
 800c89a:	f1b9 0f00 	cmp.w	r9, #0
 800c89e:	d000      	beq.n	800c8a2 <__gethex+0x112>
 800c8a0:	4252      	negs	r2, r2
 800c8a2:	4415      	add	r5, r2
 800c8a4:	f8cb 1000 	str.w	r1, [fp]
 800c8a8:	b1d4      	cbz	r4, 800c8e0 <__gethex+0x150>
 800c8aa:	9b01      	ldr	r3, [sp, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	bf14      	ite	ne
 800c8b0:	2700      	movne	r7, #0
 800c8b2:	2706      	moveq	r7, #6
 800c8b4:	4638      	mov	r0, r7
 800c8b6:	b00b      	add	sp, #44	; 0x2c
 800c8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8bc:	463e      	mov	r6, r7
 800c8be:	4625      	mov	r5, r4
 800c8c0:	2401      	movs	r4, #1
 800c8c2:	e7cc      	b.n	800c85e <__gethex+0xce>
 800c8c4:	f04f 0900 	mov.w	r9, #0
 800c8c8:	1cb1      	adds	r1, r6, #2
 800c8ca:	e7d5      	b.n	800c878 <__gethex+0xe8>
 800c8cc:	f04f 0901 	mov.w	r9, #1
 800c8d0:	e7fa      	b.n	800c8c8 <__gethex+0x138>
 800c8d2:	230a      	movs	r3, #10
 800c8d4:	fb03 0202 	mla	r2, r3, r2, r0
 800c8d8:	3a10      	subs	r2, #16
 800c8da:	e7d6      	b.n	800c88a <__gethex+0xfa>
 800c8dc:	4631      	mov	r1, r6
 800c8de:	e7e1      	b.n	800c8a4 <__gethex+0x114>
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	1bf3      	subs	r3, r6, r7
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	2b07      	cmp	r3, #7
 800c8e8:	dc0a      	bgt.n	800c900 <__gethex+0x170>
 800c8ea:	9802      	ldr	r0, [sp, #8]
 800c8ec:	f000 fa7a 	bl	800cde4 <_Balloc>
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	b940      	cbnz	r0, 800c906 <__gethex+0x176>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	21de      	movs	r1, #222	; 0xde
 800c8f8:	4b62      	ldr	r3, [pc, #392]	; (800ca84 <__gethex+0x2f4>)
 800c8fa:	4863      	ldr	r0, [pc, #396]	; (800ca88 <__gethex+0x2f8>)
 800c8fc:	f001 f970 	bl	800dbe0 <__assert_func>
 800c900:	3101      	adds	r1, #1
 800c902:	105b      	asrs	r3, r3, #1
 800c904:	e7ef      	b.n	800c8e6 <__gethex+0x156>
 800c906:	f04f 0b00 	mov.w	fp, #0
 800c90a:	f100 0914 	add.w	r9, r0, #20
 800c90e:	f1ca 0301 	rsb	r3, sl, #1
 800c912:	f8cd 9010 	str.w	r9, [sp, #16]
 800c916:	f8cd b004 	str.w	fp, [sp, #4]
 800c91a:	9308      	str	r3, [sp, #32]
 800c91c:	42b7      	cmp	r7, r6
 800c91e:	d33f      	bcc.n	800c9a0 <__gethex+0x210>
 800c920:	9f04      	ldr	r7, [sp, #16]
 800c922:	9b01      	ldr	r3, [sp, #4]
 800c924:	f847 3b04 	str.w	r3, [r7], #4
 800c928:	eba7 0709 	sub.w	r7, r7, r9
 800c92c:	10bf      	asrs	r7, r7, #2
 800c92e:	6127      	str	r7, [r4, #16]
 800c930:	4618      	mov	r0, r3
 800c932:	f000 fb4d 	bl	800cfd0 <__hi0bits>
 800c936:	017f      	lsls	r7, r7, #5
 800c938:	f8d8 6000 	ldr.w	r6, [r8]
 800c93c:	1a3f      	subs	r7, r7, r0
 800c93e:	42b7      	cmp	r7, r6
 800c940:	dd62      	ble.n	800ca08 <__gethex+0x278>
 800c942:	1bbf      	subs	r7, r7, r6
 800c944:	4639      	mov	r1, r7
 800c946:	4620      	mov	r0, r4
 800c948:	f000 fee3 	bl	800d712 <__any_on>
 800c94c:	4682      	mov	sl, r0
 800c94e:	b1a8      	cbz	r0, 800c97c <__gethex+0x1ec>
 800c950:	f04f 0a01 	mov.w	sl, #1
 800c954:	1e7b      	subs	r3, r7, #1
 800c956:	1159      	asrs	r1, r3, #5
 800c958:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c95c:	f003 021f 	and.w	r2, r3, #31
 800c960:	fa0a f202 	lsl.w	r2, sl, r2
 800c964:	420a      	tst	r2, r1
 800c966:	d009      	beq.n	800c97c <__gethex+0x1ec>
 800c968:	4553      	cmp	r3, sl
 800c96a:	dd05      	ble.n	800c978 <__gethex+0x1e8>
 800c96c:	4620      	mov	r0, r4
 800c96e:	1eb9      	subs	r1, r7, #2
 800c970:	f000 fecf 	bl	800d712 <__any_on>
 800c974:	2800      	cmp	r0, #0
 800c976:	d144      	bne.n	800ca02 <__gethex+0x272>
 800c978:	f04f 0a02 	mov.w	sl, #2
 800c97c:	4639      	mov	r1, r7
 800c97e:	4620      	mov	r0, r4
 800c980:	f7ff fe9e 	bl	800c6c0 <rshift>
 800c984:	443d      	add	r5, r7
 800c986:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c98a:	42ab      	cmp	r3, r5
 800c98c:	da4a      	bge.n	800ca24 <__gethex+0x294>
 800c98e:	4621      	mov	r1, r4
 800c990:	9802      	ldr	r0, [sp, #8]
 800c992:	f000 fa67 	bl	800ce64 <_Bfree>
 800c996:	2300      	movs	r3, #0
 800c998:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c99a:	27a3      	movs	r7, #163	; 0xa3
 800c99c:	6013      	str	r3, [r2, #0]
 800c99e:	e789      	b.n	800c8b4 <__gethex+0x124>
 800c9a0:	1e73      	subs	r3, r6, #1
 800c9a2:	9a07      	ldr	r2, [sp, #28]
 800c9a4:	9305      	str	r3, [sp, #20]
 800c9a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d019      	beq.n	800c9e2 <__gethex+0x252>
 800c9ae:	f1bb 0f20 	cmp.w	fp, #32
 800c9b2:	d107      	bne.n	800c9c4 <__gethex+0x234>
 800c9b4:	9b04      	ldr	r3, [sp, #16]
 800c9b6:	9a01      	ldr	r2, [sp, #4]
 800c9b8:	f843 2b04 	str.w	r2, [r3], #4
 800c9bc:	9304      	str	r3, [sp, #16]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	469b      	mov	fp, r3
 800c9c2:	9301      	str	r3, [sp, #4]
 800c9c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c9c8:	f7ff fecd 	bl	800c766 <__hexdig_fun>
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	f000 000f 	and.w	r0, r0, #15
 800c9d2:	fa00 f00b 	lsl.w	r0, r0, fp
 800c9d6:	4303      	orrs	r3, r0
 800c9d8:	9301      	str	r3, [sp, #4]
 800c9da:	f10b 0b04 	add.w	fp, fp, #4
 800c9de:	9b05      	ldr	r3, [sp, #20]
 800c9e0:	e00d      	b.n	800c9fe <__gethex+0x26e>
 800c9e2:	9b05      	ldr	r3, [sp, #20]
 800c9e4:	9a08      	ldr	r2, [sp, #32]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	42bb      	cmp	r3, r7
 800c9ea:	d3e0      	bcc.n	800c9ae <__gethex+0x21e>
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	4652      	mov	r2, sl
 800c9f0:	9903      	ldr	r1, [sp, #12]
 800c9f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f4:	f001 f8d4 	bl	800dba0 <strncmp>
 800c9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d1d7      	bne.n	800c9ae <__gethex+0x21e>
 800c9fe:	461e      	mov	r6, r3
 800ca00:	e78c      	b.n	800c91c <__gethex+0x18c>
 800ca02:	f04f 0a03 	mov.w	sl, #3
 800ca06:	e7b9      	b.n	800c97c <__gethex+0x1ec>
 800ca08:	da09      	bge.n	800ca1e <__gethex+0x28e>
 800ca0a:	1bf7      	subs	r7, r6, r7
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	463a      	mov	r2, r7
 800ca10:	9802      	ldr	r0, [sp, #8]
 800ca12:	f000 fc3f 	bl	800d294 <__lshift>
 800ca16:	4604      	mov	r4, r0
 800ca18:	1bed      	subs	r5, r5, r7
 800ca1a:	f100 0914 	add.w	r9, r0, #20
 800ca1e:	f04f 0a00 	mov.w	sl, #0
 800ca22:	e7b0      	b.n	800c986 <__gethex+0x1f6>
 800ca24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ca28:	42a8      	cmp	r0, r5
 800ca2a:	dd71      	ble.n	800cb10 <__gethex+0x380>
 800ca2c:	1b45      	subs	r5, r0, r5
 800ca2e:	42ae      	cmp	r6, r5
 800ca30:	dc34      	bgt.n	800ca9c <__gethex+0x30c>
 800ca32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d028      	beq.n	800ca8c <__gethex+0x2fc>
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d02a      	beq.n	800ca94 <__gethex+0x304>
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d115      	bne.n	800ca6e <__gethex+0x2de>
 800ca42:	42ae      	cmp	r6, r5
 800ca44:	d113      	bne.n	800ca6e <__gethex+0x2de>
 800ca46:	2e01      	cmp	r6, #1
 800ca48:	d10b      	bne.n	800ca62 <__gethex+0x2d2>
 800ca4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca4e:	9a06      	ldr	r2, [sp, #24]
 800ca50:	2762      	movs	r7, #98	; 0x62
 800ca52:	6013      	str	r3, [r2, #0]
 800ca54:	2301      	movs	r3, #1
 800ca56:	6123      	str	r3, [r4, #16]
 800ca58:	f8c9 3000 	str.w	r3, [r9]
 800ca5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca5e:	601c      	str	r4, [r3, #0]
 800ca60:	e728      	b.n	800c8b4 <__gethex+0x124>
 800ca62:	4620      	mov	r0, r4
 800ca64:	1e71      	subs	r1, r6, #1
 800ca66:	f000 fe54 	bl	800d712 <__any_on>
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	d1ed      	bne.n	800ca4a <__gethex+0x2ba>
 800ca6e:	4621      	mov	r1, r4
 800ca70:	9802      	ldr	r0, [sp, #8]
 800ca72:	f000 f9f7 	bl	800ce64 <_Bfree>
 800ca76:	2300      	movs	r3, #0
 800ca78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca7a:	2750      	movs	r7, #80	; 0x50
 800ca7c:	6013      	str	r3, [r2, #0]
 800ca7e:	e719      	b.n	800c8b4 <__gethex+0x124>
 800ca80:	0800ee60 	.word	0x0800ee60
 800ca84:	0800ede4 	.word	0x0800ede4
 800ca88:	0800edf5 	.word	0x0800edf5
 800ca8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1ed      	bne.n	800ca6e <__gethex+0x2de>
 800ca92:	e7da      	b.n	800ca4a <__gethex+0x2ba>
 800ca94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1d7      	bne.n	800ca4a <__gethex+0x2ba>
 800ca9a:	e7e8      	b.n	800ca6e <__gethex+0x2de>
 800ca9c:	1e6f      	subs	r7, r5, #1
 800ca9e:	f1ba 0f00 	cmp.w	sl, #0
 800caa2:	d132      	bne.n	800cb0a <__gethex+0x37a>
 800caa4:	b127      	cbz	r7, 800cab0 <__gethex+0x320>
 800caa6:	4639      	mov	r1, r7
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 fe32 	bl	800d712 <__any_on>
 800caae:	4682      	mov	sl, r0
 800cab0:	2101      	movs	r1, #1
 800cab2:	117b      	asrs	r3, r7, #5
 800cab4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cab8:	f007 071f 	and.w	r7, r7, #31
 800cabc:	fa01 f707 	lsl.w	r7, r1, r7
 800cac0:	421f      	tst	r7, r3
 800cac2:	f04f 0702 	mov.w	r7, #2
 800cac6:	4629      	mov	r1, r5
 800cac8:	4620      	mov	r0, r4
 800caca:	bf18      	it	ne
 800cacc:	f04a 0a02 	orrne.w	sl, sl, #2
 800cad0:	1b76      	subs	r6, r6, r5
 800cad2:	f7ff fdf5 	bl	800c6c0 <rshift>
 800cad6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cada:	f1ba 0f00 	cmp.w	sl, #0
 800cade:	d048      	beq.n	800cb72 <__gethex+0x3e2>
 800cae0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d015      	beq.n	800cb14 <__gethex+0x384>
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d017      	beq.n	800cb1c <__gethex+0x38c>
 800caec:	2b01      	cmp	r3, #1
 800caee:	d109      	bne.n	800cb04 <__gethex+0x374>
 800caf0:	f01a 0f02 	tst.w	sl, #2
 800caf4:	d006      	beq.n	800cb04 <__gethex+0x374>
 800caf6:	f8d9 0000 	ldr.w	r0, [r9]
 800cafa:	ea4a 0a00 	orr.w	sl, sl, r0
 800cafe:	f01a 0f01 	tst.w	sl, #1
 800cb02:	d10e      	bne.n	800cb22 <__gethex+0x392>
 800cb04:	f047 0710 	orr.w	r7, r7, #16
 800cb08:	e033      	b.n	800cb72 <__gethex+0x3e2>
 800cb0a:	f04f 0a01 	mov.w	sl, #1
 800cb0e:	e7cf      	b.n	800cab0 <__gethex+0x320>
 800cb10:	2701      	movs	r7, #1
 800cb12:	e7e2      	b.n	800cada <__gethex+0x34a>
 800cb14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb16:	f1c3 0301 	rsb	r3, r3, #1
 800cb1a:	9315      	str	r3, [sp, #84]	; 0x54
 800cb1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d0f0      	beq.n	800cb04 <__gethex+0x374>
 800cb22:	f04f 0c00 	mov.w	ip, #0
 800cb26:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb2a:	f104 0314 	add.w	r3, r4, #20
 800cb2e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cb32:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cb36:	4618      	mov	r0, r3
 800cb38:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb40:	d01c      	beq.n	800cb7c <__gethex+0x3ec>
 800cb42:	3201      	adds	r2, #1
 800cb44:	6002      	str	r2, [r0, #0]
 800cb46:	2f02      	cmp	r7, #2
 800cb48:	f104 0314 	add.w	r3, r4, #20
 800cb4c:	d13d      	bne.n	800cbca <__gethex+0x43a>
 800cb4e:	f8d8 2000 	ldr.w	r2, [r8]
 800cb52:	3a01      	subs	r2, #1
 800cb54:	42b2      	cmp	r2, r6
 800cb56:	d10a      	bne.n	800cb6e <__gethex+0x3de>
 800cb58:	2201      	movs	r2, #1
 800cb5a:	1171      	asrs	r1, r6, #5
 800cb5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb60:	f006 061f 	and.w	r6, r6, #31
 800cb64:	fa02 f606 	lsl.w	r6, r2, r6
 800cb68:	421e      	tst	r6, r3
 800cb6a:	bf18      	it	ne
 800cb6c:	4617      	movne	r7, r2
 800cb6e:	f047 0720 	orr.w	r7, r7, #32
 800cb72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb74:	601c      	str	r4, [r3, #0]
 800cb76:	9b06      	ldr	r3, [sp, #24]
 800cb78:	601d      	str	r5, [r3, #0]
 800cb7a:	e69b      	b.n	800c8b4 <__gethex+0x124>
 800cb7c:	4299      	cmp	r1, r3
 800cb7e:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb82:	d8d8      	bhi.n	800cb36 <__gethex+0x3a6>
 800cb84:	68a3      	ldr	r3, [r4, #8]
 800cb86:	459b      	cmp	fp, r3
 800cb88:	db17      	blt.n	800cbba <__gethex+0x42a>
 800cb8a:	6861      	ldr	r1, [r4, #4]
 800cb8c:	9802      	ldr	r0, [sp, #8]
 800cb8e:	3101      	adds	r1, #1
 800cb90:	f000 f928 	bl	800cde4 <_Balloc>
 800cb94:	4681      	mov	r9, r0
 800cb96:	b918      	cbnz	r0, 800cba0 <__gethex+0x410>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	2184      	movs	r1, #132	; 0x84
 800cb9c:	4b19      	ldr	r3, [pc, #100]	; (800cc04 <__gethex+0x474>)
 800cb9e:	e6ac      	b.n	800c8fa <__gethex+0x16a>
 800cba0:	6922      	ldr	r2, [r4, #16]
 800cba2:	f104 010c 	add.w	r1, r4, #12
 800cba6:	3202      	adds	r2, #2
 800cba8:	0092      	lsls	r2, r2, #2
 800cbaa:	300c      	adds	r0, #12
 800cbac:	f7fd f96e 	bl	8009e8c <memcpy>
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	9802      	ldr	r0, [sp, #8]
 800cbb4:	f000 f956 	bl	800ce64 <_Bfree>
 800cbb8:	464c      	mov	r4, r9
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	1c5a      	adds	r2, r3, #1
 800cbbe:	6122      	str	r2, [r4, #16]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbc6:	615a      	str	r2, [r3, #20]
 800cbc8:	e7bd      	b.n	800cb46 <__gethex+0x3b6>
 800cbca:	6922      	ldr	r2, [r4, #16]
 800cbcc:	455a      	cmp	r2, fp
 800cbce:	dd0b      	ble.n	800cbe8 <__gethex+0x458>
 800cbd0:	2101      	movs	r1, #1
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f7ff fd74 	bl	800c6c0 <rshift>
 800cbd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbdc:	3501      	adds	r5, #1
 800cbde:	42ab      	cmp	r3, r5
 800cbe0:	f6ff aed5 	blt.w	800c98e <__gethex+0x1fe>
 800cbe4:	2701      	movs	r7, #1
 800cbe6:	e7c2      	b.n	800cb6e <__gethex+0x3de>
 800cbe8:	f016 061f 	ands.w	r6, r6, #31
 800cbec:	d0fa      	beq.n	800cbe4 <__gethex+0x454>
 800cbee:	449a      	add	sl, r3
 800cbf0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cbf4:	f000 f9ec 	bl	800cfd0 <__hi0bits>
 800cbf8:	f1c6 0620 	rsb	r6, r6, #32
 800cbfc:	42b0      	cmp	r0, r6
 800cbfe:	dbe7      	blt.n	800cbd0 <__gethex+0x440>
 800cc00:	e7f0      	b.n	800cbe4 <__gethex+0x454>
 800cc02:	bf00      	nop
 800cc04:	0800ede4 	.word	0x0800ede4

0800cc08 <L_shift>:
 800cc08:	f1c2 0208 	rsb	r2, r2, #8
 800cc0c:	0092      	lsls	r2, r2, #2
 800cc0e:	b570      	push	{r4, r5, r6, lr}
 800cc10:	f1c2 0620 	rsb	r6, r2, #32
 800cc14:	6843      	ldr	r3, [r0, #4]
 800cc16:	6804      	ldr	r4, [r0, #0]
 800cc18:	fa03 f506 	lsl.w	r5, r3, r6
 800cc1c:	432c      	orrs	r4, r5
 800cc1e:	40d3      	lsrs	r3, r2
 800cc20:	6004      	str	r4, [r0, #0]
 800cc22:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc26:	4288      	cmp	r0, r1
 800cc28:	d3f4      	bcc.n	800cc14 <L_shift+0xc>
 800cc2a:	bd70      	pop	{r4, r5, r6, pc}

0800cc2c <__match>:
 800cc2c:	b530      	push	{r4, r5, lr}
 800cc2e:	6803      	ldr	r3, [r0, #0]
 800cc30:	3301      	adds	r3, #1
 800cc32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc36:	b914      	cbnz	r4, 800cc3e <__match+0x12>
 800cc38:	6003      	str	r3, [r0, #0]
 800cc3a:	2001      	movs	r0, #1
 800cc3c:	bd30      	pop	{r4, r5, pc}
 800cc3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cc46:	2d19      	cmp	r5, #25
 800cc48:	bf98      	it	ls
 800cc4a:	3220      	addls	r2, #32
 800cc4c:	42a2      	cmp	r2, r4
 800cc4e:	d0f0      	beq.n	800cc32 <__match+0x6>
 800cc50:	2000      	movs	r0, #0
 800cc52:	e7f3      	b.n	800cc3c <__match+0x10>

0800cc54 <__hexnan>:
 800cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	2500      	movs	r5, #0
 800cc5a:	680b      	ldr	r3, [r1, #0]
 800cc5c:	4682      	mov	sl, r0
 800cc5e:	115e      	asrs	r6, r3, #5
 800cc60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc64:	f013 031f 	ands.w	r3, r3, #31
 800cc68:	bf18      	it	ne
 800cc6a:	3604      	addne	r6, #4
 800cc6c:	1f37      	subs	r7, r6, #4
 800cc6e:	4690      	mov	r8, r2
 800cc70:	46b9      	mov	r9, r7
 800cc72:	463c      	mov	r4, r7
 800cc74:	46ab      	mov	fp, r5
 800cc76:	b087      	sub	sp, #28
 800cc78:	6801      	ldr	r1, [r0, #0]
 800cc7a:	9301      	str	r3, [sp, #4]
 800cc7c:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc80:	9502      	str	r5, [sp, #8]
 800cc82:	784a      	ldrb	r2, [r1, #1]
 800cc84:	1c4b      	adds	r3, r1, #1
 800cc86:	9303      	str	r3, [sp, #12]
 800cc88:	b342      	cbz	r2, 800ccdc <__hexnan+0x88>
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	9105      	str	r1, [sp, #20]
 800cc8e:	9204      	str	r2, [sp, #16]
 800cc90:	f7ff fd69 	bl	800c766 <__hexdig_fun>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d14f      	bne.n	800cd38 <__hexnan+0xe4>
 800cc98:	9a04      	ldr	r2, [sp, #16]
 800cc9a:	9905      	ldr	r1, [sp, #20]
 800cc9c:	2a20      	cmp	r2, #32
 800cc9e:	d818      	bhi.n	800ccd2 <__hexnan+0x7e>
 800cca0:	9b02      	ldr	r3, [sp, #8]
 800cca2:	459b      	cmp	fp, r3
 800cca4:	dd13      	ble.n	800ccce <__hexnan+0x7a>
 800cca6:	454c      	cmp	r4, r9
 800cca8:	d206      	bcs.n	800ccb8 <__hexnan+0x64>
 800ccaa:	2d07      	cmp	r5, #7
 800ccac:	dc04      	bgt.n	800ccb8 <__hexnan+0x64>
 800ccae:	462a      	mov	r2, r5
 800ccb0:	4649      	mov	r1, r9
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f7ff ffa8 	bl	800cc08 <L_shift>
 800ccb8:	4544      	cmp	r4, r8
 800ccba:	d950      	bls.n	800cd5e <__hexnan+0x10a>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	f1a4 0904 	sub.w	r9, r4, #4
 800ccc2:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccc6:	461d      	mov	r5, r3
 800ccc8:	464c      	mov	r4, r9
 800ccca:	f8cd b008 	str.w	fp, [sp, #8]
 800ccce:	9903      	ldr	r1, [sp, #12]
 800ccd0:	e7d7      	b.n	800cc82 <__hexnan+0x2e>
 800ccd2:	2a29      	cmp	r2, #41	; 0x29
 800ccd4:	d156      	bne.n	800cd84 <__hexnan+0x130>
 800ccd6:	3102      	adds	r1, #2
 800ccd8:	f8ca 1000 	str.w	r1, [sl]
 800ccdc:	f1bb 0f00 	cmp.w	fp, #0
 800cce0:	d050      	beq.n	800cd84 <__hexnan+0x130>
 800cce2:	454c      	cmp	r4, r9
 800cce4:	d206      	bcs.n	800ccf4 <__hexnan+0xa0>
 800cce6:	2d07      	cmp	r5, #7
 800cce8:	dc04      	bgt.n	800ccf4 <__hexnan+0xa0>
 800ccea:	462a      	mov	r2, r5
 800ccec:	4649      	mov	r1, r9
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f7ff ff8a 	bl	800cc08 <L_shift>
 800ccf4:	4544      	cmp	r4, r8
 800ccf6:	d934      	bls.n	800cd62 <__hexnan+0x10e>
 800ccf8:	4623      	mov	r3, r4
 800ccfa:	f1a8 0204 	sub.w	r2, r8, #4
 800ccfe:	f853 1b04 	ldr.w	r1, [r3], #4
 800cd02:	429f      	cmp	r7, r3
 800cd04:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd08:	d2f9      	bcs.n	800ccfe <__hexnan+0xaa>
 800cd0a:	1b3b      	subs	r3, r7, r4
 800cd0c:	f023 0303 	bic.w	r3, r3, #3
 800cd10:	3304      	adds	r3, #4
 800cd12:	3401      	adds	r4, #1
 800cd14:	3e03      	subs	r6, #3
 800cd16:	42b4      	cmp	r4, r6
 800cd18:	bf88      	it	hi
 800cd1a:	2304      	movhi	r3, #4
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	4443      	add	r3, r8
 800cd20:	f843 2b04 	str.w	r2, [r3], #4
 800cd24:	429f      	cmp	r7, r3
 800cd26:	d2fb      	bcs.n	800cd20 <__hexnan+0xcc>
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	b91b      	cbnz	r3, 800cd34 <__hexnan+0xe0>
 800cd2c:	4547      	cmp	r7, r8
 800cd2e:	d127      	bne.n	800cd80 <__hexnan+0x12c>
 800cd30:	2301      	movs	r3, #1
 800cd32:	603b      	str	r3, [r7, #0]
 800cd34:	2005      	movs	r0, #5
 800cd36:	e026      	b.n	800cd86 <__hexnan+0x132>
 800cd38:	3501      	adds	r5, #1
 800cd3a:	2d08      	cmp	r5, #8
 800cd3c:	f10b 0b01 	add.w	fp, fp, #1
 800cd40:	dd06      	ble.n	800cd50 <__hexnan+0xfc>
 800cd42:	4544      	cmp	r4, r8
 800cd44:	d9c3      	bls.n	800ccce <__hexnan+0x7a>
 800cd46:	2300      	movs	r3, #0
 800cd48:	2501      	movs	r5, #1
 800cd4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd4e:	3c04      	subs	r4, #4
 800cd50:	6822      	ldr	r2, [r4, #0]
 800cd52:	f000 000f 	and.w	r0, r0, #15
 800cd56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cd5a:	6022      	str	r2, [r4, #0]
 800cd5c:	e7b7      	b.n	800ccce <__hexnan+0x7a>
 800cd5e:	2508      	movs	r5, #8
 800cd60:	e7b5      	b.n	800ccce <__hexnan+0x7a>
 800cd62:	9b01      	ldr	r3, [sp, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d0df      	beq.n	800cd28 <__hexnan+0xd4>
 800cd68:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6c:	f1c3 0320 	rsb	r3, r3, #32
 800cd70:	fa22 f303 	lsr.w	r3, r2, r3
 800cd74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cd78:	401a      	ands	r2, r3
 800cd7a:	f846 2c04 	str.w	r2, [r6, #-4]
 800cd7e:	e7d3      	b.n	800cd28 <__hexnan+0xd4>
 800cd80:	3f04      	subs	r7, #4
 800cd82:	e7d1      	b.n	800cd28 <__hexnan+0xd4>
 800cd84:	2004      	movs	r0, #4
 800cd86:	b007      	add	sp, #28
 800cd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd8c <_localeconv_r>:
 800cd8c:	4800      	ldr	r0, [pc, #0]	; (800cd90 <_localeconv_r+0x4>)
 800cd8e:	4770      	bx	lr
 800cd90:	2000016c 	.word	0x2000016c

0800cd94 <malloc>:
 800cd94:	4b02      	ldr	r3, [pc, #8]	; (800cda0 <malloc+0xc>)
 800cd96:	4601      	mov	r1, r0
 800cd98:	6818      	ldr	r0, [r3, #0]
 800cd9a:	f000 bd35 	b.w	800d808 <_malloc_r>
 800cd9e:	bf00      	nop
 800cda0:	20000014 	.word	0x20000014

0800cda4 <__ascii_mbtowc>:
 800cda4:	b082      	sub	sp, #8
 800cda6:	b901      	cbnz	r1, 800cdaa <__ascii_mbtowc+0x6>
 800cda8:	a901      	add	r1, sp, #4
 800cdaa:	b142      	cbz	r2, 800cdbe <__ascii_mbtowc+0x1a>
 800cdac:	b14b      	cbz	r3, 800cdc2 <__ascii_mbtowc+0x1e>
 800cdae:	7813      	ldrb	r3, [r2, #0]
 800cdb0:	600b      	str	r3, [r1, #0]
 800cdb2:	7812      	ldrb	r2, [r2, #0]
 800cdb4:	1e10      	subs	r0, r2, #0
 800cdb6:	bf18      	it	ne
 800cdb8:	2001      	movne	r0, #1
 800cdba:	b002      	add	sp, #8
 800cdbc:	4770      	bx	lr
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	e7fb      	b.n	800cdba <__ascii_mbtowc+0x16>
 800cdc2:	f06f 0001 	mvn.w	r0, #1
 800cdc6:	e7f8      	b.n	800cdba <__ascii_mbtowc+0x16>

0800cdc8 <memchr>:
 800cdc8:	4603      	mov	r3, r0
 800cdca:	b510      	push	{r4, lr}
 800cdcc:	b2c9      	uxtb	r1, r1
 800cdce:	4402      	add	r2, r0
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	d101      	bne.n	800cdda <memchr+0x12>
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	e003      	b.n	800cde2 <memchr+0x1a>
 800cdda:	7804      	ldrb	r4, [r0, #0]
 800cddc:	3301      	adds	r3, #1
 800cdde:	428c      	cmp	r4, r1
 800cde0:	d1f6      	bne.n	800cdd0 <memchr+0x8>
 800cde2:	bd10      	pop	{r4, pc}

0800cde4 <_Balloc>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cde8:	4604      	mov	r4, r0
 800cdea:	460d      	mov	r5, r1
 800cdec:	b976      	cbnz	r6, 800ce0c <_Balloc+0x28>
 800cdee:	2010      	movs	r0, #16
 800cdf0:	f7ff ffd0 	bl	800cd94 <malloc>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	6260      	str	r0, [r4, #36]	; 0x24
 800cdf8:	b920      	cbnz	r0, 800ce04 <_Balloc+0x20>
 800cdfa:	2166      	movs	r1, #102	; 0x66
 800cdfc:	4b17      	ldr	r3, [pc, #92]	; (800ce5c <_Balloc+0x78>)
 800cdfe:	4818      	ldr	r0, [pc, #96]	; (800ce60 <_Balloc+0x7c>)
 800ce00:	f000 feee 	bl	800dbe0 <__assert_func>
 800ce04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce08:	6006      	str	r6, [r0, #0]
 800ce0a:	60c6      	str	r6, [r0, #12]
 800ce0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce0e:	68f3      	ldr	r3, [r6, #12]
 800ce10:	b183      	cbz	r3, 800ce34 <_Balloc+0x50>
 800ce12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce1a:	b9b8      	cbnz	r0, 800ce4c <_Balloc+0x68>
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	fa01 f605 	lsl.w	r6, r1, r5
 800ce22:	1d72      	adds	r2, r6, #5
 800ce24:	4620      	mov	r0, r4
 800ce26:	0092      	lsls	r2, r2, #2
 800ce28:	f000 fc94 	bl	800d754 <_calloc_r>
 800ce2c:	b160      	cbz	r0, 800ce48 <_Balloc+0x64>
 800ce2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce32:	e00e      	b.n	800ce52 <_Balloc+0x6e>
 800ce34:	2221      	movs	r2, #33	; 0x21
 800ce36:	2104      	movs	r1, #4
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 fc8b 	bl	800d754 <_calloc_r>
 800ce3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce40:	60f0      	str	r0, [r6, #12]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1e4      	bne.n	800ce12 <_Balloc+0x2e>
 800ce48:	2000      	movs	r0, #0
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	6802      	ldr	r2, [r0, #0]
 800ce4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce52:	2300      	movs	r3, #0
 800ce54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce58:	e7f7      	b.n	800ce4a <_Balloc+0x66>
 800ce5a:	bf00      	nop
 800ce5c:	0800ed6e 	.word	0x0800ed6e
 800ce60:	0800ee74 	.word	0x0800ee74

0800ce64 <_Bfree>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce68:	4605      	mov	r5, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	b976      	cbnz	r6, 800ce8c <_Bfree+0x28>
 800ce6e:	2010      	movs	r0, #16
 800ce70:	f7ff ff90 	bl	800cd94 <malloc>
 800ce74:	4602      	mov	r2, r0
 800ce76:	6268      	str	r0, [r5, #36]	; 0x24
 800ce78:	b920      	cbnz	r0, 800ce84 <_Bfree+0x20>
 800ce7a:	218a      	movs	r1, #138	; 0x8a
 800ce7c:	4b08      	ldr	r3, [pc, #32]	; (800cea0 <_Bfree+0x3c>)
 800ce7e:	4809      	ldr	r0, [pc, #36]	; (800cea4 <_Bfree+0x40>)
 800ce80:	f000 feae 	bl	800dbe0 <__assert_func>
 800ce84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce88:	6006      	str	r6, [r0, #0]
 800ce8a:	60c6      	str	r6, [r0, #12]
 800ce8c:	b13c      	cbz	r4, 800ce9e <_Bfree+0x3a>
 800ce8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce90:	6862      	ldr	r2, [r4, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce98:	6021      	str	r1, [r4, #0]
 800ce9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
 800cea0:	0800ed6e 	.word	0x0800ed6e
 800cea4:	0800ee74 	.word	0x0800ee74

0800cea8 <__multadd>:
 800cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceac:	4698      	mov	r8, r3
 800ceae:	460c      	mov	r4, r1
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	690e      	ldr	r6, [r1, #16]
 800ceb4:	4607      	mov	r7, r0
 800ceb6:	f101 0014 	add.w	r0, r1, #20
 800ceba:	6805      	ldr	r5, [r0, #0]
 800cebc:	3301      	adds	r3, #1
 800cebe:	b2a9      	uxth	r1, r5
 800cec0:	fb02 8101 	mla	r1, r2, r1, r8
 800cec4:	0c2d      	lsrs	r5, r5, #16
 800cec6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ceca:	fb02 c505 	mla	r5, r2, r5, ip
 800cece:	b289      	uxth	r1, r1
 800ced0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ced4:	429e      	cmp	r6, r3
 800ced6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ceda:	f840 1b04 	str.w	r1, [r0], #4
 800cede:	dcec      	bgt.n	800ceba <__multadd+0x12>
 800cee0:	f1b8 0f00 	cmp.w	r8, #0
 800cee4:	d022      	beq.n	800cf2c <__multadd+0x84>
 800cee6:	68a3      	ldr	r3, [r4, #8]
 800cee8:	42b3      	cmp	r3, r6
 800ceea:	dc19      	bgt.n	800cf20 <__multadd+0x78>
 800ceec:	6861      	ldr	r1, [r4, #4]
 800ceee:	4638      	mov	r0, r7
 800cef0:	3101      	adds	r1, #1
 800cef2:	f7ff ff77 	bl	800cde4 <_Balloc>
 800cef6:	4605      	mov	r5, r0
 800cef8:	b928      	cbnz	r0, 800cf06 <__multadd+0x5e>
 800cefa:	4602      	mov	r2, r0
 800cefc:	21b5      	movs	r1, #181	; 0xb5
 800cefe:	4b0d      	ldr	r3, [pc, #52]	; (800cf34 <__multadd+0x8c>)
 800cf00:	480d      	ldr	r0, [pc, #52]	; (800cf38 <__multadd+0x90>)
 800cf02:	f000 fe6d 	bl	800dbe0 <__assert_func>
 800cf06:	6922      	ldr	r2, [r4, #16]
 800cf08:	f104 010c 	add.w	r1, r4, #12
 800cf0c:	3202      	adds	r2, #2
 800cf0e:	0092      	lsls	r2, r2, #2
 800cf10:	300c      	adds	r0, #12
 800cf12:	f7fc ffbb 	bl	8009e8c <memcpy>
 800cf16:	4621      	mov	r1, r4
 800cf18:	4638      	mov	r0, r7
 800cf1a:	f7ff ffa3 	bl	800ce64 <_Bfree>
 800cf1e:	462c      	mov	r4, r5
 800cf20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cf24:	3601      	adds	r6, #1
 800cf26:	f8c3 8014 	str.w	r8, [r3, #20]
 800cf2a:	6126      	str	r6, [r4, #16]
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf32:	bf00      	nop
 800cf34:	0800ede4 	.word	0x0800ede4
 800cf38:	0800ee74 	.word	0x0800ee74

0800cf3c <__s2b>:
 800cf3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf40:	4615      	mov	r5, r2
 800cf42:	2209      	movs	r2, #9
 800cf44:	461f      	mov	r7, r3
 800cf46:	3308      	adds	r3, #8
 800cf48:	460c      	mov	r4, r1
 800cf4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf4e:	4606      	mov	r6, r0
 800cf50:	2201      	movs	r2, #1
 800cf52:	2100      	movs	r1, #0
 800cf54:	429a      	cmp	r2, r3
 800cf56:	db09      	blt.n	800cf6c <__s2b+0x30>
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f7ff ff43 	bl	800cde4 <_Balloc>
 800cf5e:	b940      	cbnz	r0, 800cf72 <__s2b+0x36>
 800cf60:	4602      	mov	r2, r0
 800cf62:	21ce      	movs	r1, #206	; 0xce
 800cf64:	4b18      	ldr	r3, [pc, #96]	; (800cfc8 <__s2b+0x8c>)
 800cf66:	4819      	ldr	r0, [pc, #100]	; (800cfcc <__s2b+0x90>)
 800cf68:	f000 fe3a 	bl	800dbe0 <__assert_func>
 800cf6c:	0052      	lsls	r2, r2, #1
 800cf6e:	3101      	adds	r1, #1
 800cf70:	e7f0      	b.n	800cf54 <__s2b+0x18>
 800cf72:	9b08      	ldr	r3, [sp, #32]
 800cf74:	2d09      	cmp	r5, #9
 800cf76:	6143      	str	r3, [r0, #20]
 800cf78:	f04f 0301 	mov.w	r3, #1
 800cf7c:	6103      	str	r3, [r0, #16]
 800cf7e:	dd16      	ble.n	800cfae <__s2b+0x72>
 800cf80:	f104 0909 	add.w	r9, r4, #9
 800cf84:	46c8      	mov	r8, r9
 800cf86:	442c      	add	r4, r5
 800cf88:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf8c:	4601      	mov	r1, r0
 800cf8e:	220a      	movs	r2, #10
 800cf90:	4630      	mov	r0, r6
 800cf92:	3b30      	subs	r3, #48	; 0x30
 800cf94:	f7ff ff88 	bl	800cea8 <__multadd>
 800cf98:	45a0      	cmp	r8, r4
 800cf9a:	d1f5      	bne.n	800cf88 <__s2b+0x4c>
 800cf9c:	f1a5 0408 	sub.w	r4, r5, #8
 800cfa0:	444c      	add	r4, r9
 800cfa2:	1b2d      	subs	r5, r5, r4
 800cfa4:	1963      	adds	r3, r4, r5
 800cfa6:	42bb      	cmp	r3, r7
 800cfa8:	db04      	blt.n	800cfb4 <__s2b+0x78>
 800cfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfae:	2509      	movs	r5, #9
 800cfb0:	340a      	adds	r4, #10
 800cfb2:	e7f6      	b.n	800cfa2 <__s2b+0x66>
 800cfb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfb8:	4601      	mov	r1, r0
 800cfba:	220a      	movs	r2, #10
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	3b30      	subs	r3, #48	; 0x30
 800cfc0:	f7ff ff72 	bl	800cea8 <__multadd>
 800cfc4:	e7ee      	b.n	800cfa4 <__s2b+0x68>
 800cfc6:	bf00      	nop
 800cfc8:	0800ede4 	.word	0x0800ede4
 800cfcc:	0800ee74 	.word	0x0800ee74

0800cfd0 <__hi0bits>:
 800cfd0:	0c02      	lsrs	r2, r0, #16
 800cfd2:	0412      	lsls	r2, r2, #16
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	b9ca      	cbnz	r2, 800d00c <__hi0bits+0x3c>
 800cfd8:	0403      	lsls	r3, r0, #16
 800cfda:	2010      	movs	r0, #16
 800cfdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cfe0:	bf04      	itt	eq
 800cfe2:	021b      	lsleq	r3, r3, #8
 800cfe4:	3008      	addeq	r0, #8
 800cfe6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cfea:	bf04      	itt	eq
 800cfec:	011b      	lsleq	r3, r3, #4
 800cfee:	3004      	addeq	r0, #4
 800cff0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cff4:	bf04      	itt	eq
 800cff6:	009b      	lsleq	r3, r3, #2
 800cff8:	3002      	addeq	r0, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	db05      	blt.n	800d00a <__hi0bits+0x3a>
 800cffe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d002:	f100 0001 	add.w	r0, r0, #1
 800d006:	bf08      	it	eq
 800d008:	2020      	moveq	r0, #32
 800d00a:	4770      	bx	lr
 800d00c:	2000      	movs	r0, #0
 800d00e:	e7e5      	b.n	800cfdc <__hi0bits+0xc>

0800d010 <__lo0bits>:
 800d010:	6803      	ldr	r3, [r0, #0]
 800d012:	4602      	mov	r2, r0
 800d014:	f013 0007 	ands.w	r0, r3, #7
 800d018:	d00b      	beq.n	800d032 <__lo0bits+0x22>
 800d01a:	07d9      	lsls	r1, r3, #31
 800d01c:	d422      	bmi.n	800d064 <__lo0bits+0x54>
 800d01e:	0798      	lsls	r0, r3, #30
 800d020:	bf49      	itett	mi
 800d022:	085b      	lsrmi	r3, r3, #1
 800d024:	089b      	lsrpl	r3, r3, #2
 800d026:	2001      	movmi	r0, #1
 800d028:	6013      	strmi	r3, [r2, #0]
 800d02a:	bf5c      	itt	pl
 800d02c:	2002      	movpl	r0, #2
 800d02e:	6013      	strpl	r3, [r2, #0]
 800d030:	4770      	bx	lr
 800d032:	b299      	uxth	r1, r3
 800d034:	b909      	cbnz	r1, 800d03a <__lo0bits+0x2a>
 800d036:	2010      	movs	r0, #16
 800d038:	0c1b      	lsrs	r3, r3, #16
 800d03a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d03e:	bf04      	itt	eq
 800d040:	0a1b      	lsreq	r3, r3, #8
 800d042:	3008      	addeq	r0, #8
 800d044:	0719      	lsls	r1, r3, #28
 800d046:	bf04      	itt	eq
 800d048:	091b      	lsreq	r3, r3, #4
 800d04a:	3004      	addeq	r0, #4
 800d04c:	0799      	lsls	r1, r3, #30
 800d04e:	bf04      	itt	eq
 800d050:	089b      	lsreq	r3, r3, #2
 800d052:	3002      	addeq	r0, #2
 800d054:	07d9      	lsls	r1, r3, #31
 800d056:	d403      	bmi.n	800d060 <__lo0bits+0x50>
 800d058:	085b      	lsrs	r3, r3, #1
 800d05a:	f100 0001 	add.w	r0, r0, #1
 800d05e:	d003      	beq.n	800d068 <__lo0bits+0x58>
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	4770      	bx	lr
 800d064:	2000      	movs	r0, #0
 800d066:	4770      	bx	lr
 800d068:	2020      	movs	r0, #32
 800d06a:	4770      	bx	lr

0800d06c <__i2b>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	460c      	mov	r4, r1
 800d070:	2101      	movs	r1, #1
 800d072:	f7ff feb7 	bl	800cde4 <_Balloc>
 800d076:	4602      	mov	r2, r0
 800d078:	b928      	cbnz	r0, 800d086 <__i2b+0x1a>
 800d07a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d07e:	4b04      	ldr	r3, [pc, #16]	; (800d090 <__i2b+0x24>)
 800d080:	4804      	ldr	r0, [pc, #16]	; (800d094 <__i2b+0x28>)
 800d082:	f000 fdad 	bl	800dbe0 <__assert_func>
 800d086:	2301      	movs	r3, #1
 800d088:	6144      	str	r4, [r0, #20]
 800d08a:	6103      	str	r3, [r0, #16]
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	bf00      	nop
 800d090:	0800ede4 	.word	0x0800ede4
 800d094:	0800ee74 	.word	0x0800ee74

0800d098 <__multiply>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	4614      	mov	r4, r2
 800d09e:	690a      	ldr	r2, [r1, #16]
 800d0a0:	6923      	ldr	r3, [r4, #16]
 800d0a2:	460d      	mov	r5, r1
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	bfbe      	ittt	lt
 800d0a8:	460b      	movlt	r3, r1
 800d0aa:	4625      	movlt	r5, r4
 800d0ac:	461c      	movlt	r4, r3
 800d0ae:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d0b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d0b6:	68ab      	ldr	r3, [r5, #8]
 800d0b8:	6869      	ldr	r1, [r5, #4]
 800d0ba:	eb0a 0709 	add.w	r7, sl, r9
 800d0be:	42bb      	cmp	r3, r7
 800d0c0:	b085      	sub	sp, #20
 800d0c2:	bfb8      	it	lt
 800d0c4:	3101      	addlt	r1, #1
 800d0c6:	f7ff fe8d 	bl	800cde4 <_Balloc>
 800d0ca:	b930      	cbnz	r0, 800d0da <__multiply+0x42>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	f240 115d 	movw	r1, #349	; 0x15d
 800d0d2:	4b41      	ldr	r3, [pc, #260]	; (800d1d8 <__multiply+0x140>)
 800d0d4:	4841      	ldr	r0, [pc, #260]	; (800d1dc <__multiply+0x144>)
 800d0d6:	f000 fd83 	bl	800dbe0 <__assert_func>
 800d0da:	f100 0614 	add.w	r6, r0, #20
 800d0de:	4633      	mov	r3, r6
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d0e6:	4543      	cmp	r3, r8
 800d0e8:	d31e      	bcc.n	800d128 <__multiply+0x90>
 800d0ea:	f105 0c14 	add.w	ip, r5, #20
 800d0ee:	f104 0314 	add.w	r3, r4, #20
 800d0f2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d0f6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d0fa:	9202      	str	r2, [sp, #8]
 800d0fc:	ebac 0205 	sub.w	r2, ip, r5
 800d100:	3a15      	subs	r2, #21
 800d102:	f022 0203 	bic.w	r2, r2, #3
 800d106:	3204      	adds	r2, #4
 800d108:	f105 0115 	add.w	r1, r5, #21
 800d10c:	458c      	cmp	ip, r1
 800d10e:	bf38      	it	cc
 800d110:	2204      	movcc	r2, #4
 800d112:	9201      	str	r2, [sp, #4]
 800d114:	9a02      	ldr	r2, [sp, #8]
 800d116:	9303      	str	r3, [sp, #12]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d808      	bhi.n	800d12e <__multiply+0x96>
 800d11c:	2f00      	cmp	r7, #0
 800d11e:	dc55      	bgt.n	800d1cc <__multiply+0x134>
 800d120:	6107      	str	r7, [r0, #16]
 800d122:	b005      	add	sp, #20
 800d124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d128:	f843 2b04 	str.w	r2, [r3], #4
 800d12c:	e7db      	b.n	800d0e6 <__multiply+0x4e>
 800d12e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d132:	f1ba 0f00 	cmp.w	sl, #0
 800d136:	d020      	beq.n	800d17a <__multiply+0xe2>
 800d138:	46b1      	mov	r9, r6
 800d13a:	2200      	movs	r2, #0
 800d13c:	f105 0e14 	add.w	lr, r5, #20
 800d140:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d144:	f8d9 b000 	ldr.w	fp, [r9]
 800d148:	b2a1      	uxth	r1, r4
 800d14a:	fa1f fb8b 	uxth.w	fp, fp
 800d14e:	fb0a b101 	mla	r1, sl, r1, fp
 800d152:	4411      	add	r1, r2
 800d154:	f8d9 2000 	ldr.w	r2, [r9]
 800d158:	0c24      	lsrs	r4, r4, #16
 800d15a:	0c12      	lsrs	r2, r2, #16
 800d15c:	fb0a 2404 	mla	r4, sl, r4, r2
 800d160:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d164:	b289      	uxth	r1, r1
 800d166:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d16a:	45f4      	cmp	ip, lr
 800d16c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d170:	f849 1b04 	str.w	r1, [r9], #4
 800d174:	d8e4      	bhi.n	800d140 <__multiply+0xa8>
 800d176:	9901      	ldr	r1, [sp, #4]
 800d178:	5072      	str	r2, [r6, r1]
 800d17a:	9a03      	ldr	r2, [sp, #12]
 800d17c:	3304      	adds	r3, #4
 800d17e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d182:	f1b9 0f00 	cmp.w	r9, #0
 800d186:	d01f      	beq.n	800d1c8 <__multiply+0x130>
 800d188:	46b6      	mov	lr, r6
 800d18a:	f04f 0a00 	mov.w	sl, #0
 800d18e:	6834      	ldr	r4, [r6, #0]
 800d190:	f105 0114 	add.w	r1, r5, #20
 800d194:	880a      	ldrh	r2, [r1, #0]
 800d196:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d19a:	b2a4      	uxth	r4, r4
 800d19c:	fb09 b202 	mla	r2, r9, r2, fp
 800d1a0:	4492      	add	sl, r2
 800d1a2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d1a6:	f84e 4b04 	str.w	r4, [lr], #4
 800d1aa:	f851 4b04 	ldr.w	r4, [r1], #4
 800d1ae:	f8be 2000 	ldrh.w	r2, [lr]
 800d1b2:	0c24      	lsrs	r4, r4, #16
 800d1b4:	fb09 2404 	mla	r4, r9, r4, r2
 800d1b8:	458c      	cmp	ip, r1
 800d1ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d1be:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d1c2:	d8e7      	bhi.n	800d194 <__multiply+0xfc>
 800d1c4:	9a01      	ldr	r2, [sp, #4]
 800d1c6:	50b4      	str	r4, [r6, r2]
 800d1c8:	3604      	adds	r6, #4
 800d1ca:	e7a3      	b.n	800d114 <__multiply+0x7c>
 800d1cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1a5      	bne.n	800d120 <__multiply+0x88>
 800d1d4:	3f01      	subs	r7, #1
 800d1d6:	e7a1      	b.n	800d11c <__multiply+0x84>
 800d1d8:	0800ede4 	.word	0x0800ede4
 800d1dc:	0800ee74 	.word	0x0800ee74

0800d1e0 <__pow5mult>:
 800d1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1e4:	4615      	mov	r5, r2
 800d1e6:	f012 0203 	ands.w	r2, r2, #3
 800d1ea:	4606      	mov	r6, r0
 800d1ec:	460f      	mov	r7, r1
 800d1ee:	d007      	beq.n	800d200 <__pow5mult+0x20>
 800d1f0:	4c25      	ldr	r4, [pc, #148]	; (800d288 <__pow5mult+0xa8>)
 800d1f2:	3a01      	subs	r2, #1
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1fa:	f7ff fe55 	bl	800cea8 <__multadd>
 800d1fe:	4607      	mov	r7, r0
 800d200:	10ad      	asrs	r5, r5, #2
 800d202:	d03d      	beq.n	800d280 <__pow5mult+0xa0>
 800d204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d206:	b97c      	cbnz	r4, 800d228 <__pow5mult+0x48>
 800d208:	2010      	movs	r0, #16
 800d20a:	f7ff fdc3 	bl	800cd94 <malloc>
 800d20e:	4602      	mov	r2, r0
 800d210:	6270      	str	r0, [r6, #36]	; 0x24
 800d212:	b928      	cbnz	r0, 800d220 <__pow5mult+0x40>
 800d214:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d218:	4b1c      	ldr	r3, [pc, #112]	; (800d28c <__pow5mult+0xac>)
 800d21a:	481d      	ldr	r0, [pc, #116]	; (800d290 <__pow5mult+0xb0>)
 800d21c:	f000 fce0 	bl	800dbe0 <__assert_func>
 800d220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d224:	6004      	str	r4, [r0, #0]
 800d226:	60c4      	str	r4, [r0, #12]
 800d228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d22c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d230:	b94c      	cbnz	r4, 800d246 <__pow5mult+0x66>
 800d232:	f240 2171 	movw	r1, #625	; 0x271
 800d236:	4630      	mov	r0, r6
 800d238:	f7ff ff18 	bl	800d06c <__i2b>
 800d23c:	2300      	movs	r3, #0
 800d23e:	4604      	mov	r4, r0
 800d240:	f8c8 0008 	str.w	r0, [r8, #8]
 800d244:	6003      	str	r3, [r0, #0]
 800d246:	f04f 0900 	mov.w	r9, #0
 800d24a:	07eb      	lsls	r3, r5, #31
 800d24c:	d50a      	bpl.n	800d264 <__pow5mult+0x84>
 800d24e:	4639      	mov	r1, r7
 800d250:	4622      	mov	r2, r4
 800d252:	4630      	mov	r0, r6
 800d254:	f7ff ff20 	bl	800d098 <__multiply>
 800d258:	4680      	mov	r8, r0
 800d25a:	4639      	mov	r1, r7
 800d25c:	4630      	mov	r0, r6
 800d25e:	f7ff fe01 	bl	800ce64 <_Bfree>
 800d262:	4647      	mov	r7, r8
 800d264:	106d      	asrs	r5, r5, #1
 800d266:	d00b      	beq.n	800d280 <__pow5mult+0xa0>
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	b938      	cbnz	r0, 800d27c <__pow5mult+0x9c>
 800d26c:	4622      	mov	r2, r4
 800d26e:	4621      	mov	r1, r4
 800d270:	4630      	mov	r0, r6
 800d272:	f7ff ff11 	bl	800d098 <__multiply>
 800d276:	6020      	str	r0, [r4, #0]
 800d278:	f8c0 9000 	str.w	r9, [r0]
 800d27c:	4604      	mov	r4, r0
 800d27e:	e7e4      	b.n	800d24a <__pow5mult+0x6a>
 800d280:	4638      	mov	r0, r7
 800d282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d286:	bf00      	nop
 800d288:	0800efc8 	.word	0x0800efc8
 800d28c:	0800ed6e 	.word	0x0800ed6e
 800d290:	0800ee74 	.word	0x0800ee74

0800d294 <__lshift>:
 800d294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d298:	460c      	mov	r4, r1
 800d29a:	4607      	mov	r7, r0
 800d29c:	4691      	mov	r9, r2
 800d29e:	6923      	ldr	r3, [r4, #16]
 800d2a0:	6849      	ldr	r1, [r1, #4]
 800d2a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2a6:	68a3      	ldr	r3, [r4, #8]
 800d2a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2ac:	f108 0601 	add.w	r6, r8, #1
 800d2b0:	42b3      	cmp	r3, r6
 800d2b2:	db0b      	blt.n	800d2cc <__lshift+0x38>
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	f7ff fd95 	bl	800cde4 <_Balloc>
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	b948      	cbnz	r0, 800d2d2 <__lshift+0x3e>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d2c4:	4b27      	ldr	r3, [pc, #156]	; (800d364 <__lshift+0xd0>)
 800d2c6:	4828      	ldr	r0, [pc, #160]	; (800d368 <__lshift+0xd4>)
 800d2c8:	f000 fc8a 	bl	800dbe0 <__assert_func>
 800d2cc:	3101      	adds	r1, #1
 800d2ce:	005b      	lsls	r3, r3, #1
 800d2d0:	e7ee      	b.n	800d2b0 <__lshift+0x1c>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	f100 0114 	add.w	r1, r0, #20
 800d2d8:	f100 0210 	add.w	r2, r0, #16
 800d2dc:	4618      	mov	r0, r3
 800d2de:	4553      	cmp	r3, sl
 800d2e0:	db33      	blt.n	800d34a <__lshift+0xb6>
 800d2e2:	6920      	ldr	r0, [r4, #16]
 800d2e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2e8:	f104 0314 	add.w	r3, r4, #20
 800d2ec:	f019 091f 	ands.w	r9, r9, #31
 800d2f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2f8:	d02b      	beq.n	800d352 <__lshift+0xbe>
 800d2fa:	468a      	mov	sl, r1
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f1c9 0e20 	rsb	lr, r9, #32
 800d302:	6818      	ldr	r0, [r3, #0]
 800d304:	fa00 f009 	lsl.w	r0, r0, r9
 800d308:	4302      	orrs	r2, r0
 800d30a:	f84a 2b04 	str.w	r2, [sl], #4
 800d30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d312:	459c      	cmp	ip, r3
 800d314:	fa22 f20e 	lsr.w	r2, r2, lr
 800d318:	d8f3      	bhi.n	800d302 <__lshift+0x6e>
 800d31a:	ebac 0304 	sub.w	r3, ip, r4
 800d31e:	3b15      	subs	r3, #21
 800d320:	f023 0303 	bic.w	r3, r3, #3
 800d324:	3304      	adds	r3, #4
 800d326:	f104 0015 	add.w	r0, r4, #21
 800d32a:	4584      	cmp	ip, r0
 800d32c:	bf38      	it	cc
 800d32e:	2304      	movcc	r3, #4
 800d330:	50ca      	str	r2, [r1, r3]
 800d332:	b10a      	cbz	r2, 800d338 <__lshift+0xa4>
 800d334:	f108 0602 	add.w	r6, r8, #2
 800d338:	3e01      	subs	r6, #1
 800d33a:	4638      	mov	r0, r7
 800d33c:	4621      	mov	r1, r4
 800d33e:	612e      	str	r6, [r5, #16]
 800d340:	f7ff fd90 	bl	800ce64 <_Bfree>
 800d344:	4628      	mov	r0, r5
 800d346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d34a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d34e:	3301      	adds	r3, #1
 800d350:	e7c5      	b.n	800d2de <__lshift+0x4a>
 800d352:	3904      	subs	r1, #4
 800d354:	f853 2b04 	ldr.w	r2, [r3], #4
 800d358:	459c      	cmp	ip, r3
 800d35a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d35e:	d8f9      	bhi.n	800d354 <__lshift+0xc0>
 800d360:	e7ea      	b.n	800d338 <__lshift+0xa4>
 800d362:	bf00      	nop
 800d364:	0800ede4 	.word	0x0800ede4
 800d368:	0800ee74 	.word	0x0800ee74

0800d36c <__mcmp>:
 800d36c:	4603      	mov	r3, r0
 800d36e:	690a      	ldr	r2, [r1, #16]
 800d370:	6900      	ldr	r0, [r0, #16]
 800d372:	b530      	push	{r4, r5, lr}
 800d374:	1a80      	subs	r0, r0, r2
 800d376:	d10d      	bne.n	800d394 <__mcmp+0x28>
 800d378:	3314      	adds	r3, #20
 800d37a:	3114      	adds	r1, #20
 800d37c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d380:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d384:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d388:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d38c:	4295      	cmp	r5, r2
 800d38e:	d002      	beq.n	800d396 <__mcmp+0x2a>
 800d390:	d304      	bcc.n	800d39c <__mcmp+0x30>
 800d392:	2001      	movs	r0, #1
 800d394:	bd30      	pop	{r4, r5, pc}
 800d396:	42a3      	cmp	r3, r4
 800d398:	d3f4      	bcc.n	800d384 <__mcmp+0x18>
 800d39a:	e7fb      	b.n	800d394 <__mcmp+0x28>
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	e7f8      	b.n	800d394 <__mcmp+0x28>
	...

0800d3a4 <__mdiff>:
 800d3a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a8:	460c      	mov	r4, r1
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	4611      	mov	r1, r2
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	4692      	mov	sl, r2
 800d3b2:	f7ff ffdb 	bl	800d36c <__mcmp>
 800d3b6:	1e05      	subs	r5, r0, #0
 800d3b8:	d111      	bne.n	800d3de <__mdiff+0x3a>
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f7ff fd11 	bl	800cde4 <_Balloc>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	b928      	cbnz	r0, 800d3d2 <__mdiff+0x2e>
 800d3c6:	f240 2132 	movw	r1, #562	; 0x232
 800d3ca:	4b3c      	ldr	r3, [pc, #240]	; (800d4bc <__mdiff+0x118>)
 800d3cc:	483c      	ldr	r0, [pc, #240]	; (800d4c0 <__mdiff+0x11c>)
 800d3ce:	f000 fc07 	bl	800dbe0 <__assert_func>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3d8:	4610      	mov	r0, r2
 800d3da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3de:	bfa4      	itt	ge
 800d3e0:	4653      	movge	r3, sl
 800d3e2:	46a2      	movge	sl, r4
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d3ea:	bfa6      	itte	ge
 800d3ec:	461c      	movge	r4, r3
 800d3ee:	2500      	movge	r5, #0
 800d3f0:	2501      	movlt	r5, #1
 800d3f2:	f7ff fcf7 	bl	800cde4 <_Balloc>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	b918      	cbnz	r0, 800d402 <__mdiff+0x5e>
 800d3fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d3fe:	4b2f      	ldr	r3, [pc, #188]	; (800d4bc <__mdiff+0x118>)
 800d400:	e7e4      	b.n	800d3cc <__mdiff+0x28>
 800d402:	f100 0814 	add.w	r8, r0, #20
 800d406:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d40a:	60c5      	str	r5, [r0, #12]
 800d40c:	f04f 0c00 	mov.w	ip, #0
 800d410:	f10a 0514 	add.w	r5, sl, #20
 800d414:	f10a 0010 	add.w	r0, sl, #16
 800d418:	46c2      	mov	sl, r8
 800d41a:	6926      	ldr	r6, [r4, #16]
 800d41c:	f104 0914 	add.w	r9, r4, #20
 800d420:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d424:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d428:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d42c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d430:	fa1f f18b 	uxth.w	r1, fp
 800d434:	4461      	add	r1, ip
 800d436:	fa1f fc83 	uxth.w	ip, r3
 800d43a:	0c1b      	lsrs	r3, r3, #16
 800d43c:	eba1 010c 	sub.w	r1, r1, ip
 800d440:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d444:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d448:	b289      	uxth	r1, r1
 800d44a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d44e:	454e      	cmp	r6, r9
 800d450:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d454:	f84a 3b04 	str.w	r3, [sl], #4
 800d458:	d8e6      	bhi.n	800d428 <__mdiff+0x84>
 800d45a:	1b33      	subs	r3, r6, r4
 800d45c:	3b15      	subs	r3, #21
 800d45e:	f023 0303 	bic.w	r3, r3, #3
 800d462:	3415      	adds	r4, #21
 800d464:	3304      	adds	r3, #4
 800d466:	42a6      	cmp	r6, r4
 800d468:	bf38      	it	cc
 800d46a:	2304      	movcc	r3, #4
 800d46c:	441d      	add	r5, r3
 800d46e:	4443      	add	r3, r8
 800d470:	461e      	mov	r6, r3
 800d472:	462c      	mov	r4, r5
 800d474:	4574      	cmp	r4, lr
 800d476:	d30e      	bcc.n	800d496 <__mdiff+0xf2>
 800d478:	f10e 0103 	add.w	r1, lr, #3
 800d47c:	1b49      	subs	r1, r1, r5
 800d47e:	f021 0103 	bic.w	r1, r1, #3
 800d482:	3d03      	subs	r5, #3
 800d484:	45ae      	cmp	lr, r5
 800d486:	bf38      	it	cc
 800d488:	2100      	movcc	r1, #0
 800d48a:	4419      	add	r1, r3
 800d48c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d490:	b18b      	cbz	r3, 800d4b6 <__mdiff+0x112>
 800d492:	6117      	str	r7, [r2, #16]
 800d494:	e7a0      	b.n	800d3d8 <__mdiff+0x34>
 800d496:	f854 8b04 	ldr.w	r8, [r4], #4
 800d49a:	fa1f f188 	uxth.w	r1, r8
 800d49e:	4461      	add	r1, ip
 800d4a0:	1408      	asrs	r0, r1, #16
 800d4a2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d4a6:	b289      	uxth	r1, r1
 800d4a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d4ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4b0:	f846 1b04 	str.w	r1, [r6], #4
 800d4b4:	e7de      	b.n	800d474 <__mdiff+0xd0>
 800d4b6:	3f01      	subs	r7, #1
 800d4b8:	e7e8      	b.n	800d48c <__mdiff+0xe8>
 800d4ba:	bf00      	nop
 800d4bc:	0800ede4 	.word	0x0800ede4
 800d4c0:	0800ee74 	.word	0x0800ee74

0800d4c4 <__ulp>:
 800d4c4:	4b11      	ldr	r3, [pc, #68]	; (800d50c <__ulp+0x48>)
 800d4c6:	400b      	ands	r3, r1
 800d4c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	dd02      	ble.n	800d4d6 <__ulp+0x12>
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	4770      	bx	lr
 800d4d6:	425b      	negs	r3, r3
 800d4d8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d4dc:	f04f 0000 	mov.w	r0, #0
 800d4e0:	f04f 0100 	mov.w	r1, #0
 800d4e4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d4e8:	da04      	bge.n	800d4f4 <__ulp+0x30>
 800d4ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d4ee:	fa43 f102 	asr.w	r1, r3, r2
 800d4f2:	4770      	bx	lr
 800d4f4:	f1a2 0314 	sub.w	r3, r2, #20
 800d4f8:	2b1e      	cmp	r3, #30
 800d4fa:	bfd6      	itet	le
 800d4fc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d500:	2301      	movgt	r3, #1
 800d502:	fa22 f303 	lsrle.w	r3, r2, r3
 800d506:	4618      	mov	r0, r3
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	7ff00000 	.word	0x7ff00000

0800d510 <__b2d>:
 800d510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d514:	6907      	ldr	r7, [r0, #16]
 800d516:	f100 0914 	add.w	r9, r0, #20
 800d51a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d51e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d522:	f1a7 0804 	sub.w	r8, r7, #4
 800d526:	4630      	mov	r0, r6
 800d528:	f7ff fd52 	bl	800cfd0 <__hi0bits>
 800d52c:	f1c0 0320 	rsb	r3, r0, #32
 800d530:	280a      	cmp	r0, #10
 800d532:	600b      	str	r3, [r1, #0]
 800d534:	491f      	ldr	r1, [pc, #124]	; (800d5b4 <__b2d+0xa4>)
 800d536:	dc17      	bgt.n	800d568 <__b2d+0x58>
 800d538:	45c1      	cmp	r9, r8
 800d53a:	bf28      	it	cs
 800d53c:	2200      	movcs	r2, #0
 800d53e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d542:	fa26 f30c 	lsr.w	r3, r6, ip
 800d546:	bf38      	it	cc
 800d548:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d54c:	ea43 0501 	orr.w	r5, r3, r1
 800d550:	f100 0315 	add.w	r3, r0, #21
 800d554:	fa06 f303 	lsl.w	r3, r6, r3
 800d558:	fa22 f20c 	lsr.w	r2, r2, ip
 800d55c:	ea43 0402 	orr.w	r4, r3, r2
 800d560:	4620      	mov	r0, r4
 800d562:	4629      	mov	r1, r5
 800d564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d568:	45c1      	cmp	r9, r8
 800d56a:	bf2e      	itee	cs
 800d56c:	2200      	movcs	r2, #0
 800d56e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d572:	f1a7 0808 	subcc.w	r8, r7, #8
 800d576:	f1b0 030b 	subs.w	r3, r0, #11
 800d57a:	d016      	beq.n	800d5aa <__b2d+0x9a>
 800d57c:	f1c3 0720 	rsb	r7, r3, #32
 800d580:	fa22 f107 	lsr.w	r1, r2, r7
 800d584:	45c8      	cmp	r8, r9
 800d586:	fa06 f603 	lsl.w	r6, r6, r3
 800d58a:	ea46 0601 	orr.w	r6, r6, r1
 800d58e:	bf94      	ite	ls
 800d590:	2100      	movls	r1, #0
 800d592:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d596:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d59a:	fa02 f003 	lsl.w	r0, r2, r3
 800d59e:	40f9      	lsrs	r1, r7
 800d5a0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d5a4:	ea40 0401 	orr.w	r4, r0, r1
 800d5a8:	e7da      	b.n	800d560 <__b2d+0x50>
 800d5aa:	4614      	mov	r4, r2
 800d5ac:	ea46 0501 	orr.w	r5, r6, r1
 800d5b0:	e7d6      	b.n	800d560 <__b2d+0x50>
 800d5b2:	bf00      	nop
 800d5b4:	3ff00000 	.word	0x3ff00000

0800d5b8 <__d2b>:
 800d5b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d5bc:	2101      	movs	r1, #1
 800d5be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d5c2:	4690      	mov	r8, r2
 800d5c4:	461d      	mov	r5, r3
 800d5c6:	f7ff fc0d 	bl	800cde4 <_Balloc>
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	b930      	cbnz	r0, 800d5dc <__d2b+0x24>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	f240 310a 	movw	r1, #778	; 0x30a
 800d5d4:	4b24      	ldr	r3, [pc, #144]	; (800d668 <__d2b+0xb0>)
 800d5d6:	4825      	ldr	r0, [pc, #148]	; (800d66c <__d2b+0xb4>)
 800d5d8:	f000 fb02 	bl	800dbe0 <__assert_func>
 800d5dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d5e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d5e4:	bb2d      	cbnz	r5, 800d632 <__d2b+0x7a>
 800d5e6:	9301      	str	r3, [sp, #4]
 800d5e8:	f1b8 0300 	subs.w	r3, r8, #0
 800d5ec:	d026      	beq.n	800d63c <__d2b+0x84>
 800d5ee:	4668      	mov	r0, sp
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	f7ff fd0d 	bl	800d010 <__lo0bits>
 800d5f6:	9900      	ldr	r1, [sp, #0]
 800d5f8:	b1f0      	cbz	r0, 800d638 <__d2b+0x80>
 800d5fa:	9a01      	ldr	r2, [sp, #4]
 800d5fc:	f1c0 0320 	rsb	r3, r0, #32
 800d600:	fa02 f303 	lsl.w	r3, r2, r3
 800d604:	430b      	orrs	r3, r1
 800d606:	40c2      	lsrs	r2, r0
 800d608:	6163      	str	r3, [r4, #20]
 800d60a:	9201      	str	r2, [sp, #4]
 800d60c:	9b01      	ldr	r3, [sp, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	bf14      	ite	ne
 800d612:	2102      	movne	r1, #2
 800d614:	2101      	moveq	r1, #1
 800d616:	61a3      	str	r3, [r4, #24]
 800d618:	6121      	str	r1, [r4, #16]
 800d61a:	b1c5      	cbz	r5, 800d64e <__d2b+0x96>
 800d61c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d620:	4405      	add	r5, r0
 800d622:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d626:	603d      	str	r5, [r7, #0]
 800d628:	6030      	str	r0, [r6, #0]
 800d62a:	4620      	mov	r0, r4
 800d62c:	b002      	add	sp, #8
 800d62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d636:	e7d6      	b.n	800d5e6 <__d2b+0x2e>
 800d638:	6161      	str	r1, [r4, #20]
 800d63a:	e7e7      	b.n	800d60c <__d2b+0x54>
 800d63c:	a801      	add	r0, sp, #4
 800d63e:	f7ff fce7 	bl	800d010 <__lo0bits>
 800d642:	2101      	movs	r1, #1
 800d644:	9b01      	ldr	r3, [sp, #4]
 800d646:	6121      	str	r1, [r4, #16]
 800d648:	6163      	str	r3, [r4, #20]
 800d64a:	3020      	adds	r0, #32
 800d64c:	e7e5      	b.n	800d61a <__d2b+0x62>
 800d64e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d652:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d656:	6038      	str	r0, [r7, #0]
 800d658:	6918      	ldr	r0, [r3, #16]
 800d65a:	f7ff fcb9 	bl	800cfd0 <__hi0bits>
 800d65e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d662:	6031      	str	r1, [r6, #0]
 800d664:	e7e1      	b.n	800d62a <__d2b+0x72>
 800d666:	bf00      	nop
 800d668:	0800ede4 	.word	0x0800ede4
 800d66c:	0800ee74 	.word	0x0800ee74

0800d670 <__ratio>:
 800d670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	4688      	mov	r8, r1
 800d676:	4669      	mov	r1, sp
 800d678:	4681      	mov	r9, r0
 800d67a:	f7ff ff49 	bl	800d510 <__b2d>
 800d67e:	460f      	mov	r7, r1
 800d680:	4604      	mov	r4, r0
 800d682:	460d      	mov	r5, r1
 800d684:	4640      	mov	r0, r8
 800d686:	a901      	add	r1, sp, #4
 800d688:	f7ff ff42 	bl	800d510 <__b2d>
 800d68c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d690:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d694:	468b      	mov	fp, r1
 800d696:	eba3 0c02 	sub.w	ip, r3, r2
 800d69a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d69e:	1a9b      	subs	r3, r3, r2
 800d6a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	bfd5      	itete	le
 800d6a8:	460a      	movle	r2, r1
 800d6aa:	462a      	movgt	r2, r5
 800d6ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d6b0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d6b4:	bfd8      	it	le
 800d6b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d6ba:	465b      	mov	r3, fp
 800d6bc:	4602      	mov	r2, r0
 800d6be:	4639      	mov	r1, r7
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f7f3 f84b 	bl	800075c <__aeabi_ddiv>
 800d6c6:	b003      	add	sp, #12
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6cc <__copybits>:
 800d6cc:	3901      	subs	r1, #1
 800d6ce:	b570      	push	{r4, r5, r6, lr}
 800d6d0:	1149      	asrs	r1, r1, #5
 800d6d2:	6914      	ldr	r4, [r2, #16]
 800d6d4:	3101      	adds	r1, #1
 800d6d6:	f102 0314 	add.w	r3, r2, #20
 800d6da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6e2:	1f05      	subs	r5, r0, #4
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	d30c      	bcc.n	800d702 <__copybits+0x36>
 800d6e8:	1aa3      	subs	r3, r4, r2
 800d6ea:	3b11      	subs	r3, #17
 800d6ec:	f023 0303 	bic.w	r3, r3, #3
 800d6f0:	3211      	adds	r2, #17
 800d6f2:	42a2      	cmp	r2, r4
 800d6f4:	bf88      	it	hi
 800d6f6:	2300      	movhi	r3, #0
 800d6f8:	4418      	add	r0, r3
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	4288      	cmp	r0, r1
 800d6fe:	d305      	bcc.n	800d70c <__copybits+0x40>
 800d700:	bd70      	pop	{r4, r5, r6, pc}
 800d702:	f853 6b04 	ldr.w	r6, [r3], #4
 800d706:	f845 6f04 	str.w	r6, [r5, #4]!
 800d70a:	e7eb      	b.n	800d6e4 <__copybits+0x18>
 800d70c:	f840 3b04 	str.w	r3, [r0], #4
 800d710:	e7f4      	b.n	800d6fc <__copybits+0x30>

0800d712 <__any_on>:
 800d712:	f100 0214 	add.w	r2, r0, #20
 800d716:	6900      	ldr	r0, [r0, #16]
 800d718:	114b      	asrs	r3, r1, #5
 800d71a:	4298      	cmp	r0, r3
 800d71c:	b510      	push	{r4, lr}
 800d71e:	db11      	blt.n	800d744 <__any_on+0x32>
 800d720:	dd0a      	ble.n	800d738 <__any_on+0x26>
 800d722:	f011 011f 	ands.w	r1, r1, #31
 800d726:	d007      	beq.n	800d738 <__any_on+0x26>
 800d728:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d72c:	fa24 f001 	lsr.w	r0, r4, r1
 800d730:	fa00 f101 	lsl.w	r1, r0, r1
 800d734:	428c      	cmp	r4, r1
 800d736:	d10b      	bne.n	800d750 <__any_on+0x3e>
 800d738:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d803      	bhi.n	800d748 <__any_on+0x36>
 800d740:	2000      	movs	r0, #0
 800d742:	bd10      	pop	{r4, pc}
 800d744:	4603      	mov	r3, r0
 800d746:	e7f7      	b.n	800d738 <__any_on+0x26>
 800d748:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d74c:	2900      	cmp	r1, #0
 800d74e:	d0f5      	beq.n	800d73c <__any_on+0x2a>
 800d750:	2001      	movs	r0, #1
 800d752:	e7f6      	b.n	800d742 <__any_on+0x30>

0800d754 <_calloc_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	fb02 f501 	mul.w	r5, r2, r1
 800d75a:	4629      	mov	r1, r5
 800d75c:	f000 f854 	bl	800d808 <_malloc_r>
 800d760:	4604      	mov	r4, r0
 800d762:	b118      	cbz	r0, 800d76c <_calloc_r+0x18>
 800d764:	462a      	mov	r2, r5
 800d766:	2100      	movs	r1, #0
 800d768:	f7fc fbb8 	bl	8009edc <memset>
 800d76c:	4620      	mov	r0, r4
 800d76e:	bd38      	pop	{r3, r4, r5, pc}

0800d770 <_free_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	4605      	mov	r5, r0
 800d774:	2900      	cmp	r1, #0
 800d776:	d043      	beq.n	800d800 <_free_r+0x90>
 800d778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d77c:	1f0c      	subs	r4, r1, #4
 800d77e:	2b00      	cmp	r3, #0
 800d780:	bfb8      	it	lt
 800d782:	18e4      	addlt	r4, r4, r3
 800d784:	f000 fa5c 	bl	800dc40 <__malloc_lock>
 800d788:	4a1e      	ldr	r2, [pc, #120]	; (800d804 <_free_r+0x94>)
 800d78a:	6813      	ldr	r3, [r2, #0]
 800d78c:	4610      	mov	r0, r2
 800d78e:	b933      	cbnz	r3, 800d79e <_free_r+0x2e>
 800d790:	6063      	str	r3, [r4, #4]
 800d792:	6014      	str	r4, [r2, #0]
 800d794:	4628      	mov	r0, r5
 800d796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d79a:	f000 ba57 	b.w	800dc4c <__malloc_unlock>
 800d79e:	42a3      	cmp	r3, r4
 800d7a0:	d90a      	bls.n	800d7b8 <_free_r+0x48>
 800d7a2:	6821      	ldr	r1, [r4, #0]
 800d7a4:	1862      	adds	r2, r4, r1
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	bf01      	itttt	eq
 800d7aa:	681a      	ldreq	r2, [r3, #0]
 800d7ac:	685b      	ldreq	r3, [r3, #4]
 800d7ae:	1852      	addeq	r2, r2, r1
 800d7b0:	6022      	streq	r2, [r4, #0]
 800d7b2:	6063      	str	r3, [r4, #4]
 800d7b4:	6004      	str	r4, [r0, #0]
 800d7b6:	e7ed      	b.n	800d794 <_free_r+0x24>
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	b10b      	cbz	r3, 800d7c2 <_free_r+0x52>
 800d7be:	42a3      	cmp	r3, r4
 800d7c0:	d9fa      	bls.n	800d7b8 <_free_r+0x48>
 800d7c2:	6811      	ldr	r1, [r2, #0]
 800d7c4:	1850      	adds	r0, r2, r1
 800d7c6:	42a0      	cmp	r0, r4
 800d7c8:	d10b      	bne.n	800d7e2 <_free_r+0x72>
 800d7ca:	6820      	ldr	r0, [r4, #0]
 800d7cc:	4401      	add	r1, r0
 800d7ce:	1850      	adds	r0, r2, r1
 800d7d0:	4283      	cmp	r3, r0
 800d7d2:	6011      	str	r1, [r2, #0]
 800d7d4:	d1de      	bne.n	800d794 <_free_r+0x24>
 800d7d6:	6818      	ldr	r0, [r3, #0]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	4401      	add	r1, r0
 800d7dc:	6011      	str	r1, [r2, #0]
 800d7de:	6053      	str	r3, [r2, #4]
 800d7e0:	e7d8      	b.n	800d794 <_free_r+0x24>
 800d7e2:	d902      	bls.n	800d7ea <_free_r+0x7a>
 800d7e4:	230c      	movs	r3, #12
 800d7e6:	602b      	str	r3, [r5, #0]
 800d7e8:	e7d4      	b.n	800d794 <_free_r+0x24>
 800d7ea:	6820      	ldr	r0, [r4, #0]
 800d7ec:	1821      	adds	r1, r4, r0
 800d7ee:	428b      	cmp	r3, r1
 800d7f0:	bf01      	itttt	eq
 800d7f2:	6819      	ldreq	r1, [r3, #0]
 800d7f4:	685b      	ldreq	r3, [r3, #4]
 800d7f6:	1809      	addeq	r1, r1, r0
 800d7f8:	6021      	streq	r1, [r4, #0]
 800d7fa:	6063      	str	r3, [r4, #4]
 800d7fc:	6054      	str	r4, [r2, #4]
 800d7fe:	e7c9      	b.n	800d794 <_free_r+0x24>
 800d800:	bd38      	pop	{r3, r4, r5, pc}
 800d802:	bf00      	nop
 800d804:	20001eb4 	.word	0x20001eb4

0800d808 <_malloc_r>:
 800d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80a:	1ccd      	adds	r5, r1, #3
 800d80c:	f025 0503 	bic.w	r5, r5, #3
 800d810:	3508      	adds	r5, #8
 800d812:	2d0c      	cmp	r5, #12
 800d814:	bf38      	it	cc
 800d816:	250c      	movcc	r5, #12
 800d818:	2d00      	cmp	r5, #0
 800d81a:	4606      	mov	r6, r0
 800d81c:	db01      	blt.n	800d822 <_malloc_r+0x1a>
 800d81e:	42a9      	cmp	r1, r5
 800d820:	d903      	bls.n	800d82a <_malloc_r+0x22>
 800d822:	230c      	movs	r3, #12
 800d824:	6033      	str	r3, [r6, #0]
 800d826:	2000      	movs	r0, #0
 800d828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d82a:	f000 fa09 	bl	800dc40 <__malloc_lock>
 800d82e:	4921      	ldr	r1, [pc, #132]	; (800d8b4 <_malloc_r+0xac>)
 800d830:	680a      	ldr	r2, [r1, #0]
 800d832:	4614      	mov	r4, r2
 800d834:	b99c      	cbnz	r4, 800d85e <_malloc_r+0x56>
 800d836:	4f20      	ldr	r7, [pc, #128]	; (800d8b8 <_malloc_r+0xb0>)
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	b923      	cbnz	r3, 800d846 <_malloc_r+0x3e>
 800d83c:	4621      	mov	r1, r4
 800d83e:	4630      	mov	r0, r6
 800d840:	f000 f99e 	bl	800db80 <_sbrk_r>
 800d844:	6038      	str	r0, [r7, #0]
 800d846:	4629      	mov	r1, r5
 800d848:	4630      	mov	r0, r6
 800d84a:	f000 f999 	bl	800db80 <_sbrk_r>
 800d84e:	1c43      	adds	r3, r0, #1
 800d850:	d123      	bne.n	800d89a <_malloc_r+0x92>
 800d852:	230c      	movs	r3, #12
 800d854:	4630      	mov	r0, r6
 800d856:	6033      	str	r3, [r6, #0]
 800d858:	f000 f9f8 	bl	800dc4c <__malloc_unlock>
 800d85c:	e7e3      	b.n	800d826 <_malloc_r+0x1e>
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	1b5b      	subs	r3, r3, r5
 800d862:	d417      	bmi.n	800d894 <_malloc_r+0x8c>
 800d864:	2b0b      	cmp	r3, #11
 800d866:	d903      	bls.n	800d870 <_malloc_r+0x68>
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	441c      	add	r4, r3
 800d86c:	6025      	str	r5, [r4, #0]
 800d86e:	e004      	b.n	800d87a <_malloc_r+0x72>
 800d870:	6863      	ldr	r3, [r4, #4]
 800d872:	42a2      	cmp	r2, r4
 800d874:	bf0c      	ite	eq
 800d876:	600b      	streq	r3, [r1, #0]
 800d878:	6053      	strne	r3, [r2, #4]
 800d87a:	4630      	mov	r0, r6
 800d87c:	f000 f9e6 	bl	800dc4c <__malloc_unlock>
 800d880:	f104 000b 	add.w	r0, r4, #11
 800d884:	1d23      	adds	r3, r4, #4
 800d886:	f020 0007 	bic.w	r0, r0, #7
 800d88a:	1ac2      	subs	r2, r0, r3
 800d88c:	d0cc      	beq.n	800d828 <_malloc_r+0x20>
 800d88e:	1a1b      	subs	r3, r3, r0
 800d890:	50a3      	str	r3, [r4, r2]
 800d892:	e7c9      	b.n	800d828 <_malloc_r+0x20>
 800d894:	4622      	mov	r2, r4
 800d896:	6864      	ldr	r4, [r4, #4]
 800d898:	e7cc      	b.n	800d834 <_malloc_r+0x2c>
 800d89a:	1cc4      	adds	r4, r0, #3
 800d89c:	f024 0403 	bic.w	r4, r4, #3
 800d8a0:	42a0      	cmp	r0, r4
 800d8a2:	d0e3      	beq.n	800d86c <_malloc_r+0x64>
 800d8a4:	1a21      	subs	r1, r4, r0
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	f000 f96a 	bl	800db80 <_sbrk_r>
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d1dd      	bne.n	800d86c <_malloc_r+0x64>
 800d8b0:	e7cf      	b.n	800d852 <_malloc_r+0x4a>
 800d8b2:	bf00      	nop
 800d8b4:	20001eb4 	.word	0x20001eb4
 800d8b8:	20001eb8 	.word	0x20001eb8

0800d8bc <__ssputs_r>:
 800d8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c0:	688e      	ldr	r6, [r1, #8]
 800d8c2:	4682      	mov	sl, r0
 800d8c4:	429e      	cmp	r6, r3
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	4690      	mov	r8, r2
 800d8ca:	461f      	mov	r7, r3
 800d8cc:	d838      	bhi.n	800d940 <__ssputs_r+0x84>
 800d8ce:	898a      	ldrh	r2, [r1, #12]
 800d8d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8d4:	d032      	beq.n	800d93c <__ssputs_r+0x80>
 800d8d6:	6825      	ldr	r5, [r4, #0]
 800d8d8:	6909      	ldr	r1, [r1, #16]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	eba5 0901 	sub.w	r9, r5, r1
 800d8e0:	6965      	ldr	r5, [r4, #20]
 800d8e2:	444b      	add	r3, r9
 800d8e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8ec:	106d      	asrs	r5, r5, #1
 800d8ee:	429d      	cmp	r5, r3
 800d8f0:	bf38      	it	cc
 800d8f2:	461d      	movcc	r5, r3
 800d8f4:	0553      	lsls	r3, r2, #21
 800d8f6:	d531      	bpl.n	800d95c <__ssputs_r+0xa0>
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	f7ff ff85 	bl	800d808 <_malloc_r>
 800d8fe:	4606      	mov	r6, r0
 800d900:	b950      	cbnz	r0, 800d918 <__ssputs_r+0x5c>
 800d902:	230c      	movs	r3, #12
 800d904:	f04f 30ff 	mov.w	r0, #4294967295
 800d908:	f8ca 3000 	str.w	r3, [sl]
 800d90c:	89a3      	ldrh	r3, [r4, #12]
 800d90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d912:	81a3      	strh	r3, [r4, #12]
 800d914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d918:	464a      	mov	r2, r9
 800d91a:	6921      	ldr	r1, [r4, #16]
 800d91c:	f7fc fab6 	bl	8009e8c <memcpy>
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d92a:	81a3      	strh	r3, [r4, #12]
 800d92c:	6126      	str	r6, [r4, #16]
 800d92e:	444e      	add	r6, r9
 800d930:	6026      	str	r6, [r4, #0]
 800d932:	463e      	mov	r6, r7
 800d934:	6165      	str	r5, [r4, #20]
 800d936:	eba5 0509 	sub.w	r5, r5, r9
 800d93a:	60a5      	str	r5, [r4, #8]
 800d93c:	42be      	cmp	r6, r7
 800d93e:	d900      	bls.n	800d942 <__ssputs_r+0x86>
 800d940:	463e      	mov	r6, r7
 800d942:	4632      	mov	r2, r6
 800d944:	4641      	mov	r1, r8
 800d946:	6820      	ldr	r0, [r4, #0]
 800d948:	f7fc faae 	bl	8009ea8 <memmove>
 800d94c:	68a3      	ldr	r3, [r4, #8]
 800d94e:	6822      	ldr	r2, [r4, #0]
 800d950:	1b9b      	subs	r3, r3, r6
 800d952:	4432      	add	r2, r6
 800d954:	2000      	movs	r0, #0
 800d956:	60a3      	str	r3, [r4, #8]
 800d958:	6022      	str	r2, [r4, #0]
 800d95a:	e7db      	b.n	800d914 <__ssputs_r+0x58>
 800d95c:	462a      	mov	r2, r5
 800d95e:	f000 f97b 	bl	800dc58 <_realloc_r>
 800d962:	4606      	mov	r6, r0
 800d964:	2800      	cmp	r0, #0
 800d966:	d1e1      	bne.n	800d92c <__ssputs_r+0x70>
 800d968:	4650      	mov	r0, sl
 800d96a:	6921      	ldr	r1, [r4, #16]
 800d96c:	f7ff ff00 	bl	800d770 <_free_r>
 800d970:	e7c7      	b.n	800d902 <__ssputs_r+0x46>
	...

0800d974 <_svfiprintf_r>:
 800d974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d978:	4698      	mov	r8, r3
 800d97a:	898b      	ldrh	r3, [r1, #12]
 800d97c:	4607      	mov	r7, r0
 800d97e:	061b      	lsls	r3, r3, #24
 800d980:	460d      	mov	r5, r1
 800d982:	4614      	mov	r4, r2
 800d984:	b09d      	sub	sp, #116	; 0x74
 800d986:	d50e      	bpl.n	800d9a6 <_svfiprintf_r+0x32>
 800d988:	690b      	ldr	r3, [r1, #16]
 800d98a:	b963      	cbnz	r3, 800d9a6 <_svfiprintf_r+0x32>
 800d98c:	2140      	movs	r1, #64	; 0x40
 800d98e:	f7ff ff3b 	bl	800d808 <_malloc_r>
 800d992:	6028      	str	r0, [r5, #0]
 800d994:	6128      	str	r0, [r5, #16]
 800d996:	b920      	cbnz	r0, 800d9a2 <_svfiprintf_r+0x2e>
 800d998:	230c      	movs	r3, #12
 800d99a:	603b      	str	r3, [r7, #0]
 800d99c:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a0:	e0d1      	b.n	800db46 <_svfiprintf_r+0x1d2>
 800d9a2:	2340      	movs	r3, #64	; 0x40
 800d9a4:	616b      	str	r3, [r5, #20]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d9aa:	2320      	movs	r3, #32
 800d9ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9b0:	2330      	movs	r3, #48	; 0x30
 800d9b2:	f04f 0901 	mov.w	r9, #1
 800d9b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800db60 <_svfiprintf_r+0x1ec>
 800d9be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9c2:	4623      	mov	r3, r4
 800d9c4:	469a      	mov	sl, r3
 800d9c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ca:	b10a      	cbz	r2, 800d9d0 <_svfiprintf_r+0x5c>
 800d9cc:	2a25      	cmp	r2, #37	; 0x25
 800d9ce:	d1f9      	bne.n	800d9c4 <_svfiprintf_r+0x50>
 800d9d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d9d4:	d00b      	beq.n	800d9ee <_svfiprintf_r+0x7a>
 800d9d6:	465b      	mov	r3, fp
 800d9d8:	4622      	mov	r2, r4
 800d9da:	4629      	mov	r1, r5
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7ff ff6d 	bl	800d8bc <__ssputs_r>
 800d9e2:	3001      	adds	r0, #1
 800d9e4:	f000 80aa 	beq.w	800db3c <_svfiprintf_r+0x1c8>
 800d9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9ea:	445a      	add	r2, fp
 800d9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 80a2 	beq.w	800db3c <_svfiprintf_r+0x1c8>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da02:	f10a 0a01 	add.w	sl, sl, #1
 800da06:	9304      	str	r3, [sp, #16]
 800da08:	9307      	str	r3, [sp, #28]
 800da0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da0e:	931a      	str	r3, [sp, #104]	; 0x68
 800da10:	4654      	mov	r4, sl
 800da12:	2205      	movs	r2, #5
 800da14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da18:	4851      	ldr	r0, [pc, #324]	; (800db60 <_svfiprintf_r+0x1ec>)
 800da1a:	f7ff f9d5 	bl	800cdc8 <memchr>
 800da1e:	9a04      	ldr	r2, [sp, #16]
 800da20:	b9d8      	cbnz	r0, 800da5a <_svfiprintf_r+0xe6>
 800da22:	06d0      	lsls	r0, r2, #27
 800da24:	bf44      	itt	mi
 800da26:	2320      	movmi	r3, #32
 800da28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da2c:	0711      	lsls	r1, r2, #28
 800da2e:	bf44      	itt	mi
 800da30:	232b      	movmi	r3, #43	; 0x2b
 800da32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da36:	f89a 3000 	ldrb.w	r3, [sl]
 800da3a:	2b2a      	cmp	r3, #42	; 0x2a
 800da3c:	d015      	beq.n	800da6a <_svfiprintf_r+0xf6>
 800da3e:	4654      	mov	r4, sl
 800da40:	2000      	movs	r0, #0
 800da42:	f04f 0c0a 	mov.w	ip, #10
 800da46:	9a07      	ldr	r2, [sp, #28]
 800da48:	4621      	mov	r1, r4
 800da4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da4e:	3b30      	subs	r3, #48	; 0x30
 800da50:	2b09      	cmp	r3, #9
 800da52:	d94e      	bls.n	800daf2 <_svfiprintf_r+0x17e>
 800da54:	b1b0      	cbz	r0, 800da84 <_svfiprintf_r+0x110>
 800da56:	9207      	str	r2, [sp, #28]
 800da58:	e014      	b.n	800da84 <_svfiprintf_r+0x110>
 800da5a:	eba0 0308 	sub.w	r3, r0, r8
 800da5e:	fa09 f303 	lsl.w	r3, r9, r3
 800da62:	4313      	orrs	r3, r2
 800da64:	46a2      	mov	sl, r4
 800da66:	9304      	str	r3, [sp, #16]
 800da68:	e7d2      	b.n	800da10 <_svfiprintf_r+0x9c>
 800da6a:	9b03      	ldr	r3, [sp, #12]
 800da6c:	1d19      	adds	r1, r3, #4
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	9103      	str	r1, [sp, #12]
 800da72:	2b00      	cmp	r3, #0
 800da74:	bfbb      	ittet	lt
 800da76:	425b      	neglt	r3, r3
 800da78:	f042 0202 	orrlt.w	r2, r2, #2
 800da7c:	9307      	strge	r3, [sp, #28]
 800da7e:	9307      	strlt	r3, [sp, #28]
 800da80:	bfb8      	it	lt
 800da82:	9204      	strlt	r2, [sp, #16]
 800da84:	7823      	ldrb	r3, [r4, #0]
 800da86:	2b2e      	cmp	r3, #46	; 0x2e
 800da88:	d10c      	bne.n	800daa4 <_svfiprintf_r+0x130>
 800da8a:	7863      	ldrb	r3, [r4, #1]
 800da8c:	2b2a      	cmp	r3, #42	; 0x2a
 800da8e:	d135      	bne.n	800dafc <_svfiprintf_r+0x188>
 800da90:	9b03      	ldr	r3, [sp, #12]
 800da92:	3402      	adds	r4, #2
 800da94:	1d1a      	adds	r2, r3, #4
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	9203      	str	r2, [sp, #12]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	bfb8      	it	lt
 800da9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800daa2:	9305      	str	r3, [sp, #20]
 800daa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db70 <_svfiprintf_r+0x1fc>
 800daa8:	2203      	movs	r2, #3
 800daaa:	4650      	mov	r0, sl
 800daac:	7821      	ldrb	r1, [r4, #0]
 800daae:	f7ff f98b 	bl	800cdc8 <memchr>
 800dab2:	b140      	cbz	r0, 800dac6 <_svfiprintf_r+0x152>
 800dab4:	2340      	movs	r3, #64	; 0x40
 800dab6:	eba0 000a 	sub.w	r0, r0, sl
 800daba:	fa03 f000 	lsl.w	r0, r3, r0
 800dabe:	9b04      	ldr	r3, [sp, #16]
 800dac0:	3401      	adds	r4, #1
 800dac2:	4303      	orrs	r3, r0
 800dac4:	9304      	str	r3, [sp, #16]
 800dac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daca:	2206      	movs	r2, #6
 800dacc:	4825      	ldr	r0, [pc, #148]	; (800db64 <_svfiprintf_r+0x1f0>)
 800dace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dad2:	f7ff f979 	bl	800cdc8 <memchr>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d038      	beq.n	800db4c <_svfiprintf_r+0x1d8>
 800dada:	4b23      	ldr	r3, [pc, #140]	; (800db68 <_svfiprintf_r+0x1f4>)
 800dadc:	bb1b      	cbnz	r3, 800db26 <_svfiprintf_r+0x1b2>
 800dade:	9b03      	ldr	r3, [sp, #12]
 800dae0:	3307      	adds	r3, #7
 800dae2:	f023 0307 	bic.w	r3, r3, #7
 800dae6:	3308      	adds	r3, #8
 800dae8:	9303      	str	r3, [sp, #12]
 800daea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daec:	4433      	add	r3, r6
 800daee:	9309      	str	r3, [sp, #36]	; 0x24
 800daf0:	e767      	b.n	800d9c2 <_svfiprintf_r+0x4e>
 800daf2:	460c      	mov	r4, r1
 800daf4:	2001      	movs	r0, #1
 800daf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dafa:	e7a5      	b.n	800da48 <_svfiprintf_r+0xd4>
 800dafc:	2300      	movs	r3, #0
 800dafe:	f04f 0c0a 	mov.w	ip, #10
 800db02:	4619      	mov	r1, r3
 800db04:	3401      	adds	r4, #1
 800db06:	9305      	str	r3, [sp, #20]
 800db08:	4620      	mov	r0, r4
 800db0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db0e:	3a30      	subs	r2, #48	; 0x30
 800db10:	2a09      	cmp	r2, #9
 800db12:	d903      	bls.n	800db1c <_svfiprintf_r+0x1a8>
 800db14:	2b00      	cmp	r3, #0
 800db16:	d0c5      	beq.n	800daa4 <_svfiprintf_r+0x130>
 800db18:	9105      	str	r1, [sp, #20]
 800db1a:	e7c3      	b.n	800daa4 <_svfiprintf_r+0x130>
 800db1c:	4604      	mov	r4, r0
 800db1e:	2301      	movs	r3, #1
 800db20:	fb0c 2101 	mla	r1, ip, r1, r2
 800db24:	e7f0      	b.n	800db08 <_svfiprintf_r+0x194>
 800db26:	ab03      	add	r3, sp, #12
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	462a      	mov	r2, r5
 800db2c:	4638      	mov	r0, r7
 800db2e:	4b0f      	ldr	r3, [pc, #60]	; (800db6c <_svfiprintf_r+0x1f8>)
 800db30:	a904      	add	r1, sp, #16
 800db32:	f7fc fa79 	bl	800a028 <_printf_float>
 800db36:	1c42      	adds	r2, r0, #1
 800db38:	4606      	mov	r6, r0
 800db3a:	d1d6      	bne.n	800daea <_svfiprintf_r+0x176>
 800db3c:	89ab      	ldrh	r3, [r5, #12]
 800db3e:	065b      	lsls	r3, r3, #25
 800db40:	f53f af2c 	bmi.w	800d99c <_svfiprintf_r+0x28>
 800db44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db46:	b01d      	add	sp, #116	; 0x74
 800db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4c:	ab03      	add	r3, sp, #12
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	462a      	mov	r2, r5
 800db52:	4638      	mov	r0, r7
 800db54:	4b05      	ldr	r3, [pc, #20]	; (800db6c <_svfiprintf_r+0x1f8>)
 800db56:	a904      	add	r1, sp, #16
 800db58:	f7fc fd02 	bl	800a560 <_printf_i>
 800db5c:	e7eb      	b.n	800db36 <_svfiprintf_r+0x1c2>
 800db5e:	bf00      	nop
 800db60:	0800efd4 	.word	0x0800efd4
 800db64:	0800efde 	.word	0x0800efde
 800db68:	0800a029 	.word	0x0800a029
 800db6c:	0800d8bd 	.word	0x0800d8bd
 800db70:	0800efda 	.word	0x0800efda

0800db74 <nan>:
 800db74:	2000      	movs	r0, #0
 800db76:	4901      	ldr	r1, [pc, #4]	; (800db7c <nan+0x8>)
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	7ff80000 	.word	0x7ff80000

0800db80 <_sbrk_r>:
 800db80:	b538      	push	{r3, r4, r5, lr}
 800db82:	2300      	movs	r3, #0
 800db84:	4d05      	ldr	r5, [pc, #20]	; (800db9c <_sbrk_r+0x1c>)
 800db86:	4604      	mov	r4, r0
 800db88:	4608      	mov	r0, r1
 800db8a:	602b      	str	r3, [r5, #0]
 800db8c:	f000 fdf8 	bl	800e780 <_sbrk>
 800db90:	1c43      	adds	r3, r0, #1
 800db92:	d102      	bne.n	800db9a <_sbrk_r+0x1a>
 800db94:	682b      	ldr	r3, [r5, #0]
 800db96:	b103      	cbz	r3, 800db9a <_sbrk_r+0x1a>
 800db98:	6023      	str	r3, [r4, #0]
 800db9a:	bd38      	pop	{r3, r4, r5, pc}
 800db9c:	200022d8 	.word	0x200022d8

0800dba0 <strncmp>:
 800dba0:	b510      	push	{r4, lr}
 800dba2:	b16a      	cbz	r2, 800dbc0 <strncmp+0x20>
 800dba4:	3901      	subs	r1, #1
 800dba6:	1884      	adds	r4, r0, r2
 800dba8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dbac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d103      	bne.n	800dbbc <strncmp+0x1c>
 800dbb4:	42a0      	cmp	r0, r4
 800dbb6:	d001      	beq.n	800dbbc <strncmp+0x1c>
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d1f5      	bne.n	800dba8 <strncmp+0x8>
 800dbbc:	1a98      	subs	r0, r3, r2
 800dbbe:	bd10      	pop	{r4, pc}
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	e7fc      	b.n	800dbbe <strncmp+0x1e>

0800dbc4 <__ascii_wctomb>:
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	4608      	mov	r0, r1
 800dbc8:	b141      	cbz	r1, 800dbdc <__ascii_wctomb+0x18>
 800dbca:	2aff      	cmp	r2, #255	; 0xff
 800dbcc:	d904      	bls.n	800dbd8 <__ascii_wctomb+0x14>
 800dbce:	228a      	movs	r2, #138	; 0x8a
 800dbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd4:	601a      	str	r2, [r3, #0]
 800dbd6:	4770      	bx	lr
 800dbd8:	2001      	movs	r0, #1
 800dbda:	700a      	strb	r2, [r1, #0]
 800dbdc:	4770      	bx	lr
	...

0800dbe0 <__assert_func>:
 800dbe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbe2:	4614      	mov	r4, r2
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	4b09      	ldr	r3, [pc, #36]	; (800dc0c <__assert_func+0x2c>)
 800dbe8:	4605      	mov	r5, r0
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	68d8      	ldr	r0, [r3, #12]
 800dbee:	b14c      	cbz	r4, 800dc04 <__assert_func+0x24>
 800dbf0:	4b07      	ldr	r3, [pc, #28]	; (800dc10 <__assert_func+0x30>)
 800dbf2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbf6:	9100      	str	r1, [sp, #0]
 800dbf8:	462b      	mov	r3, r5
 800dbfa:	4906      	ldr	r1, [pc, #24]	; (800dc14 <__assert_func+0x34>)
 800dbfc:	f000 f80e 	bl	800dc1c <fiprintf>
 800dc00:	f000 fa68 	bl	800e0d4 <abort>
 800dc04:	4b04      	ldr	r3, [pc, #16]	; (800dc18 <__assert_func+0x38>)
 800dc06:	461c      	mov	r4, r3
 800dc08:	e7f3      	b.n	800dbf2 <__assert_func+0x12>
 800dc0a:	bf00      	nop
 800dc0c:	20000014 	.word	0x20000014
 800dc10:	0800efe5 	.word	0x0800efe5
 800dc14:	0800eff2 	.word	0x0800eff2
 800dc18:	0800f020 	.word	0x0800f020

0800dc1c <fiprintf>:
 800dc1c:	b40e      	push	{r1, r2, r3}
 800dc1e:	b503      	push	{r0, r1, lr}
 800dc20:	4601      	mov	r1, r0
 800dc22:	ab03      	add	r3, sp, #12
 800dc24:	4805      	ldr	r0, [pc, #20]	; (800dc3c <fiprintf+0x20>)
 800dc26:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc2a:	6800      	ldr	r0, [r0, #0]
 800dc2c:	9301      	str	r3, [sp, #4]
 800dc2e:	f000 f861 	bl	800dcf4 <_vfiprintf_r>
 800dc32:	b002      	add	sp, #8
 800dc34:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc38:	b003      	add	sp, #12
 800dc3a:	4770      	bx	lr
 800dc3c:	20000014 	.word	0x20000014

0800dc40 <__malloc_lock>:
 800dc40:	4801      	ldr	r0, [pc, #4]	; (800dc48 <__malloc_lock+0x8>)
 800dc42:	f000 bc07 	b.w	800e454 <__retarget_lock_acquire_recursive>
 800dc46:	bf00      	nop
 800dc48:	200022e0 	.word	0x200022e0

0800dc4c <__malloc_unlock>:
 800dc4c:	4801      	ldr	r0, [pc, #4]	; (800dc54 <__malloc_unlock+0x8>)
 800dc4e:	f000 bc02 	b.w	800e456 <__retarget_lock_release_recursive>
 800dc52:	bf00      	nop
 800dc54:	200022e0 	.word	0x200022e0

0800dc58 <_realloc_r>:
 800dc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5a:	4607      	mov	r7, r0
 800dc5c:	4614      	mov	r4, r2
 800dc5e:	460e      	mov	r6, r1
 800dc60:	b921      	cbnz	r1, 800dc6c <_realloc_r+0x14>
 800dc62:	4611      	mov	r1, r2
 800dc64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc68:	f7ff bdce 	b.w	800d808 <_malloc_r>
 800dc6c:	b922      	cbnz	r2, 800dc78 <_realloc_r+0x20>
 800dc6e:	f7ff fd7f 	bl	800d770 <_free_r>
 800dc72:	4625      	mov	r5, r4
 800dc74:	4628      	mov	r0, r5
 800dc76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc78:	f000 fc52 	bl	800e520 <_malloc_usable_size_r>
 800dc7c:	42a0      	cmp	r0, r4
 800dc7e:	d20f      	bcs.n	800dca0 <_realloc_r+0x48>
 800dc80:	4621      	mov	r1, r4
 800dc82:	4638      	mov	r0, r7
 800dc84:	f7ff fdc0 	bl	800d808 <_malloc_r>
 800dc88:	4605      	mov	r5, r0
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d0f2      	beq.n	800dc74 <_realloc_r+0x1c>
 800dc8e:	4631      	mov	r1, r6
 800dc90:	4622      	mov	r2, r4
 800dc92:	f7fc f8fb 	bl	8009e8c <memcpy>
 800dc96:	4631      	mov	r1, r6
 800dc98:	4638      	mov	r0, r7
 800dc9a:	f7ff fd69 	bl	800d770 <_free_r>
 800dc9e:	e7e9      	b.n	800dc74 <_realloc_r+0x1c>
 800dca0:	4635      	mov	r5, r6
 800dca2:	e7e7      	b.n	800dc74 <_realloc_r+0x1c>

0800dca4 <__sfputc_r>:
 800dca4:	6893      	ldr	r3, [r2, #8]
 800dca6:	b410      	push	{r4}
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	6093      	str	r3, [r2, #8]
 800dcae:	da07      	bge.n	800dcc0 <__sfputc_r+0x1c>
 800dcb0:	6994      	ldr	r4, [r2, #24]
 800dcb2:	42a3      	cmp	r3, r4
 800dcb4:	db01      	blt.n	800dcba <__sfputc_r+0x16>
 800dcb6:	290a      	cmp	r1, #10
 800dcb8:	d102      	bne.n	800dcc0 <__sfputc_r+0x1c>
 800dcba:	bc10      	pop	{r4}
 800dcbc:	f000 b94a 	b.w	800df54 <__swbuf_r>
 800dcc0:	6813      	ldr	r3, [r2, #0]
 800dcc2:	1c58      	adds	r0, r3, #1
 800dcc4:	6010      	str	r0, [r2, #0]
 800dcc6:	7019      	strb	r1, [r3, #0]
 800dcc8:	4608      	mov	r0, r1
 800dcca:	bc10      	pop	{r4}
 800dccc:	4770      	bx	lr

0800dcce <__sfputs_r>:
 800dcce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd0:	4606      	mov	r6, r0
 800dcd2:	460f      	mov	r7, r1
 800dcd4:	4614      	mov	r4, r2
 800dcd6:	18d5      	adds	r5, r2, r3
 800dcd8:	42ac      	cmp	r4, r5
 800dcda:	d101      	bne.n	800dce0 <__sfputs_r+0x12>
 800dcdc:	2000      	movs	r0, #0
 800dcde:	e007      	b.n	800dcf0 <__sfputs_r+0x22>
 800dce0:	463a      	mov	r2, r7
 800dce2:	4630      	mov	r0, r6
 800dce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce8:	f7ff ffdc 	bl	800dca4 <__sfputc_r>
 800dcec:	1c43      	adds	r3, r0, #1
 800dcee:	d1f3      	bne.n	800dcd8 <__sfputs_r+0xa>
 800dcf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcf4 <_vfiprintf_r>:
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	4614      	mov	r4, r2
 800dcfc:	4698      	mov	r8, r3
 800dcfe:	4606      	mov	r6, r0
 800dd00:	b09d      	sub	sp, #116	; 0x74
 800dd02:	b118      	cbz	r0, 800dd0c <_vfiprintf_r+0x18>
 800dd04:	6983      	ldr	r3, [r0, #24]
 800dd06:	b90b      	cbnz	r3, 800dd0c <_vfiprintf_r+0x18>
 800dd08:	f000 fb06 	bl	800e318 <__sinit>
 800dd0c:	4b89      	ldr	r3, [pc, #548]	; (800df34 <_vfiprintf_r+0x240>)
 800dd0e:	429d      	cmp	r5, r3
 800dd10:	d11b      	bne.n	800dd4a <_vfiprintf_r+0x56>
 800dd12:	6875      	ldr	r5, [r6, #4]
 800dd14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd16:	07d9      	lsls	r1, r3, #31
 800dd18:	d405      	bmi.n	800dd26 <_vfiprintf_r+0x32>
 800dd1a:	89ab      	ldrh	r3, [r5, #12]
 800dd1c:	059a      	lsls	r2, r3, #22
 800dd1e:	d402      	bmi.n	800dd26 <_vfiprintf_r+0x32>
 800dd20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd22:	f000 fb97 	bl	800e454 <__retarget_lock_acquire_recursive>
 800dd26:	89ab      	ldrh	r3, [r5, #12]
 800dd28:	071b      	lsls	r3, r3, #28
 800dd2a:	d501      	bpl.n	800dd30 <_vfiprintf_r+0x3c>
 800dd2c:	692b      	ldr	r3, [r5, #16]
 800dd2e:	b9eb      	cbnz	r3, 800dd6c <_vfiprintf_r+0x78>
 800dd30:	4629      	mov	r1, r5
 800dd32:	4630      	mov	r0, r6
 800dd34:	f000 f960 	bl	800dff8 <__swsetup_r>
 800dd38:	b1c0      	cbz	r0, 800dd6c <_vfiprintf_r+0x78>
 800dd3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd3c:	07dc      	lsls	r4, r3, #31
 800dd3e:	d50e      	bpl.n	800dd5e <_vfiprintf_r+0x6a>
 800dd40:	f04f 30ff 	mov.w	r0, #4294967295
 800dd44:	b01d      	add	sp, #116	; 0x74
 800dd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4a:	4b7b      	ldr	r3, [pc, #492]	; (800df38 <_vfiprintf_r+0x244>)
 800dd4c:	429d      	cmp	r5, r3
 800dd4e:	d101      	bne.n	800dd54 <_vfiprintf_r+0x60>
 800dd50:	68b5      	ldr	r5, [r6, #8]
 800dd52:	e7df      	b.n	800dd14 <_vfiprintf_r+0x20>
 800dd54:	4b79      	ldr	r3, [pc, #484]	; (800df3c <_vfiprintf_r+0x248>)
 800dd56:	429d      	cmp	r5, r3
 800dd58:	bf08      	it	eq
 800dd5a:	68f5      	ldreq	r5, [r6, #12]
 800dd5c:	e7da      	b.n	800dd14 <_vfiprintf_r+0x20>
 800dd5e:	89ab      	ldrh	r3, [r5, #12]
 800dd60:	0598      	lsls	r0, r3, #22
 800dd62:	d4ed      	bmi.n	800dd40 <_vfiprintf_r+0x4c>
 800dd64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd66:	f000 fb76 	bl	800e456 <__retarget_lock_release_recursive>
 800dd6a:	e7e9      	b.n	800dd40 <_vfiprintf_r+0x4c>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd70:	2320      	movs	r3, #32
 800dd72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd76:	2330      	movs	r3, #48	; 0x30
 800dd78:	f04f 0901 	mov.w	r9, #1
 800dd7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800df40 <_vfiprintf_r+0x24c>
 800dd84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd88:	4623      	mov	r3, r4
 800dd8a:	469a      	mov	sl, r3
 800dd8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd90:	b10a      	cbz	r2, 800dd96 <_vfiprintf_r+0xa2>
 800dd92:	2a25      	cmp	r2, #37	; 0x25
 800dd94:	d1f9      	bne.n	800dd8a <_vfiprintf_r+0x96>
 800dd96:	ebba 0b04 	subs.w	fp, sl, r4
 800dd9a:	d00b      	beq.n	800ddb4 <_vfiprintf_r+0xc0>
 800dd9c:	465b      	mov	r3, fp
 800dd9e:	4622      	mov	r2, r4
 800dda0:	4629      	mov	r1, r5
 800dda2:	4630      	mov	r0, r6
 800dda4:	f7ff ff93 	bl	800dcce <__sfputs_r>
 800dda8:	3001      	adds	r0, #1
 800ddaa:	f000 80aa 	beq.w	800df02 <_vfiprintf_r+0x20e>
 800ddae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddb0:	445a      	add	r2, fp
 800ddb2:	9209      	str	r2, [sp, #36]	; 0x24
 800ddb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f000 80a2 	beq.w	800df02 <_vfiprintf_r+0x20e>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddc8:	f10a 0a01 	add.w	sl, sl, #1
 800ddcc:	9304      	str	r3, [sp, #16]
 800ddce:	9307      	str	r3, [sp, #28]
 800ddd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddd4:	931a      	str	r3, [sp, #104]	; 0x68
 800ddd6:	4654      	mov	r4, sl
 800ddd8:	2205      	movs	r2, #5
 800ddda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddde:	4858      	ldr	r0, [pc, #352]	; (800df40 <_vfiprintf_r+0x24c>)
 800dde0:	f7fe fff2 	bl	800cdc8 <memchr>
 800dde4:	9a04      	ldr	r2, [sp, #16]
 800dde6:	b9d8      	cbnz	r0, 800de20 <_vfiprintf_r+0x12c>
 800dde8:	06d1      	lsls	r1, r2, #27
 800ddea:	bf44      	itt	mi
 800ddec:	2320      	movmi	r3, #32
 800ddee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddf2:	0713      	lsls	r3, r2, #28
 800ddf4:	bf44      	itt	mi
 800ddf6:	232b      	movmi	r3, #43	; 0x2b
 800ddf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddfc:	f89a 3000 	ldrb.w	r3, [sl]
 800de00:	2b2a      	cmp	r3, #42	; 0x2a
 800de02:	d015      	beq.n	800de30 <_vfiprintf_r+0x13c>
 800de04:	4654      	mov	r4, sl
 800de06:	2000      	movs	r0, #0
 800de08:	f04f 0c0a 	mov.w	ip, #10
 800de0c:	9a07      	ldr	r2, [sp, #28]
 800de0e:	4621      	mov	r1, r4
 800de10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de14:	3b30      	subs	r3, #48	; 0x30
 800de16:	2b09      	cmp	r3, #9
 800de18:	d94e      	bls.n	800deb8 <_vfiprintf_r+0x1c4>
 800de1a:	b1b0      	cbz	r0, 800de4a <_vfiprintf_r+0x156>
 800de1c:	9207      	str	r2, [sp, #28]
 800de1e:	e014      	b.n	800de4a <_vfiprintf_r+0x156>
 800de20:	eba0 0308 	sub.w	r3, r0, r8
 800de24:	fa09 f303 	lsl.w	r3, r9, r3
 800de28:	4313      	orrs	r3, r2
 800de2a:	46a2      	mov	sl, r4
 800de2c:	9304      	str	r3, [sp, #16]
 800de2e:	e7d2      	b.n	800ddd6 <_vfiprintf_r+0xe2>
 800de30:	9b03      	ldr	r3, [sp, #12]
 800de32:	1d19      	adds	r1, r3, #4
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	9103      	str	r1, [sp, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	bfbb      	ittet	lt
 800de3c:	425b      	neglt	r3, r3
 800de3e:	f042 0202 	orrlt.w	r2, r2, #2
 800de42:	9307      	strge	r3, [sp, #28]
 800de44:	9307      	strlt	r3, [sp, #28]
 800de46:	bfb8      	it	lt
 800de48:	9204      	strlt	r2, [sp, #16]
 800de4a:	7823      	ldrb	r3, [r4, #0]
 800de4c:	2b2e      	cmp	r3, #46	; 0x2e
 800de4e:	d10c      	bne.n	800de6a <_vfiprintf_r+0x176>
 800de50:	7863      	ldrb	r3, [r4, #1]
 800de52:	2b2a      	cmp	r3, #42	; 0x2a
 800de54:	d135      	bne.n	800dec2 <_vfiprintf_r+0x1ce>
 800de56:	9b03      	ldr	r3, [sp, #12]
 800de58:	3402      	adds	r4, #2
 800de5a:	1d1a      	adds	r2, r3, #4
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	9203      	str	r2, [sp, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	bfb8      	it	lt
 800de64:	f04f 33ff 	movlt.w	r3, #4294967295
 800de68:	9305      	str	r3, [sp, #20]
 800de6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df50 <_vfiprintf_r+0x25c>
 800de6e:	2203      	movs	r2, #3
 800de70:	4650      	mov	r0, sl
 800de72:	7821      	ldrb	r1, [r4, #0]
 800de74:	f7fe ffa8 	bl	800cdc8 <memchr>
 800de78:	b140      	cbz	r0, 800de8c <_vfiprintf_r+0x198>
 800de7a:	2340      	movs	r3, #64	; 0x40
 800de7c:	eba0 000a 	sub.w	r0, r0, sl
 800de80:	fa03 f000 	lsl.w	r0, r3, r0
 800de84:	9b04      	ldr	r3, [sp, #16]
 800de86:	3401      	adds	r4, #1
 800de88:	4303      	orrs	r3, r0
 800de8a:	9304      	str	r3, [sp, #16]
 800de8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de90:	2206      	movs	r2, #6
 800de92:	482c      	ldr	r0, [pc, #176]	; (800df44 <_vfiprintf_r+0x250>)
 800de94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de98:	f7fe ff96 	bl	800cdc8 <memchr>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d03f      	beq.n	800df20 <_vfiprintf_r+0x22c>
 800dea0:	4b29      	ldr	r3, [pc, #164]	; (800df48 <_vfiprintf_r+0x254>)
 800dea2:	bb1b      	cbnz	r3, 800deec <_vfiprintf_r+0x1f8>
 800dea4:	9b03      	ldr	r3, [sp, #12]
 800dea6:	3307      	adds	r3, #7
 800dea8:	f023 0307 	bic.w	r3, r3, #7
 800deac:	3308      	adds	r3, #8
 800deae:	9303      	str	r3, [sp, #12]
 800deb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb2:	443b      	add	r3, r7
 800deb4:	9309      	str	r3, [sp, #36]	; 0x24
 800deb6:	e767      	b.n	800dd88 <_vfiprintf_r+0x94>
 800deb8:	460c      	mov	r4, r1
 800deba:	2001      	movs	r0, #1
 800debc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dec0:	e7a5      	b.n	800de0e <_vfiprintf_r+0x11a>
 800dec2:	2300      	movs	r3, #0
 800dec4:	f04f 0c0a 	mov.w	ip, #10
 800dec8:	4619      	mov	r1, r3
 800deca:	3401      	adds	r4, #1
 800decc:	9305      	str	r3, [sp, #20]
 800dece:	4620      	mov	r0, r4
 800ded0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ded4:	3a30      	subs	r2, #48	; 0x30
 800ded6:	2a09      	cmp	r2, #9
 800ded8:	d903      	bls.n	800dee2 <_vfiprintf_r+0x1ee>
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d0c5      	beq.n	800de6a <_vfiprintf_r+0x176>
 800dede:	9105      	str	r1, [sp, #20]
 800dee0:	e7c3      	b.n	800de6a <_vfiprintf_r+0x176>
 800dee2:	4604      	mov	r4, r0
 800dee4:	2301      	movs	r3, #1
 800dee6:	fb0c 2101 	mla	r1, ip, r1, r2
 800deea:	e7f0      	b.n	800dece <_vfiprintf_r+0x1da>
 800deec:	ab03      	add	r3, sp, #12
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	462a      	mov	r2, r5
 800def2:	4630      	mov	r0, r6
 800def4:	4b15      	ldr	r3, [pc, #84]	; (800df4c <_vfiprintf_r+0x258>)
 800def6:	a904      	add	r1, sp, #16
 800def8:	f7fc f896 	bl	800a028 <_printf_float>
 800defc:	4607      	mov	r7, r0
 800defe:	1c78      	adds	r0, r7, #1
 800df00:	d1d6      	bne.n	800deb0 <_vfiprintf_r+0x1bc>
 800df02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df04:	07d9      	lsls	r1, r3, #31
 800df06:	d405      	bmi.n	800df14 <_vfiprintf_r+0x220>
 800df08:	89ab      	ldrh	r3, [r5, #12]
 800df0a:	059a      	lsls	r2, r3, #22
 800df0c:	d402      	bmi.n	800df14 <_vfiprintf_r+0x220>
 800df0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df10:	f000 faa1 	bl	800e456 <__retarget_lock_release_recursive>
 800df14:	89ab      	ldrh	r3, [r5, #12]
 800df16:	065b      	lsls	r3, r3, #25
 800df18:	f53f af12 	bmi.w	800dd40 <_vfiprintf_r+0x4c>
 800df1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df1e:	e711      	b.n	800dd44 <_vfiprintf_r+0x50>
 800df20:	ab03      	add	r3, sp, #12
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	462a      	mov	r2, r5
 800df26:	4630      	mov	r0, r6
 800df28:	4b08      	ldr	r3, [pc, #32]	; (800df4c <_vfiprintf_r+0x258>)
 800df2a:	a904      	add	r1, sp, #16
 800df2c:	f7fc fb18 	bl	800a560 <_printf_i>
 800df30:	e7e4      	b.n	800defc <_vfiprintf_r+0x208>
 800df32:	bf00      	nop
 800df34:	0800f044 	.word	0x0800f044
 800df38:	0800f064 	.word	0x0800f064
 800df3c:	0800f024 	.word	0x0800f024
 800df40:	0800efd4 	.word	0x0800efd4
 800df44:	0800efde 	.word	0x0800efde
 800df48:	0800a029 	.word	0x0800a029
 800df4c:	0800dccf 	.word	0x0800dccf
 800df50:	0800efda 	.word	0x0800efda

0800df54 <__swbuf_r>:
 800df54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df56:	460e      	mov	r6, r1
 800df58:	4614      	mov	r4, r2
 800df5a:	4605      	mov	r5, r0
 800df5c:	b118      	cbz	r0, 800df66 <__swbuf_r+0x12>
 800df5e:	6983      	ldr	r3, [r0, #24]
 800df60:	b90b      	cbnz	r3, 800df66 <__swbuf_r+0x12>
 800df62:	f000 f9d9 	bl	800e318 <__sinit>
 800df66:	4b21      	ldr	r3, [pc, #132]	; (800dfec <__swbuf_r+0x98>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	d12b      	bne.n	800dfc4 <__swbuf_r+0x70>
 800df6c:	686c      	ldr	r4, [r5, #4]
 800df6e:	69a3      	ldr	r3, [r4, #24]
 800df70:	60a3      	str	r3, [r4, #8]
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	071a      	lsls	r2, r3, #28
 800df76:	d52f      	bpl.n	800dfd8 <__swbuf_r+0x84>
 800df78:	6923      	ldr	r3, [r4, #16]
 800df7a:	b36b      	cbz	r3, 800dfd8 <__swbuf_r+0x84>
 800df7c:	6923      	ldr	r3, [r4, #16]
 800df7e:	6820      	ldr	r0, [r4, #0]
 800df80:	b2f6      	uxtb	r6, r6
 800df82:	1ac0      	subs	r0, r0, r3
 800df84:	6963      	ldr	r3, [r4, #20]
 800df86:	4637      	mov	r7, r6
 800df88:	4283      	cmp	r3, r0
 800df8a:	dc04      	bgt.n	800df96 <__swbuf_r+0x42>
 800df8c:	4621      	mov	r1, r4
 800df8e:	4628      	mov	r0, r5
 800df90:	f000 f92e 	bl	800e1f0 <_fflush_r>
 800df94:	bb30      	cbnz	r0, 800dfe4 <__swbuf_r+0x90>
 800df96:	68a3      	ldr	r3, [r4, #8]
 800df98:	3001      	adds	r0, #1
 800df9a:	3b01      	subs	r3, #1
 800df9c:	60a3      	str	r3, [r4, #8]
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	1c5a      	adds	r2, r3, #1
 800dfa2:	6022      	str	r2, [r4, #0]
 800dfa4:	701e      	strb	r6, [r3, #0]
 800dfa6:	6963      	ldr	r3, [r4, #20]
 800dfa8:	4283      	cmp	r3, r0
 800dfaa:	d004      	beq.n	800dfb6 <__swbuf_r+0x62>
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	07db      	lsls	r3, r3, #31
 800dfb0:	d506      	bpl.n	800dfc0 <__swbuf_r+0x6c>
 800dfb2:	2e0a      	cmp	r6, #10
 800dfb4:	d104      	bne.n	800dfc0 <__swbuf_r+0x6c>
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4628      	mov	r0, r5
 800dfba:	f000 f919 	bl	800e1f0 <_fflush_r>
 800dfbe:	b988      	cbnz	r0, 800dfe4 <__swbuf_r+0x90>
 800dfc0:	4638      	mov	r0, r7
 800dfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc4:	4b0a      	ldr	r3, [pc, #40]	; (800dff0 <__swbuf_r+0x9c>)
 800dfc6:	429c      	cmp	r4, r3
 800dfc8:	d101      	bne.n	800dfce <__swbuf_r+0x7a>
 800dfca:	68ac      	ldr	r4, [r5, #8]
 800dfcc:	e7cf      	b.n	800df6e <__swbuf_r+0x1a>
 800dfce:	4b09      	ldr	r3, [pc, #36]	; (800dff4 <__swbuf_r+0xa0>)
 800dfd0:	429c      	cmp	r4, r3
 800dfd2:	bf08      	it	eq
 800dfd4:	68ec      	ldreq	r4, [r5, #12]
 800dfd6:	e7ca      	b.n	800df6e <__swbuf_r+0x1a>
 800dfd8:	4621      	mov	r1, r4
 800dfda:	4628      	mov	r0, r5
 800dfdc:	f000 f80c 	bl	800dff8 <__swsetup_r>
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d0cb      	beq.n	800df7c <__swbuf_r+0x28>
 800dfe4:	f04f 37ff 	mov.w	r7, #4294967295
 800dfe8:	e7ea      	b.n	800dfc0 <__swbuf_r+0x6c>
 800dfea:	bf00      	nop
 800dfec:	0800f044 	.word	0x0800f044
 800dff0:	0800f064 	.word	0x0800f064
 800dff4:	0800f024 	.word	0x0800f024

0800dff8 <__swsetup_r>:
 800dff8:	4b32      	ldr	r3, [pc, #200]	; (800e0c4 <__swsetup_r+0xcc>)
 800dffa:	b570      	push	{r4, r5, r6, lr}
 800dffc:	681d      	ldr	r5, [r3, #0]
 800dffe:	4606      	mov	r6, r0
 800e000:	460c      	mov	r4, r1
 800e002:	b125      	cbz	r5, 800e00e <__swsetup_r+0x16>
 800e004:	69ab      	ldr	r3, [r5, #24]
 800e006:	b913      	cbnz	r3, 800e00e <__swsetup_r+0x16>
 800e008:	4628      	mov	r0, r5
 800e00a:	f000 f985 	bl	800e318 <__sinit>
 800e00e:	4b2e      	ldr	r3, [pc, #184]	; (800e0c8 <__swsetup_r+0xd0>)
 800e010:	429c      	cmp	r4, r3
 800e012:	d10f      	bne.n	800e034 <__swsetup_r+0x3c>
 800e014:	686c      	ldr	r4, [r5, #4]
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e01c:	0719      	lsls	r1, r3, #28
 800e01e:	d42c      	bmi.n	800e07a <__swsetup_r+0x82>
 800e020:	06dd      	lsls	r5, r3, #27
 800e022:	d411      	bmi.n	800e048 <__swsetup_r+0x50>
 800e024:	2309      	movs	r3, #9
 800e026:	6033      	str	r3, [r6, #0]
 800e028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e02c:	f04f 30ff 	mov.w	r0, #4294967295
 800e030:	81a3      	strh	r3, [r4, #12]
 800e032:	e03e      	b.n	800e0b2 <__swsetup_r+0xba>
 800e034:	4b25      	ldr	r3, [pc, #148]	; (800e0cc <__swsetup_r+0xd4>)
 800e036:	429c      	cmp	r4, r3
 800e038:	d101      	bne.n	800e03e <__swsetup_r+0x46>
 800e03a:	68ac      	ldr	r4, [r5, #8]
 800e03c:	e7eb      	b.n	800e016 <__swsetup_r+0x1e>
 800e03e:	4b24      	ldr	r3, [pc, #144]	; (800e0d0 <__swsetup_r+0xd8>)
 800e040:	429c      	cmp	r4, r3
 800e042:	bf08      	it	eq
 800e044:	68ec      	ldreq	r4, [r5, #12]
 800e046:	e7e6      	b.n	800e016 <__swsetup_r+0x1e>
 800e048:	0758      	lsls	r0, r3, #29
 800e04a:	d512      	bpl.n	800e072 <__swsetup_r+0x7a>
 800e04c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e04e:	b141      	cbz	r1, 800e062 <__swsetup_r+0x6a>
 800e050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e054:	4299      	cmp	r1, r3
 800e056:	d002      	beq.n	800e05e <__swsetup_r+0x66>
 800e058:	4630      	mov	r0, r6
 800e05a:	f7ff fb89 	bl	800d770 <_free_r>
 800e05e:	2300      	movs	r3, #0
 800e060:	6363      	str	r3, [r4, #52]	; 0x34
 800e062:	89a3      	ldrh	r3, [r4, #12]
 800e064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e068:	81a3      	strh	r3, [r4, #12]
 800e06a:	2300      	movs	r3, #0
 800e06c:	6063      	str	r3, [r4, #4]
 800e06e:	6923      	ldr	r3, [r4, #16]
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	89a3      	ldrh	r3, [r4, #12]
 800e074:	f043 0308 	orr.w	r3, r3, #8
 800e078:	81a3      	strh	r3, [r4, #12]
 800e07a:	6923      	ldr	r3, [r4, #16]
 800e07c:	b94b      	cbnz	r3, 800e092 <__swsetup_r+0x9a>
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e088:	d003      	beq.n	800e092 <__swsetup_r+0x9a>
 800e08a:	4621      	mov	r1, r4
 800e08c:	4630      	mov	r0, r6
 800e08e:	f000 fa07 	bl	800e4a0 <__smakebuf_r>
 800e092:	89a0      	ldrh	r0, [r4, #12]
 800e094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e098:	f010 0301 	ands.w	r3, r0, #1
 800e09c:	d00a      	beq.n	800e0b4 <__swsetup_r+0xbc>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	60a3      	str	r3, [r4, #8]
 800e0a2:	6963      	ldr	r3, [r4, #20]
 800e0a4:	425b      	negs	r3, r3
 800e0a6:	61a3      	str	r3, [r4, #24]
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	b943      	cbnz	r3, 800e0be <__swsetup_r+0xc6>
 800e0ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e0b0:	d1ba      	bne.n	800e028 <__swsetup_r+0x30>
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
 800e0b4:	0781      	lsls	r1, r0, #30
 800e0b6:	bf58      	it	pl
 800e0b8:	6963      	ldrpl	r3, [r4, #20]
 800e0ba:	60a3      	str	r3, [r4, #8]
 800e0bc:	e7f4      	b.n	800e0a8 <__swsetup_r+0xb0>
 800e0be:	2000      	movs	r0, #0
 800e0c0:	e7f7      	b.n	800e0b2 <__swsetup_r+0xba>
 800e0c2:	bf00      	nop
 800e0c4:	20000014 	.word	0x20000014
 800e0c8:	0800f044 	.word	0x0800f044
 800e0cc:	0800f064 	.word	0x0800f064
 800e0d0:	0800f024 	.word	0x0800f024

0800e0d4 <abort>:
 800e0d4:	2006      	movs	r0, #6
 800e0d6:	b508      	push	{r3, lr}
 800e0d8:	f000 fa52 	bl	800e580 <raise>
 800e0dc:	2001      	movs	r0, #1
 800e0de:	f000 fb65 	bl	800e7ac <_exit>
	...

0800e0e4 <__sflush_r>:
 800e0e4:	898a      	ldrh	r2, [r1, #12]
 800e0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	0710      	lsls	r0, r2, #28
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	d458      	bmi.n	800e1a4 <__sflush_r+0xc0>
 800e0f2:	684b      	ldr	r3, [r1, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	dc05      	bgt.n	800e104 <__sflush_r+0x20>
 800e0f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	dc02      	bgt.n	800e104 <__sflush_r+0x20>
 800e0fe:	2000      	movs	r0, #0
 800e100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e106:	2e00      	cmp	r6, #0
 800e108:	d0f9      	beq.n	800e0fe <__sflush_r+0x1a>
 800e10a:	2300      	movs	r3, #0
 800e10c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e110:	682f      	ldr	r7, [r5, #0]
 800e112:	602b      	str	r3, [r5, #0]
 800e114:	d032      	beq.n	800e17c <__sflush_r+0x98>
 800e116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e118:	89a3      	ldrh	r3, [r4, #12]
 800e11a:	075a      	lsls	r2, r3, #29
 800e11c:	d505      	bpl.n	800e12a <__sflush_r+0x46>
 800e11e:	6863      	ldr	r3, [r4, #4]
 800e120:	1ac0      	subs	r0, r0, r3
 800e122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e124:	b10b      	cbz	r3, 800e12a <__sflush_r+0x46>
 800e126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e128:	1ac0      	subs	r0, r0, r3
 800e12a:	2300      	movs	r3, #0
 800e12c:	4602      	mov	r2, r0
 800e12e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e130:	4628      	mov	r0, r5
 800e132:	6a21      	ldr	r1, [r4, #32]
 800e134:	47b0      	blx	r6
 800e136:	1c43      	adds	r3, r0, #1
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	d106      	bne.n	800e14a <__sflush_r+0x66>
 800e13c:	6829      	ldr	r1, [r5, #0]
 800e13e:	291d      	cmp	r1, #29
 800e140:	d82c      	bhi.n	800e19c <__sflush_r+0xb8>
 800e142:	4a2a      	ldr	r2, [pc, #168]	; (800e1ec <__sflush_r+0x108>)
 800e144:	40ca      	lsrs	r2, r1
 800e146:	07d6      	lsls	r6, r2, #31
 800e148:	d528      	bpl.n	800e19c <__sflush_r+0xb8>
 800e14a:	2200      	movs	r2, #0
 800e14c:	6062      	str	r2, [r4, #4]
 800e14e:	6922      	ldr	r2, [r4, #16]
 800e150:	04d9      	lsls	r1, r3, #19
 800e152:	6022      	str	r2, [r4, #0]
 800e154:	d504      	bpl.n	800e160 <__sflush_r+0x7c>
 800e156:	1c42      	adds	r2, r0, #1
 800e158:	d101      	bne.n	800e15e <__sflush_r+0x7a>
 800e15a:	682b      	ldr	r3, [r5, #0]
 800e15c:	b903      	cbnz	r3, 800e160 <__sflush_r+0x7c>
 800e15e:	6560      	str	r0, [r4, #84]	; 0x54
 800e160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e162:	602f      	str	r7, [r5, #0]
 800e164:	2900      	cmp	r1, #0
 800e166:	d0ca      	beq.n	800e0fe <__sflush_r+0x1a>
 800e168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e16c:	4299      	cmp	r1, r3
 800e16e:	d002      	beq.n	800e176 <__sflush_r+0x92>
 800e170:	4628      	mov	r0, r5
 800e172:	f7ff fafd 	bl	800d770 <_free_r>
 800e176:	2000      	movs	r0, #0
 800e178:	6360      	str	r0, [r4, #52]	; 0x34
 800e17a:	e7c1      	b.n	800e100 <__sflush_r+0x1c>
 800e17c:	6a21      	ldr	r1, [r4, #32]
 800e17e:	2301      	movs	r3, #1
 800e180:	4628      	mov	r0, r5
 800e182:	47b0      	blx	r6
 800e184:	1c41      	adds	r1, r0, #1
 800e186:	d1c7      	bne.n	800e118 <__sflush_r+0x34>
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d0c4      	beq.n	800e118 <__sflush_r+0x34>
 800e18e:	2b1d      	cmp	r3, #29
 800e190:	d001      	beq.n	800e196 <__sflush_r+0xb2>
 800e192:	2b16      	cmp	r3, #22
 800e194:	d101      	bne.n	800e19a <__sflush_r+0xb6>
 800e196:	602f      	str	r7, [r5, #0]
 800e198:	e7b1      	b.n	800e0fe <__sflush_r+0x1a>
 800e19a:	89a3      	ldrh	r3, [r4, #12]
 800e19c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1a0:	81a3      	strh	r3, [r4, #12]
 800e1a2:	e7ad      	b.n	800e100 <__sflush_r+0x1c>
 800e1a4:	690f      	ldr	r7, [r1, #16]
 800e1a6:	2f00      	cmp	r7, #0
 800e1a8:	d0a9      	beq.n	800e0fe <__sflush_r+0x1a>
 800e1aa:	0793      	lsls	r3, r2, #30
 800e1ac:	bf18      	it	ne
 800e1ae:	2300      	movne	r3, #0
 800e1b0:	680e      	ldr	r6, [r1, #0]
 800e1b2:	bf08      	it	eq
 800e1b4:	694b      	ldreq	r3, [r1, #20]
 800e1b6:	eba6 0807 	sub.w	r8, r6, r7
 800e1ba:	600f      	str	r7, [r1, #0]
 800e1bc:	608b      	str	r3, [r1, #8]
 800e1be:	f1b8 0f00 	cmp.w	r8, #0
 800e1c2:	dd9c      	ble.n	800e0fe <__sflush_r+0x1a>
 800e1c4:	4643      	mov	r3, r8
 800e1c6:	463a      	mov	r2, r7
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	6a21      	ldr	r1, [r4, #32]
 800e1cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e1ce:	47b0      	blx	r6
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	dc06      	bgt.n	800e1e2 <__sflush_r+0xfe>
 800e1d4:	89a3      	ldrh	r3, [r4, #12]
 800e1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1de:	81a3      	strh	r3, [r4, #12]
 800e1e0:	e78e      	b.n	800e100 <__sflush_r+0x1c>
 800e1e2:	4407      	add	r7, r0
 800e1e4:	eba8 0800 	sub.w	r8, r8, r0
 800e1e8:	e7e9      	b.n	800e1be <__sflush_r+0xda>
 800e1ea:	bf00      	nop
 800e1ec:	20400001 	.word	0x20400001

0800e1f0 <_fflush_r>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	690b      	ldr	r3, [r1, #16]
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	460c      	mov	r4, r1
 800e1f8:	b913      	cbnz	r3, 800e200 <_fflush_r+0x10>
 800e1fa:	2500      	movs	r5, #0
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	bd38      	pop	{r3, r4, r5, pc}
 800e200:	b118      	cbz	r0, 800e20a <_fflush_r+0x1a>
 800e202:	6983      	ldr	r3, [r0, #24]
 800e204:	b90b      	cbnz	r3, 800e20a <_fflush_r+0x1a>
 800e206:	f000 f887 	bl	800e318 <__sinit>
 800e20a:	4b14      	ldr	r3, [pc, #80]	; (800e25c <_fflush_r+0x6c>)
 800e20c:	429c      	cmp	r4, r3
 800e20e:	d11b      	bne.n	800e248 <_fflush_r+0x58>
 800e210:	686c      	ldr	r4, [r5, #4]
 800e212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d0ef      	beq.n	800e1fa <_fflush_r+0xa>
 800e21a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e21c:	07d0      	lsls	r0, r2, #31
 800e21e:	d404      	bmi.n	800e22a <_fflush_r+0x3a>
 800e220:	0599      	lsls	r1, r3, #22
 800e222:	d402      	bmi.n	800e22a <_fflush_r+0x3a>
 800e224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e226:	f000 f915 	bl	800e454 <__retarget_lock_acquire_recursive>
 800e22a:	4628      	mov	r0, r5
 800e22c:	4621      	mov	r1, r4
 800e22e:	f7ff ff59 	bl	800e0e4 <__sflush_r>
 800e232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e234:	4605      	mov	r5, r0
 800e236:	07da      	lsls	r2, r3, #31
 800e238:	d4e0      	bmi.n	800e1fc <_fflush_r+0xc>
 800e23a:	89a3      	ldrh	r3, [r4, #12]
 800e23c:	059b      	lsls	r3, r3, #22
 800e23e:	d4dd      	bmi.n	800e1fc <_fflush_r+0xc>
 800e240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e242:	f000 f908 	bl	800e456 <__retarget_lock_release_recursive>
 800e246:	e7d9      	b.n	800e1fc <_fflush_r+0xc>
 800e248:	4b05      	ldr	r3, [pc, #20]	; (800e260 <_fflush_r+0x70>)
 800e24a:	429c      	cmp	r4, r3
 800e24c:	d101      	bne.n	800e252 <_fflush_r+0x62>
 800e24e:	68ac      	ldr	r4, [r5, #8]
 800e250:	e7df      	b.n	800e212 <_fflush_r+0x22>
 800e252:	4b04      	ldr	r3, [pc, #16]	; (800e264 <_fflush_r+0x74>)
 800e254:	429c      	cmp	r4, r3
 800e256:	bf08      	it	eq
 800e258:	68ec      	ldreq	r4, [r5, #12]
 800e25a:	e7da      	b.n	800e212 <_fflush_r+0x22>
 800e25c:	0800f044 	.word	0x0800f044
 800e260:	0800f064 	.word	0x0800f064
 800e264:	0800f024 	.word	0x0800f024

0800e268 <std>:
 800e268:	2300      	movs	r3, #0
 800e26a:	b510      	push	{r4, lr}
 800e26c:	4604      	mov	r4, r0
 800e26e:	e9c0 3300 	strd	r3, r3, [r0]
 800e272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e276:	6083      	str	r3, [r0, #8]
 800e278:	8181      	strh	r1, [r0, #12]
 800e27a:	6643      	str	r3, [r0, #100]	; 0x64
 800e27c:	81c2      	strh	r2, [r0, #14]
 800e27e:	6183      	str	r3, [r0, #24]
 800e280:	4619      	mov	r1, r3
 800e282:	2208      	movs	r2, #8
 800e284:	305c      	adds	r0, #92	; 0x5c
 800e286:	f7fb fe29 	bl	8009edc <memset>
 800e28a:	4b05      	ldr	r3, [pc, #20]	; (800e2a0 <std+0x38>)
 800e28c:	6224      	str	r4, [r4, #32]
 800e28e:	6263      	str	r3, [r4, #36]	; 0x24
 800e290:	4b04      	ldr	r3, [pc, #16]	; (800e2a4 <std+0x3c>)
 800e292:	62a3      	str	r3, [r4, #40]	; 0x28
 800e294:	4b04      	ldr	r3, [pc, #16]	; (800e2a8 <std+0x40>)
 800e296:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e298:	4b04      	ldr	r3, [pc, #16]	; (800e2ac <std+0x44>)
 800e29a:	6323      	str	r3, [r4, #48]	; 0x30
 800e29c:	bd10      	pop	{r4, pc}
 800e29e:	bf00      	nop
 800e2a0:	0800e5b9 	.word	0x0800e5b9
 800e2a4:	0800e5db 	.word	0x0800e5db
 800e2a8:	0800e613 	.word	0x0800e613
 800e2ac:	0800e637 	.word	0x0800e637

0800e2b0 <_cleanup_r>:
 800e2b0:	4901      	ldr	r1, [pc, #4]	; (800e2b8 <_cleanup_r+0x8>)
 800e2b2:	f000 b8af 	b.w	800e414 <_fwalk_reent>
 800e2b6:	bf00      	nop
 800e2b8:	0800e1f1 	.word	0x0800e1f1

0800e2bc <__sfmoreglue>:
 800e2bc:	b570      	push	{r4, r5, r6, lr}
 800e2be:	2568      	movs	r5, #104	; 0x68
 800e2c0:	1e4a      	subs	r2, r1, #1
 800e2c2:	4355      	muls	r5, r2
 800e2c4:	460e      	mov	r6, r1
 800e2c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e2ca:	f7ff fa9d 	bl	800d808 <_malloc_r>
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	b140      	cbz	r0, 800e2e4 <__sfmoreglue+0x28>
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	e9c0 1600 	strd	r1, r6, [r0]
 800e2d8:	300c      	adds	r0, #12
 800e2da:	60a0      	str	r0, [r4, #8]
 800e2dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e2e0:	f7fb fdfc 	bl	8009edc <memset>
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}

0800e2e8 <__sfp_lock_acquire>:
 800e2e8:	4801      	ldr	r0, [pc, #4]	; (800e2f0 <__sfp_lock_acquire+0x8>)
 800e2ea:	f000 b8b3 	b.w	800e454 <__retarget_lock_acquire_recursive>
 800e2ee:	bf00      	nop
 800e2f0:	200022e4 	.word	0x200022e4

0800e2f4 <__sfp_lock_release>:
 800e2f4:	4801      	ldr	r0, [pc, #4]	; (800e2fc <__sfp_lock_release+0x8>)
 800e2f6:	f000 b8ae 	b.w	800e456 <__retarget_lock_release_recursive>
 800e2fa:	bf00      	nop
 800e2fc:	200022e4 	.word	0x200022e4

0800e300 <__sinit_lock_acquire>:
 800e300:	4801      	ldr	r0, [pc, #4]	; (800e308 <__sinit_lock_acquire+0x8>)
 800e302:	f000 b8a7 	b.w	800e454 <__retarget_lock_acquire_recursive>
 800e306:	bf00      	nop
 800e308:	200022df 	.word	0x200022df

0800e30c <__sinit_lock_release>:
 800e30c:	4801      	ldr	r0, [pc, #4]	; (800e314 <__sinit_lock_release+0x8>)
 800e30e:	f000 b8a2 	b.w	800e456 <__retarget_lock_release_recursive>
 800e312:	bf00      	nop
 800e314:	200022df 	.word	0x200022df

0800e318 <__sinit>:
 800e318:	b510      	push	{r4, lr}
 800e31a:	4604      	mov	r4, r0
 800e31c:	f7ff fff0 	bl	800e300 <__sinit_lock_acquire>
 800e320:	69a3      	ldr	r3, [r4, #24]
 800e322:	b11b      	cbz	r3, 800e32c <__sinit+0x14>
 800e324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e328:	f7ff bff0 	b.w	800e30c <__sinit_lock_release>
 800e32c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e330:	6523      	str	r3, [r4, #80]	; 0x50
 800e332:	4b13      	ldr	r3, [pc, #76]	; (800e380 <__sinit+0x68>)
 800e334:	4a13      	ldr	r2, [pc, #76]	; (800e384 <__sinit+0x6c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	62a2      	str	r2, [r4, #40]	; 0x28
 800e33a:	42a3      	cmp	r3, r4
 800e33c:	bf08      	it	eq
 800e33e:	2301      	moveq	r3, #1
 800e340:	4620      	mov	r0, r4
 800e342:	bf08      	it	eq
 800e344:	61a3      	streq	r3, [r4, #24]
 800e346:	f000 f81f 	bl	800e388 <__sfp>
 800e34a:	6060      	str	r0, [r4, #4]
 800e34c:	4620      	mov	r0, r4
 800e34e:	f000 f81b 	bl	800e388 <__sfp>
 800e352:	60a0      	str	r0, [r4, #8]
 800e354:	4620      	mov	r0, r4
 800e356:	f000 f817 	bl	800e388 <__sfp>
 800e35a:	2200      	movs	r2, #0
 800e35c:	2104      	movs	r1, #4
 800e35e:	60e0      	str	r0, [r4, #12]
 800e360:	6860      	ldr	r0, [r4, #4]
 800e362:	f7ff ff81 	bl	800e268 <std>
 800e366:	2201      	movs	r2, #1
 800e368:	2109      	movs	r1, #9
 800e36a:	68a0      	ldr	r0, [r4, #8]
 800e36c:	f7ff ff7c 	bl	800e268 <std>
 800e370:	2202      	movs	r2, #2
 800e372:	2112      	movs	r1, #18
 800e374:	68e0      	ldr	r0, [r4, #12]
 800e376:	f7ff ff77 	bl	800e268 <std>
 800e37a:	2301      	movs	r3, #1
 800e37c:	61a3      	str	r3, [r4, #24]
 800e37e:	e7d1      	b.n	800e324 <__sinit+0xc>
 800e380:	0800ebd0 	.word	0x0800ebd0
 800e384:	0800e2b1 	.word	0x0800e2b1

0800e388 <__sfp>:
 800e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38a:	4607      	mov	r7, r0
 800e38c:	f7ff ffac 	bl	800e2e8 <__sfp_lock_acquire>
 800e390:	4b1e      	ldr	r3, [pc, #120]	; (800e40c <__sfp+0x84>)
 800e392:	681e      	ldr	r6, [r3, #0]
 800e394:	69b3      	ldr	r3, [r6, #24]
 800e396:	b913      	cbnz	r3, 800e39e <__sfp+0x16>
 800e398:	4630      	mov	r0, r6
 800e39a:	f7ff ffbd 	bl	800e318 <__sinit>
 800e39e:	3648      	adds	r6, #72	; 0x48
 800e3a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	d503      	bpl.n	800e3b0 <__sfp+0x28>
 800e3a8:	6833      	ldr	r3, [r6, #0]
 800e3aa:	b30b      	cbz	r3, 800e3f0 <__sfp+0x68>
 800e3ac:	6836      	ldr	r6, [r6, #0]
 800e3ae:	e7f7      	b.n	800e3a0 <__sfp+0x18>
 800e3b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3b4:	b9d5      	cbnz	r5, 800e3ec <__sfp+0x64>
 800e3b6:	4b16      	ldr	r3, [pc, #88]	; (800e410 <__sfp+0x88>)
 800e3b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3bc:	60e3      	str	r3, [r4, #12]
 800e3be:	6665      	str	r5, [r4, #100]	; 0x64
 800e3c0:	f000 f847 	bl	800e452 <__retarget_lock_init_recursive>
 800e3c4:	f7ff ff96 	bl	800e2f4 <__sfp_lock_release>
 800e3c8:	2208      	movs	r2, #8
 800e3ca:	4629      	mov	r1, r5
 800e3cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e3d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e3d4:	6025      	str	r5, [r4, #0]
 800e3d6:	61a5      	str	r5, [r4, #24]
 800e3d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3dc:	f7fb fd7e 	bl	8009edc <memset>
 800e3e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e3e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ec:	3468      	adds	r4, #104	; 0x68
 800e3ee:	e7d9      	b.n	800e3a4 <__sfp+0x1c>
 800e3f0:	2104      	movs	r1, #4
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	f7ff ff62 	bl	800e2bc <__sfmoreglue>
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	6030      	str	r0, [r6, #0]
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d1d5      	bne.n	800e3ac <__sfp+0x24>
 800e400:	f7ff ff78 	bl	800e2f4 <__sfp_lock_release>
 800e404:	230c      	movs	r3, #12
 800e406:	603b      	str	r3, [r7, #0]
 800e408:	e7ee      	b.n	800e3e8 <__sfp+0x60>
 800e40a:	bf00      	nop
 800e40c:	0800ebd0 	.word	0x0800ebd0
 800e410:	ffff0001 	.word	0xffff0001

0800e414 <_fwalk_reent>:
 800e414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e418:	4606      	mov	r6, r0
 800e41a:	4688      	mov	r8, r1
 800e41c:	2700      	movs	r7, #0
 800e41e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e426:	f1b9 0901 	subs.w	r9, r9, #1
 800e42a:	d505      	bpl.n	800e438 <_fwalk_reent+0x24>
 800e42c:	6824      	ldr	r4, [r4, #0]
 800e42e:	2c00      	cmp	r4, #0
 800e430:	d1f7      	bne.n	800e422 <_fwalk_reent+0xe>
 800e432:	4638      	mov	r0, r7
 800e434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e438:	89ab      	ldrh	r3, [r5, #12]
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d907      	bls.n	800e44e <_fwalk_reent+0x3a>
 800e43e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e442:	3301      	adds	r3, #1
 800e444:	d003      	beq.n	800e44e <_fwalk_reent+0x3a>
 800e446:	4629      	mov	r1, r5
 800e448:	4630      	mov	r0, r6
 800e44a:	47c0      	blx	r8
 800e44c:	4307      	orrs	r7, r0
 800e44e:	3568      	adds	r5, #104	; 0x68
 800e450:	e7e9      	b.n	800e426 <_fwalk_reent+0x12>

0800e452 <__retarget_lock_init_recursive>:
 800e452:	4770      	bx	lr

0800e454 <__retarget_lock_acquire_recursive>:
 800e454:	4770      	bx	lr

0800e456 <__retarget_lock_release_recursive>:
 800e456:	4770      	bx	lr

0800e458 <__swhatbuf_r>:
 800e458:	b570      	push	{r4, r5, r6, lr}
 800e45a:	460e      	mov	r6, r1
 800e45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e460:	4614      	mov	r4, r2
 800e462:	2900      	cmp	r1, #0
 800e464:	461d      	mov	r5, r3
 800e466:	b096      	sub	sp, #88	; 0x58
 800e468:	da07      	bge.n	800e47a <__swhatbuf_r+0x22>
 800e46a:	2300      	movs	r3, #0
 800e46c:	602b      	str	r3, [r5, #0]
 800e46e:	89b3      	ldrh	r3, [r6, #12]
 800e470:	061a      	lsls	r2, r3, #24
 800e472:	d410      	bmi.n	800e496 <__swhatbuf_r+0x3e>
 800e474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e478:	e00e      	b.n	800e498 <__swhatbuf_r+0x40>
 800e47a:	466a      	mov	r2, sp
 800e47c:	f000 f902 	bl	800e684 <_fstat_r>
 800e480:	2800      	cmp	r0, #0
 800e482:	dbf2      	blt.n	800e46a <__swhatbuf_r+0x12>
 800e484:	9a01      	ldr	r2, [sp, #4]
 800e486:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e48a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e48e:	425a      	negs	r2, r3
 800e490:	415a      	adcs	r2, r3
 800e492:	602a      	str	r2, [r5, #0]
 800e494:	e7ee      	b.n	800e474 <__swhatbuf_r+0x1c>
 800e496:	2340      	movs	r3, #64	; 0x40
 800e498:	2000      	movs	r0, #0
 800e49a:	6023      	str	r3, [r4, #0]
 800e49c:	b016      	add	sp, #88	; 0x58
 800e49e:	bd70      	pop	{r4, r5, r6, pc}

0800e4a0 <__smakebuf_r>:
 800e4a0:	898b      	ldrh	r3, [r1, #12]
 800e4a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4a4:	079d      	lsls	r5, r3, #30
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	460c      	mov	r4, r1
 800e4aa:	d507      	bpl.n	800e4bc <__smakebuf_r+0x1c>
 800e4ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e4b0:	6023      	str	r3, [r4, #0]
 800e4b2:	6123      	str	r3, [r4, #16]
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	6163      	str	r3, [r4, #20]
 800e4b8:	b002      	add	sp, #8
 800e4ba:	bd70      	pop	{r4, r5, r6, pc}
 800e4bc:	466a      	mov	r2, sp
 800e4be:	ab01      	add	r3, sp, #4
 800e4c0:	f7ff ffca 	bl	800e458 <__swhatbuf_r>
 800e4c4:	9900      	ldr	r1, [sp, #0]
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	f7ff f99d 	bl	800d808 <_malloc_r>
 800e4ce:	b948      	cbnz	r0, 800e4e4 <__smakebuf_r+0x44>
 800e4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4d4:	059a      	lsls	r2, r3, #22
 800e4d6:	d4ef      	bmi.n	800e4b8 <__smakebuf_r+0x18>
 800e4d8:	f023 0303 	bic.w	r3, r3, #3
 800e4dc:	f043 0302 	orr.w	r3, r3, #2
 800e4e0:	81a3      	strh	r3, [r4, #12]
 800e4e2:	e7e3      	b.n	800e4ac <__smakebuf_r+0xc>
 800e4e4:	4b0d      	ldr	r3, [pc, #52]	; (800e51c <__smakebuf_r+0x7c>)
 800e4e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e4e8:	89a3      	ldrh	r3, [r4, #12]
 800e4ea:	6020      	str	r0, [r4, #0]
 800e4ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4f0:	81a3      	strh	r3, [r4, #12]
 800e4f2:	9b00      	ldr	r3, [sp, #0]
 800e4f4:	6120      	str	r0, [r4, #16]
 800e4f6:	6163      	str	r3, [r4, #20]
 800e4f8:	9b01      	ldr	r3, [sp, #4]
 800e4fa:	b15b      	cbz	r3, 800e514 <__smakebuf_r+0x74>
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e502:	f000 f8d1 	bl	800e6a8 <_isatty_r>
 800e506:	b128      	cbz	r0, 800e514 <__smakebuf_r+0x74>
 800e508:	89a3      	ldrh	r3, [r4, #12]
 800e50a:	f023 0303 	bic.w	r3, r3, #3
 800e50e:	f043 0301 	orr.w	r3, r3, #1
 800e512:	81a3      	strh	r3, [r4, #12]
 800e514:	89a0      	ldrh	r0, [r4, #12]
 800e516:	4305      	orrs	r5, r0
 800e518:	81a5      	strh	r5, [r4, #12]
 800e51a:	e7cd      	b.n	800e4b8 <__smakebuf_r+0x18>
 800e51c:	0800e2b1 	.word	0x0800e2b1

0800e520 <_malloc_usable_size_r>:
 800e520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e524:	1f18      	subs	r0, r3, #4
 800e526:	2b00      	cmp	r3, #0
 800e528:	bfbc      	itt	lt
 800e52a:	580b      	ldrlt	r3, [r1, r0]
 800e52c:	18c0      	addlt	r0, r0, r3
 800e52e:	4770      	bx	lr

0800e530 <_raise_r>:
 800e530:	291f      	cmp	r1, #31
 800e532:	b538      	push	{r3, r4, r5, lr}
 800e534:	4604      	mov	r4, r0
 800e536:	460d      	mov	r5, r1
 800e538:	d904      	bls.n	800e544 <_raise_r+0x14>
 800e53a:	2316      	movs	r3, #22
 800e53c:	6003      	str	r3, [r0, #0]
 800e53e:	f04f 30ff 	mov.w	r0, #4294967295
 800e542:	bd38      	pop	{r3, r4, r5, pc}
 800e544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e546:	b112      	cbz	r2, 800e54e <_raise_r+0x1e>
 800e548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e54c:	b94b      	cbnz	r3, 800e562 <_raise_r+0x32>
 800e54e:	4620      	mov	r0, r4
 800e550:	f000 f830 	bl	800e5b4 <_getpid_r>
 800e554:	462a      	mov	r2, r5
 800e556:	4601      	mov	r1, r0
 800e558:	4620      	mov	r0, r4
 800e55a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e55e:	f000 b817 	b.w	800e590 <_kill_r>
 800e562:	2b01      	cmp	r3, #1
 800e564:	d00a      	beq.n	800e57c <_raise_r+0x4c>
 800e566:	1c59      	adds	r1, r3, #1
 800e568:	d103      	bne.n	800e572 <_raise_r+0x42>
 800e56a:	2316      	movs	r3, #22
 800e56c:	6003      	str	r3, [r0, #0]
 800e56e:	2001      	movs	r0, #1
 800e570:	e7e7      	b.n	800e542 <_raise_r+0x12>
 800e572:	2400      	movs	r4, #0
 800e574:	4628      	mov	r0, r5
 800e576:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e57a:	4798      	blx	r3
 800e57c:	2000      	movs	r0, #0
 800e57e:	e7e0      	b.n	800e542 <_raise_r+0x12>

0800e580 <raise>:
 800e580:	4b02      	ldr	r3, [pc, #8]	; (800e58c <raise+0xc>)
 800e582:	4601      	mov	r1, r0
 800e584:	6818      	ldr	r0, [r3, #0]
 800e586:	f7ff bfd3 	b.w	800e530 <_raise_r>
 800e58a:	bf00      	nop
 800e58c:	20000014 	.word	0x20000014

0800e590 <_kill_r>:
 800e590:	b538      	push	{r3, r4, r5, lr}
 800e592:	2300      	movs	r3, #0
 800e594:	4d06      	ldr	r5, [pc, #24]	; (800e5b0 <_kill_r+0x20>)
 800e596:	4604      	mov	r4, r0
 800e598:	4608      	mov	r0, r1
 800e59a:	4611      	mov	r1, r2
 800e59c:	602b      	str	r3, [r5, #0]
 800e59e:	f000 f8d7 	bl	800e750 <_kill>
 800e5a2:	1c43      	adds	r3, r0, #1
 800e5a4:	d102      	bne.n	800e5ac <_kill_r+0x1c>
 800e5a6:	682b      	ldr	r3, [r5, #0]
 800e5a8:	b103      	cbz	r3, 800e5ac <_kill_r+0x1c>
 800e5aa:	6023      	str	r3, [r4, #0]
 800e5ac:	bd38      	pop	{r3, r4, r5, pc}
 800e5ae:	bf00      	nop
 800e5b0:	200022d8 	.word	0x200022d8

0800e5b4 <_getpid_r>:
 800e5b4:	f000 b8bc 	b.w	800e730 <_getpid>

0800e5b8 <__sread>:
 800e5b8:	b510      	push	{r4, lr}
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c0:	f000 f894 	bl	800e6ec <_read_r>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	bfab      	itete	ge
 800e5c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e5cc:	181b      	addge	r3, r3, r0
 800e5ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5d2:	bfac      	ite	ge
 800e5d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5d6:	81a3      	strhlt	r3, [r4, #12]
 800e5d8:	bd10      	pop	{r4, pc}

0800e5da <__swrite>:
 800e5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5de:	461f      	mov	r7, r3
 800e5e0:	898b      	ldrh	r3, [r1, #12]
 800e5e2:	4605      	mov	r5, r0
 800e5e4:	05db      	lsls	r3, r3, #23
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	4616      	mov	r6, r2
 800e5ea:	d505      	bpl.n	800e5f8 <__swrite+0x1e>
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5f4:	f000 f868 	bl	800e6c8 <_lseek_r>
 800e5f8:	89a3      	ldrh	r3, [r4, #12]
 800e5fa:	4632      	mov	r2, r6
 800e5fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e600:	81a3      	strh	r3, [r4, #12]
 800e602:	4628      	mov	r0, r5
 800e604:	463b      	mov	r3, r7
 800e606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e60e:	f000 b817 	b.w	800e640 <_write_r>

0800e612 <__sseek>:
 800e612:	b510      	push	{r4, lr}
 800e614:	460c      	mov	r4, r1
 800e616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e61a:	f000 f855 	bl	800e6c8 <_lseek_r>
 800e61e:	1c43      	adds	r3, r0, #1
 800e620:	89a3      	ldrh	r3, [r4, #12]
 800e622:	bf15      	itete	ne
 800e624:	6560      	strne	r0, [r4, #84]	; 0x54
 800e626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e62a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e62e:	81a3      	strheq	r3, [r4, #12]
 800e630:	bf18      	it	ne
 800e632:	81a3      	strhne	r3, [r4, #12]
 800e634:	bd10      	pop	{r4, pc}

0800e636 <__sclose>:
 800e636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e63a:	f000 b813 	b.w	800e664 <_close_r>
	...

0800e640 <_write_r>:
 800e640:	b538      	push	{r3, r4, r5, lr}
 800e642:	4604      	mov	r4, r0
 800e644:	4608      	mov	r0, r1
 800e646:	4611      	mov	r1, r2
 800e648:	2200      	movs	r2, #0
 800e64a:	4d05      	ldr	r5, [pc, #20]	; (800e660 <_write_r+0x20>)
 800e64c:	602a      	str	r2, [r5, #0]
 800e64e:	461a      	mov	r2, r3
 800e650:	f000 f8a4 	bl	800e79c <_write>
 800e654:	1c43      	adds	r3, r0, #1
 800e656:	d102      	bne.n	800e65e <_write_r+0x1e>
 800e658:	682b      	ldr	r3, [r5, #0]
 800e65a:	b103      	cbz	r3, 800e65e <_write_r+0x1e>
 800e65c:	6023      	str	r3, [r4, #0]
 800e65e:	bd38      	pop	{r3, r4, r5, pc}
 800e660:	200022d8 	.word	0x200022d8

0800e664 <_close_r>:
 800e664:	b538      	push	{r3, r4, r5, lr}
 800e666:	2300      	movs	r3, #0
 800e668:	4d05      	ldr	r5, [pc, #20]	; (800e680 <_close_r+0x1c>)
 800e66a:	4604      	mov	r4, r0
 800e66c:	4608      	mov	r0, r1
 800e66e:	602b      	str	r3, [r5, #0]
 800e670:	f000 f84e 	bl	800e710 <_close>
 800e674:	1c43      	adds	r3, r0, #1
 800e676:	d102      	bne.n	800e67e <_close_r+0x1a>
 800e678:	682b      	ldr	r3, [r5, #0]
 800e67a:	b103      	cbz	r3, 800e67e <_close_r+0x1a>
 800e67c:	6023      	str	r3, [r4, #0]
 800e67e:	bd38      	pop	{r3, r4, r5, pc}
 800e680:	200022d8 	.word	0x200022d8

0800e684 <_fstat_r>:
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	2300      	movs	r3, #0
 800e688:	4d06      	ldr	r5, [pc, #24]	; (800e6a4 <_fstat_r+0x20>)
 800e68a:	4604      	mov	r4, r0
 800e68c:	4608      	mov	r0, r1
 800e68e:	4611      	mov	r1, r2
 800e690:	602b      	str	r3, [r5, #0]
 800e692:	f000 f845 	bl	800e720 <_fstat>
 800e696:	1c43      	adds	r3, r0, #1
 800e698:	d102      	bne.n	800e6a0 <_fstat_r+0x1c>
 800e69a:	682b      	ldr	r3, [r5, #0]
 800e69c:	b103      	cbz	r3, 800e6a0 <_fstat_r+0x1c>
 800e69e:	6023      	str	r3, [r4, #0]
 800e6a0:	bd38      	pop	{r3, r4, r5, pc}
 800e6a2:	bf00      	nop
 800e6a4:	200022d8 	.word	0x200022d8

0800e6a8 <_isatty_r>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	4d05      	ldr	r5, [pc, #20]	; (800e6c4 <_isatty_r+0x1c>)
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	4608      	mov	r0, r1
 800e6b2:	602b      	str	r3, [r5, #0]
 800e6b4:	f000 f844 	bl	800e740 <_isatty>
 800e6b8:	1c43      	adds	r3, r0, #1
 800e6ba:	d102      	bne.n	800e6c2 <_isatty_r+0x1a>
 800e6bc:	682b      	ldr	r3, [r5, #0]
 800e6be:	b103      	cbz	r3, 800e6c2 <_isatty_r+0x1a>
 800e6c0:	6023      	str	r3, [r4, #0]
 800e6c2:	bd38      	pop	{r3, r4, r5, pc}
 800e6c4:	200022d8 	.word	0x200022d8

0800e6c8 <_lseek_r>:
 800e6c8:	b538      	push	{r3, r4, r5, lr}
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	4611      	mov	r1, r2
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	4d05      	ldr	r5, [pc, #20]	; (800e6e8 <_lseek_r+0x20>)
 800e6d4:	602a      	str	r2, [r5, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	f000 f842 	bl	800e760 <_lseek>
 800e6dc:	1c43      	adds	r3, r0, #1
 800e6de:	d102      	bne.n	800e6e6 <_lseek_r+0x1e>
 800e6e0:	682b      	ldr	r3, [r5, #0]
 800e6e2:	b103      	cbz	r3, 800e6e6 <_lseek_r+0x1e>
 800e6e4:	6023      	str	r3, [r4, #0]
 800e6e6:	bd38      	pop	{r3, r4, r5, pc}
 800e6e8:	200022d8 	.word	0x200022d8

0800e6ec <_read_r>:
 800e6ec:	b538      	push	{r3, r4, r5, lr}
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	4608      	mov	r0, r1
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	4d05      	ldr	r5, [pc, #20]	; (800e70c <_read_r+0x20>)
 800e6f8:	602a      	str	r2, [r5, #0]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	f000 f838 	bl	800e770 <_read>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d102      	bne.n	800e70a <_read_r+0x1e>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	b103      	cbz	r3, 800e70a <_read_r+0x1e>
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	bd38      	pop	{r3, r4, r5, pc}
 800e70c:	200022d8 	.word	0x200022d8

0800e710 <_close>:
 800e710:	2258      	movs	r2, #88	; 0x58
 800e712:	4b02      	ldr	r3, [pc, #8]	; (800e71c <_close+0xc>)
 800e714:	f04f 30ff 	mov.w	r0, #4294967295
 800e718:	601a      	str	r2, [r3, #0]
 800e71a:	4770      	bx	lr
 800e71c:	200022d8 	.word	0x200022d8

0800e720 <_fstat>:
 800e720:	2258      	movs	r2, #88	; 0x58
 800e722:	4b02      	ldr	r3, [pc, #8]	; (800e72c <_fstat+0xc>)
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	601a      	str	r2, [r3, #0]
 800e72a:	4770      	bx	lr
 800e72c:	200022d8 	.word	0x200022d8

0800e730 <_getpid>:
 800e730:	2258      	movs	r2, #88	; 0x58
 800e732:	4b02      	ldr	r3, [pc, #8]	; (800e73c <_getpid+0xc>)
 800e734:	f04f 30ff 	mov.w	r0, #4294967295
 800e738:	601a      	str	r2, [r3, #0]
 800e73a:	4770      	bx	lr
 800e73c:	200022d8 	.word	0x200022d8

0800e740 <_isatty>:
 800e740:	2258      	movs	r2, #88	; 0x58
 800e742:	4b02      	ldr	r3, [pc, #8]	; (800e74c <_isatty+0xc>)
 800e744:	2000      	movs	r0, #0
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	200022d8 	.word	0x200022d8

0800e750 <_kill>:
 800e750:	2258      	movs	r2, #88	; 0x58
 800e752:	4b02      	ldr	r3, [pc, #8]	; (800e75c <_kill+0xc>)
 800e754:	f04f 30ff 	mov.w	r0, #4294967295
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	4770      	bx	lr
 800e75c:	200022d8 	.word	0x200022d8

0800e760 <_lseek>:
 800e760:	2258      	movs	r2, #88	; 0x58
 800e762:	4b02      	ldr	r3, [pc, #8]	; (800e76c <_lseek+0xc>)
 800e764:	f04f 30ff 	mov.w	r0, #4294967295
 800e768:	601a      	str	r2, [r3, #0]
 800e76a:	4770      	bx	lr
 800e76c:	200022d8 	.word	0x200022d8

0800e770 <_read>:
 800e770:	2258      	movs	r2, #88	; 0x58
 800e772:	4b02      	ldr	r3, [pc, #8]	; (800e77c <_read+0xc>)
 800e774:	f04f 30ff 	mov.w	r0, #4294967295
 800e778:	601a      	str	r2, [r3, #0]
 800e77a:	4770      	bx	lr
 800e77c:	200022d8 	.word	0x200022d8

0800e780 <_sbrk>:
 800e780:	4b04      	ldr	r3, [pc, #16]	; (800e794 <_sbrk+0x14>)
 800e782:	4602      	mov	r2, r0
 800e784:	6819      	ldr	r1, [r3, #0]
 800e786:	b909      	cbnz	r1, 800e78c <_sbrk+0xc>
 800e788:	4903      	ldr	r1, [pc, #12]	; (800e798 <_sbrk+0x18>)
 800e78a:	6019      	str	r1, [r3, #0]
 800e78c:	6818      	ldr	r0, [r3, #0]
 800e78e:	4402      	add	r2, r0
 800e790:	601a      	str	r2, [r3, #0]
 800e792:	4770      	bx	lr
 800e794:	20001ebc 	.word	0x20001ebc
 800e798:	200022e8 	.word	0x200022e8

0800e79c <_write>:
 800e79c:	2258      	movs	r2, #88	; 0x58
 800e79e:	4b02      	ldr	r3, [pc, #8]	; (800e7a8 <_write+0xc>)
 800e7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a4:	601a      	str	r2, [r3, #0]
 800e7a6:	4770      	bx	lr
 800e7a8:	200022d8 	.word	0x200022d8

0800e7ac <_exit>:
 800e7ac:	e7fe      	b.n	800e7ac <_exit>
	...

0800e7b0 <_init>:
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	bf00      	nop
 800e7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7b6:	bc08      	pop	{r3}
 800e7b8:	469e      	mov	lr, r3
 800e7ba:	4770      	bx	lr

0800e7bc <_fini>:
 800e7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7be:	bf00      	nop
 800e7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7c2:	bc08      	pop	{r3}
 800e7c4:	469e      	mov	lr, r3
 800e7c6:	4770      	bx	lr
